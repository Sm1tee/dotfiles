/*! For license information please see background.js.LICENSE.txt */
(()=>{var e={9742:(e,t)=>{"use strict";t.byteLength=function(e){var t=u(e),r=t[0],n=t[1];return 3*(r+n)/4-n},t.toByteArray=function(e){var t,r,o=u(e),s=o[0],a=o[1],l=new i(function(e,t,r){return 3*(t+r)/4-r}(0,s,a)),c=0,h=a>0?s-4:s;for(r=0;r<h;r+=4)t=n[e.charCodeAt(r)]<<18|n[e.charCodeAt(r+1)]<<12|n[e.charCodeAt(r+2)]<<6|n[e.charCodeAt(r+3)],l[c++]=t>>16&255,l[c++]=t>>8&255,l[c++]=255&t;return 2===a&&(t=n[e.charCodeAt(r)]<<2|n[e.charCodeAt(r+1)]>>4,l[c++]=255&t),1===a&&(t=n[e.charCodeAt(r)]<<10|n[e.charCodeAt(r+1)]<<4|n[e.charCodeAt(r+2)]>>2,l[c++]=t>>8&255,l[c++]=255&t),l},t.fromByteArray=function(e){for(var t,n=e.length,i=n%3,o=[],s=16383,a=0,u=n-i;a<u;a+=s)o.push(l(e,a,a+s>u?u:a+s));return 1===i?(t=e[n-1],o.push(r[t>>2]+r[t<<4&63]+"==")):2===i&&(t=(e[n-2]<<8)+e[n-1],o.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"=")),o.join("")};for(var r=[],n=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,a=o.length;s<a;++s)r[s]=o[s],n[o.charCodeAt(s)]=s;function u(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function l(e,t,n){for(var i,o,s=[],a=t;a<n;a+=3)i=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(255&e[a+2]),s.push(r[(o=i)>>18&63]+r[o>>12&63]+r[o>>6&63]+r[63&o]);return s.join("")}n["-".charCodeAt(0)]=62,n["_".charCodeAt(0)]=63},4362:function(e){e.exports=function(){"use strict";function e(e){return String(e).split("").map((function(e){return e.charCodeAt(0)}))}function t(t){return new Uint8Array(e(t))}function r(t){var r=new Uint8Array(2*t.length);return new Uint16Array(r.buffer).set(e(t)),r}return function(){var e=n.prototype;function n(e){if(!e||"object"!=typeof e||!("byteLength"in e))throw new Error("First argument should be an instance of ArrayBuffer or Buffer");this.arrayBuffer=e,this.padding=4096,this.frames=[],this.url=""}return e._setIntegerFrame=function(e,t){var r=parseInt(t,10);this.frames.push({name:e,value:r,size:11+r.toString().length})},e._setStringFrame=function(e,t){var r=t.toString();this.frames.push({name:e,value:r,size:13+2*r.length})},e._setPictureFrame=function(e,t,r,n){var i,o,s,a=function(e){if(!e||!e.length)return null;if(255===e[0]&&216===e[1]&&255===e[2])return"image/jpeg";if(137===e[0]&&80===e[1]&&78===e[2]&&71===e[3])return"image/png";if(71===e[0]&&73===e[1]&&70===e[2])return"image/gif";if(87===e[8]&&69===e[9]&&66===e[10]&&80===e[11])return"image/webp";var t=73===e[0]&&73===e[1]&&42===e[2]&&0===e[3],r=77===e[0]&&77===e[1]&&0===e[2]&&42===e[3];return t||r?"image/tiff":66===e[0]&&77===e[1]?"image/bmp":0===e[0]&&0===e[1]&&1===e[2]&&0===e[3]?"image/x-icon":null}(new Uint8Array(t)),u=r.toString();if(!a)throw new Error("Unknown picture MIME type");r||(n=!1),this.frames.push({name:"APIC",value:t,pictureType:e,mimeType:a,useUnicodeEncoding:n,description:u,size:(i=t.byteLength,o=a.length,s=u.length,11+o+1+1+(n?2+2*(s+1):s+1)+i)})},e._setLyricsFrame=function(e,t,r){var n,i,o=e.split("").map((function(e){return e.charCodeAt(0)})),s=t.toString(),a=r.toString();this.frames.push({name:"USLT",value:a,language:o,description:s,size:(n=s.length,i=a.length,16+2*n+2+2+2*i)})},e._setCommentFrame=function(e,t,r){var n,i,o=e.split("").map((function(e){return e.charCodeAt(0)})),s=t.toString(),a=r.toString();this.frames.push({name:"COMM",value:a,language:o,description:s,size:(n=s.length,i=a.length,16+2*n+2+2+2*i)})},e._setPrivateFrame=function(e,t){var r,n,i=e.toString();this.frames.push({name:"PRIV",value:t,id:i,size:(r=i.length,n=t.byteLength,10+r+1+n)})},e._setUserStringFrame=function(e,t){var r,n,i=e.toString(),o=t.toString();this.frames.push({name:"TXXX",description:i,value:o,size:(r=i.length,n=o.length,13+2*r+2+2+2*n)})},e._setUrlLinkFrame=function(e,t){var r=t.toString();this.frames.push({name:e,value:r,size:10+r.length})},e.setFrame=function(e,t){switch(e){case"TPE1":case"TCOM":case"TCON":if(!Array.isArray(t))throw new Error(e+" frame value should be an array of strings");var r="TCON"===e?";":"/",n=t.join(r);this._setStringFrame(e,n);break;case"TLAN":case"TIT1":case"TIT2":case"TIT3":case"TALB":case"TPE2":case"TPE3":case"TPE4":case"TRCK":case"TPOS":case"TMED":case"TPUB":case"TCOP":case"TKEY":case"TEXT":case"TSRC":this._setStringFrame(e,t);break;case"TBPM":case"TLEN":case"TDAT":case"TYER":this._setIntegerFrame(e,t);break;case"USLT":if(t.language=t.language||"eng","object"!=typeof t||!("description"in t)||!("lyrics"in t))throw new Error("USLT frame value should be an object with keys description and lyrics");if(t.language&&!t.language.match(/[a-z]{3}/i))throw new Error("Language must be coded following the ISO 639-2 standards");this._setLyricsFrame(t.language,t.description,t.lyrics);break;case"APIC":if(!("object"==typeof t&&"type"in t&&"data"in t&&"description"in t))throw new Error("APIC frame value should be an object with keys type, data and description");if(t.type<0||20<t.type)throw new Error("Incorrect APIC frame picture type");this._setPictureFrame(t.type,t.data,t.description,!!t.useUnicodeEncoding);break;case"TXXX":if("object"!=typeof t||!("description"in t)||!("value"in t))throw new Error("TXXX frame value should be an object with keys description and value");this._setUserStringFrame(t.description,t.value);break;case"WCOM":case"WCOP":case"WOAF":case"WOAR":case"WOAS":case"WORS":case"WPAY":case"WPUB":this._setUrlLinkFrame(e,t);break;case"COMM":if(t.language=t.language||"eng","object"!=typeof t||!("description"in t)||!("text"in t))throw new Error("COMM frame value should be an object with keys description and text");if(t.language&&!t.language.match(/[a-z]{3}/i))throw new Error("Language must be coded following the ISO 639-2 standards");this._setCommentFrame(t.language,t.description,t.text);break;case"PRIV":if("object"!=typeof t||!("id"in t)||!("data"in t))throw new Error("PRIV frame value should be an object with keys id and data");this._setPrivateFrame(t.id,t.data);break;default:throw new Error("Unsupported frame "+e)}return this},e.removeTag=function(){if(!(this.arrayBuffer.byteLength<10)){var e,t,r=new Uint8Array(this.arrayBuffer),n=r[3],i=((e=[r[6],r[7],r[8],r[9]])[0]<<21)+(e[1]<<14)+(e[2]<<7)+e[3]+10;73!==(t=r)[0]||68!==t[1]||51!==t[2]||n<2||4<n||(this.arrayBuffer=new Uint8Array(r.subarray(i)).buffer)}},e.addTag=function(){this.removeTag();var e,n=[255,254],i=10+this.frames.reduce((function(e,t){return e+t.size}),0)+this.padding,o=new ArrayBuffer(this.arrayBuffer.byteLength+i),s=new Uint8Array(o),a=0,u=[];return u=[73,68,51,3],s.set(u,a),a+=u.length,a++,a++,u=[(e=i-10)>>>21&127,e>>>14&127,e>>>7&127,127&e],s.set(u,a),a+=u.length,this.frames.forEach((function(e){var i;switch(u=t(e.name),s.set(u,a),a+=u.length,i=e.size-10,u=[i>>>24&255,i>>>16&255,i>>>8&255,255&i],s.set(u,a),a+=u.length,a+=2,e.name){case"WCOM":case"WCOP":case"WOAF":case"WOAR":case"WOAS":case"WORS":case"WPAY":case"WPUB":u=t(e.value),s.set(u,a),a+=u.length;break;case"TPE1":case"TCOM":case"TCON":case"TLAN":case"TIT1":case"TIT2":case"TIT3":case"TALB":case"TPE2":case"TPE3":case"TPE4":case"TRCK":case"TPOS":case"TKEY":case"TMED":case"TPUB":case"TCOP":case"TEXT":case"TSRC":u=[1].concat(n),s.set(u,a),a+=u.length,u=r(e.value),s.set(u,a),a+=u.length;break;case"TXXX":case"USLT":case"COMM":u=[1],"USLT"!==e.name&&"COMM"!==e.name||(u=u.concat(e.language)),u=u.concat(n),s.set(u,a),a+=u.length,u=r(e.description),s.set(u,a),a+=u.length,u=[0,0].concat(n),s.set(u,a),a+=u.length,u=r(e.value),s.set(u,a),a+=u.length;break;case"TBPM":case"TLEN":case"TDAT":case"TYER":a++,u=t(e.value),s.set(u,a),a+=u.length;break;case"PRIV":u=t(e.id),s.set(u,a),a+=u.length,a++,s.set(new Uint8Array(e.value),a),a+=e.value.byteLength;break;case"APIC":u=[e.useUnicodeEncoding?1:0],s.set(u,a),a+=u.length,u=t(e.mimeType),s.set(u,a),a+=u.length,u=[0,e.pictureType],s.set(u,a),a+=u.length,e.useUnicodeEncoding?(u=[].concat(n),s.set(u,a),a+=u.length,u=r(e.description),s.set(u,a),a+=u.length,a+=2):(u=t(e.description),s.set(u,a),a+=u.length,a++),s.set(new Uint8Array(e.value),a),a+=e.value.byteLength}})),a+=this.padding,s.set(new Uint8Array(this.arrayBuffer),a),this.arrayBuffer=o},e.getBlob=function(){return new Blob([this.arrayBuffer],{type:"audio/mpeg"})},e.getURL=function(){return this.url||(this.url=URL.createObjectURL(this.getBlob())),this.url},e.revokeURL=function(){URL.revokeObjectURL(this.url)},n}()}()},8764:(e,t,r)=>{"use strict";const n=r(9742),i=r(645),o="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;t.Buffer=u,t.SlowBuffer=function(e){return+e!=e&&(e=0),u.alloc(+e)},t.INSPECT_MAX_BYTES=50;const s=2147483647;function a(e){if(e>s)throw new RangeError('The value "'+e+'" is invalid for option "size"');const t=new Uint8Array(e);return Object.setPrototypeOf(t,u.prototype),t}function u(e,t,r){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return h(e)}return l(e,t,r)}function l(e,t,r){if("string"==typeof e)return function(e,t){if("string"==typeof t&&""!==t||(t="utf8"),!u.isEncoding(t))throw new TypeError("Unknown encoding: "+t);const r=0|g(e,t);let n=a(r);const i=n.write(e,t);return i!==r&&(n=n.slice(0,i)),n}(e,t);if(ArrayBuffer.isView(e))return function(e){if(X(e,Uint8Array)){const t=new Uint8Array(e);return d(t.buffer,t.byteOffset,t.byteLength)}return f(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(X(e,ArrayBuffer)||e&&X(e.buffer,ArrayBuffer))return d(e,t,r);if("undefined"!=typeof SharedArrayBuffer&&(X(e,SharedArrayBuffer)||e&&X(e.buffer,SharedArrayBuffer)))return d(e,t,r);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');const n=e.valueOf&&e.valueOf();if(null!=n&&n!==e)return u.from(n,t,r);const i=function(e){if(u.isBuffer(e)){const t=0|p(e.length),r=a(t);return 0===r.length||e.copy(r,0,0,t),r}return void 0!==e.length?"number"!=typeof e.length||K(e.length)?a(0):f(e):"Buffer"===e.type&&Array.isArray(e.data)?f(e.data):void 0}(e);if(i)return i;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return u.from(e[Symbol.toPrimitive]("string"),t,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function c(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function h(e){return c(e),a(e<0?0:0|p(e))}function f(e){const t=e.length<0?0:0|p(e.length),r=a(t);for(let n=0;n<t;n+=1)r[n]=255&e[n];return r}function d(e,t,r){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(r||0))throw new RangeError('"length" is outside of buffer bounds');let n;return n=void 0===t&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,t):new Uint8Array(e,t,r),Object.setPrototypeOf(n,u.prototype),n}function p(e){if(e>=s)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s.toString(16)+" bytes");return 0|e}function g(e,t){if(u.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||X(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const r=e.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===r)return 0;let i=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return V(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return G(e).length;default:if(i)return n?-1:V(e).length;t=(""+t).toLowerCase(),i=!0}}function y(e,t,r){let n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return k(this,t,r);case"utf8":case"utf-8":return R(this,t,r);case"ascii":return L(this,t,r);case"latin1":case"binary":return I(this,t,r);case"base64":return A(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return M(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function m(e,t,r){const n=e[t];e[t]=e[r],e[r]=n}function b(e,t,r,n,i){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),K(r=+r)&&(r=i?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(i)return-1;r=e.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof t&&(t=u.from(t,n)),u.isBuffer(t))return 0===t.length?-1:v(e,t,r,n,i);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):v(e,[t],r,n,i);throw new TypeError("val must be string, number or Buffer")}function v(e,t,r,n,i){let o,s=1,a=e.length,u=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;s=2,a/=2,u/=2,r/=2}function l(e,t){return 1===s?e[t]:e.readUInt16BE(t*s)}if(i){let n=-1;for(o=r;o<a;o++)if(l(e,o)===l(t,-1===n?0:o-n)){if(-1===n&&(n=o),o-n+1===u)return n*s}else-1!==n&&(o-=o-n),n=-1}else for(r+u>a&&(r=a-u),o=r;o>=0;o--){let r=!0;for(let n=0;n<u;n++)if(l(e,o+n)!==l(t,n)){r=!1;break}if(r)return o}return-1}function w(e,t,r,n){r=Number(r)||0;const i=e.length-r;n?(n=Number(n))>i&&(n=i):n=i;const o=t.length;let s;for(n>o/2&&(n=o/2),s=0;s<n;++s){const n=parseInt(t.substr(2*s,2),16);if(K(n))return s;e[r+s]=n}return s}function _(e,t,r,n){return Y(V(t,e.length-r),e,r,n)}function E(e,t,r,n){return Y(function(e){const t=[];for(let r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function T(e,t,r,n){return Y(G(t),e,r,n)}function S(e,t,r,n){return Y(function(e,t){let r,n,i;const o=[];for(let s=0;s<e.length&&!((t-=2)<0);++s)r=e.charCodeAt(s),n=r>>8,i=r%256,o.push(i),o.push(n);return o}(t,e.length-r),e,r,n)}function A(e,t,r){return 0===t&&r===e.length?n.fromByteArray(e):n.fromByteArray(e.slice(t,r))}function R(e,t,r){r=Math.min(e.length,r);const n=[];let i=t;for(;i<r;){const t=e[i];let o=null,s=t>239?4:t>223?3:t>191?2:1;if(i+s<=r){let r,n,a,u;switch(s){case 1:t<128&&(o=t);break;case 2:r=e[i+1],128==(192&r)&&(u=(31&t)<<6|63&r,u>127&&(o=u));break;case 3:r=e[i+1],n=e[i+2],128==(192&r)&&128==(192&n)&&(u=(15&t)<<12|(63&r)<<6|63&n,u>2047&&(u<55296||u>57343)&&(o=u));break;case 4:r=e[i+1],n=e[i+2],a=e[i+3],128==(192&r)&&128==(192&n)&&128==(192&a)&&(u=(15&t)<<18|(63&r)<<12|(63&n)<<6|63&a,u>65535&&u<1114112&&(o=u))}}null===o?(o=65533,s=1):o>65535&&(o-=65536,n.push(o>>>10&1023|55296),o=56320|1023&o),n.push(o),i+=s}return function(e){const t=e.length;if(t<=O)return String.fromCharCode.apply(String,e);let r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=O));return r}(n)}t.kMaxLength=s,u.TYPED_ARRAY_SUPPORT=function(){try{const e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),u.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(u.prototype,"parent",{enumerable:!0,get:function(){if(u.isBuffer(this))return this.buffer}}),Object.defineProperty(u.prototype,"offset",{enumerable:!0,get:function(){if(u.isBuffer(this))return this.byteOffset}}),u.poolSize=8192,u.from=function(e,t,r){return l(e,t,r)},Object.setPrototypeOf(u.prototype,Uint8Array.prototype),Object.setPrototypeOf(u,Uint8Array),u.alloc=function(e,t,r){return function(e,t,r){return c(e),e<=0?a(e):void 0!==t?"string"==typeof r?a(e).fill(t,r):a(e).fill(t):a(e)}(e,t,r)},u.allocUnsafe=function(e){return h(e)},u.allocUnsafeSlow=function(e){return h(e)},u.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==u.prototype},u.compare=function(e,t){if(X(e,Uint8Array)&&(e=u.from(e,e.offset,e.byteLength)),X(t,Uint8Array)&&(t=u.from(t,t.offset,t.byteLength)),!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let r=e.length,n=t.length;for(let i=0,o=Math.min(r,n);i<o;++i)if(e[i]!==t[i]){r=e[i],n=t[i];break}return r<n?-1:n<r?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);let r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;const n=u.allocUnsafe(t);let i=0;for(r=0;r<e.length;++r){let t=e[r];if(X(t,Uint8Array))i+t.length>n.length?(u.isBuffer(t)||(t=u.from(t)),t.copy(n,i)):Uint8Array.prototype.set.call(n,t,i);else{if(!u.isBuffer(t))throw new TypeError('"list" argument must be an Array of Buffers');t.copy(n,i)}i+=t.length}return n},u.byteLength=g,u.prototype._isBuffer=!0,u.prototype.swap16=function(){const e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)m(this,t,t+1);return this},u.prototype.swap32=function(){const e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)m(this,t,t+3),m(this,t+1,t+2);return this},u.prototype.swap64=function(){const e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)m(this,t,t+7),m(this,t+1,t+6),m(this,t+2,t+5),m(this,t+3,t+4);return this},u.prototype.toString=function(){const e=this.length;return 0===e?"":0===arguments.length?R(this,0,e):y.apply(this,arguments)},u.prototype.toLocaleString=u.prototype.toString,u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){let e="";const r=t.INSPECT_MAX_BYTES;return e=this.toString("hex",0,r).replace(/(.{2})/g,"$1 ").trim(),this.length>r&&(e+=" ... "),"<Buffer "+e+">"},o&&(u.prototype[o]=u.prototype.inspect),u.prototype.compare=function(e,t,r,n,i){if(X(e,Uint8Array)&&(e=u.from(e,e.offset,e.byteLength)),!u.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),t<0||r>e.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&t>=r)return 0;if(n>=i)return-1;if(t>=r)return 1;if(this===e)return 0;let o=(i>>>=0)-(n>>>=0),s=(r>>>=0)-(t>>>=0);const a=Math.min(o,s),l=this.slice(n,i),c=e.slice(t,r);for(let e=0;e<a;++e)if(l[e]!==c[e]){o=l[e],s=c[e];break}return o<s?-1:s<o?1:0},u.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},u.prototype.indexOf=function(e,t,r){return b(this,e,t,r,!0)},u.prototype.lastIndexOf=function(e,t,r){return b(this,e,t,r,!1)},u.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}const i=this.length-t;if((void 0===r||r>i)&&(r=i),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");let o=!1;for(;;)switch(n){case"hex":return w(this,e,t,r);case"utf8":case"utf-8":return _(this,e,t,r);case"ascii":case"latin1":case"binary":return E(this,e,t,r);case"base64":return T(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return S(this,e,t,r);default:if(o)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),o=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const O=4096;function L(e,t,r){let n="";r=Math.min(e.length,r);for(let i=t;i<r;++i)n+=String.fromCharCode(127&e[i]);return n}function I(e,t,r){let n="";r=Math.min(e.length,r);for(let i=t;i<r;++i)n+=String.fromCharCode(e[i]);return n}function k(e,t,r){const n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);let i="";for(let n=t;n<r;++n)i+=Q[e[n]];return i}function M(e,t,r){const n=e.slice(t,r);let i="";for(let e=0;e<n.length-1;e+=2)i+=String.fromCharCode(n[e]+256*n[e+1]);return i}function C(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function x(e,t,r,n,i,o){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<o)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function P(e,t,r,n,i){q(t,n,i,e,r,7);let o=Number(t&BigInt(4294967295));e[r++]=o,o>>=8,e[r++]=o,o>>=8,e[r++]=o,o>>=8,e[r++]=o;let s=Number(t>>BigInt(32)&BigInt(4294967295));return e[r++]=s,s>>=8,e[r++]=s,s>>=8,e[r++]=s,s>>=8,e[r++]=s,r}function N(e,t,r,n,i){q(t,n,i,e,r,7);let o=Number(t&BigInt(4294967295));e[r+7]=o,o>>=8,e[r+6]=o,o>>=8,e[r+5]=o,o>>=8,e[r+4]=o;let s=Number(t>>BigInt(32)&BigInt(4294967295));return e[r+3]=s,s>>=8,e[r+2]=s,s>>=8,e[r+1]=s,s>>=8,e[r]=s,r+8}function D(e,t,r,n,i,o){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function B(e,t,r,n,o){return t=+t,r>>>=0,o||D(e,0,r,4),i.write(e,t,r,n,23,4),r+4}function U(e,t,r,n,o){return t=+t,r>>>=0,o||D(e,0,r,8),i.write(e,t,r,n,52,8),r+8}u.prototype.slice=function(e,t){const r=this.length;(e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e);const n=this.subarray(e,t);return Object.setPrototypeOf(n,u.prototype),n},u.prototype.readUintLE=u.prototype.readUIntLE=function(e,t,r){e>>>=0,t>>>=0,r||C(e,t,this.length);let n=this[e],i=1,o=0;for(;++o<t&&(i*=256);)n+=this[e+o]*i;return n},u.prototype.readUintBE=u.prototype.readUIntBE=function(e,t,r){e>>>=0,t>>>=0,r||C(e,t,this.length);let n=this[e+--t],i=1;for(;t>0&&(i*=256);)n+=this[e+--t]*i;return n},u.prototype.readUint8=u.prototype.readUInt8=function(e,t){return e>>>=0,t||C(e,1,this.length),this[e]},u.prototype.readUint16LE=u.prototype.readUInt16LE=function(e,t){return e>>>=0,t||C(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUint16BE=u.prototype.readUInt16BE=function(e,t){return e>>>=0,t||C(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUint32LE=u.prototype.readUInt32LE=function(e,t){return e>>>=0,t||C(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUint32BE=u.prototype.readUInt32BE=function(e,t){return e>>>=0,t||C(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readBigUInt64LE=Z((function(e){H(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||z(e,this.length-8);const n=t+256*this[++e]+65536*this[++e]+this[++e]*2**24,i=this[++e]+256*this[++e]+65536*this[++e]+r*2**24;return BigInt(n)+(BigInt(i)<<BigInt(32))})),u.prototype.readBigUInt64BE=Z((function(e){H(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||z(e,this.length-8);const n=t*2**24+65536*this[++e]+256*this[++e]+this[++e],i=this[++e]*2**24+65536*this[++e]+256*this[++e]+r;return(BigInt(n)<<BigInt(32))+BigInt(i)})),u.prototype.readIntLE=function(e,t,r){e>>>=0,t>>>=0,r||C(e,t,this.length);let n=this[e],i=1,o=0;for(;++o<t&&(i*=256);)n+=this[e+o]*i;return i*=128,n>=i&&(n-=Math.pow(2,8*t)),n},u.prototype.readIntBE=function(e,t,r){e>>>=0,t>>>=0,r||C(e,t,this.length);let n=t,i=1,o=this[e+--n];for(;n>0&&(i*=256);)o+=this[e+--n]*i;return i*=128,o>=i&&(o-=Math.pow(2,8*t)),o},u.prototype.readInt8=function(e,t){return e>>>=0,t||C(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){e>>>=0,t||C(e,2,this.length);const r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(e,t){e>>>=0,t||C(e,2,this.length);const r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(e,t){return e>>>=0,t||C(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return e>>>=0,t||C(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readBigInt64LE=Z((function(e){H(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||z(e,this.length-8);const n=this[e+4]+256*this[e+5]+65536*this[e+6]+(r<<24);return(BigInt(n)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+this[++e]*2**24)})),u.prototype.readBigInt64BE=Z((function(e){H(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||z(e,this.length-8);const n=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(n)<<BigInt(32))+BigInt(this[++e]*2**24+65536*this[++e]+256*this[++e]+r)})),u.prototype.readFloatLE=function(e,t){return e>>>=0,t||C(e,4,this.length),i.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return e>>>=0,t||C(e,4,this.length),i.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return e>>>=0,t||C(e,8,this.length),i.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return e>>>=0,t||C(e,8,this.length),i.read(this,e,!1,52,8)},u.prototype.writeUintLE=u.prototype.writeUIntLE=function(e,t,r,n){e=+e,t>>>=0,r>>>=0,n||x(this,e,t,r,Math.pow(2,8*r)-1,0);let i=1,o=0;for(this[t]=255&e;++o<r&&(i*=256);)this[t+o]=e/i&255;return t+r},u.prototype.writeUintBE=u.prototype.writeUIntBE=function(e,t,r,n){e=+e,t>>>=0,r>>>=0,n||x(this,e,t,r,Math.pow(2,8*r)-1,0);let i=r-1,o=1;for(this[t+i]=255&e;--i>=0&&(o*=256);)this[t+i]=e/o&255;return t+r},u.prototype.writeUint8=u.prototype.writeUInt8=function(e,t,r){return e=+e,t>>>=0,r||x(this,e,t,1,255,0),this[t]=255&e,t+1},u.prototype.writeUint16LE=u.prototype.writeUInt16LE=function(e,t,r){return e=+e,t>>>=0,r||x(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},u.prototype.writeUint16BE=u.prototype.writeUInt16BE=function(e,t,r){return e=+e,t>>>=0,r||x(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},u.prototype.writeUint32LE=u.prototype.writeUInt32LE=function(e,t,r){return e=+e,t>>>=0,r||x(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},u.prototype.writeUint32BE=u.prototype.writeUInt32BE=function(e,t,r){return e=+e,t>>>=0,r||x(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},u.prototype.writeBigUInt64LE=Z((function(e,t=0){return P(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),u.prototype.writeBigUInt64BE=Z((function(e,t=0){return N(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),u.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t>>>=0,!n){const n=Math.pow(2,8*r-1);x(this,e,t,r,n-1,-n)}let i=0,o=1,s=0;for(this[t]=255&e;++i<r&&(o*=256);)e<0&&0===s&&0!==this[t+i-1]&&(s=1),this[t+i]=(e/o>>0)-s&255;return t+r},u.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t>>>=0,!n){const n=Math.pow(2,8*r-1);x(this,e,t,r,n-1,-n)}let i=r-1,o=1,s=0;for(this[t+i]=255&e;--i>=0&&(o*=256);)e<0&&0===s&&0!==this[t+i+1]&&(s=1),this[t+i]=(e/o>>0)-s&255;return t+r},u.prototype.writeInt8=function(e,t,r){return e=+e,t>>>=0,r||x(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,r){return e=+e,t>>>=0,r||x(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},u.prototype.writeInt16BE=function(e,t,r){return e=+e,t>>>=0,r||x(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},u.prototype.writeInt32LE=function(e,t,r){return e=+e,t>>>=0,r||x(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},u.prototype.writeInt32BE=function(e,t,r){return e=+e,t>>>=0,r||x(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},u.prototype.writeBigInt64LE=Z((function(e,t=0){return P(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),u.prototype.writeBigInt64BE=Z((function(e,t=0){return N(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),u.prototype.writeFloatLE=function(e,t,r){return B(this,e,t,!0,r)},u.prototype.writeFloatBE=function(e,t,r){return B(this,e,t,!1,r)},u.prototype.writeDoubleLE=function(e,t,r){return U(this,e,t,!0,r)},u.prototype.writeDoubleBE=function(e,t,r){return U(this,e,t,!1,r)},u.prototype.copy=function(e,t,r,n){if(!u.isBuffer(e))throw new TypeError("argument should be a Buffer");if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);const i=n-r;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,r,n):Uint8Array.prototype.set.call(e,this.subarray(r,n),t),i},u.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!u.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(1===e.length){const t=e.charCodeAt(0);("utf8"===n&&t<128||"latin1"===n)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;let i;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(i=t;i<r;++i)this[i]=e;else{const o=u.isBuffer(e)?e:u.from(e,n),s=o.length;if(0===s)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(i=0;i<r-t;++i)this[i+t]=o[i%s]}return this};const j={};function F(e,t,r){j[e]=class extends r{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function W(e){let t="",r=e.length;const n="-"===e[0]?1:0;for(;r>=n+4;r-=3)t=`_${e.slice(r-3,r)}${t}`;return`${e.slice(0,r)}${t}`}function q(e,t,r,n,i,o){if(e>r||e<t){const n="bigint"==typeof t?"n":"";let i;throw i=o>3?0===t||t===BigInt(0)?`>= 0${n} and < 2${n} ** ${8*(o+1)}${n}`:`>= -(2${n} ** ${8*(o+1)-1}${n}) and < 2 ** ${8*(o+1)-1}${n}`:`>= ${t}${n} and <= ${r}${n}`,new j.ERR_OUT_OF_RANGE("value",i,e)}!function(e,t,r){H(t,"offset"),void 0!==e[t]&&void 0!==e[t+r]||z(t,e.length-(r+1))}(n,i,o)}function H(e,t){if("number"!=typeof e)throw new j.ERR_INVALID_ARG_TYPE(t,"number",e)}function z(e,t,r){if(Math.floor(e)!==e)throw H(e,r),new j.ERR_OUT_OF_RANGE(r||"offset","an integer",e);if(t<0)throw new j.ERR_BUFFER_OUT_OF_BOUNDS;throw new j.ERR_OUT_OF_RANGE(r||"offset",`>= ${r?1:0} and <= ${t}`,e)}F("ERR_BUFFER_OUT_OF_BOUNDS",(function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),F("ERR_INVALID_ARG_TYPE",(function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`}),TypeError),F("ERR_OUT_OF_RANGE",(function(e,t,r){let n=`The value of "${e}" is out of range.`,i=r;return Number.isInteger(r)&&Math.abs(r)>2**32?i=W(String(r)):"bigint"==typeof r&&(i=String(r),(r>BigInt(2)**BigInt(32)||r<-(BigInt(2)**BigInt(32)))&&(i=W(i)),i+="n"),n+=` It must be ${t}. Received ${i}`,n}),RangeError);const $=/[^+/0-9A-Za-z-_]/g;function V(e,t){let r;t=t||1/0;const n=e.length;let i=null;const o=[];for(let s=0;s<n;++s){if(r=e.charCodeAt(s),r>55295&&r<57344){if(!i){if(r>56319){(t-=3)>-1&&o.push(239,191,189);continue}if(s+1===n){(t-=3)>-1&&o.push(239,191,189);continue}i=r;continue}if(r<56320){(t-=3)>-1&&o.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(t-=3)>-1&&o.push(239,191,189);if(i=null,r<128){if((t-=1)<0)break;o.push(r)}else if(r<2048){if((t-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function G(e){return n.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace($,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function Y(e,t,r,n){let i;for(i=0;i<n&&!(i+r>=t.length||i>=e.length);++i)t[i+r]=e[i];return i}function X(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function K(e){return e!=e}const Q=function(){const e="0123456789abcdef",t=new Array(256);for(let r=0;r<16;++r){const n=16*r;for(let i=0;i<16;++i)t[n+i]=e[r]+e[i]}return t}();function Z(e){return"undefined"==typeof BigInt?J:e}function J(){throw new Error("BigInt not supported")}},584:e=>{e.exports={100:"Continue",101:"Switching Protocols",102:"Processing",200:"OK",201:"Created",202:"Accepted",203:"Non-Authoritative Information",204:"No Content",205:"Reset Content",206:"Partial Content",207:"Multi-Status",208:"Already Reported",226:"IM Used",300:"Multiple Choices",301:"Moved Permanently",302:"Found",303:"See Other",304:"Not Modified",305:"Use Proxy",307:"Temporary Redirect",308:"Permanent Redirect",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Timeout",409:"Conflict",410:"Gone",411:"Length Required",412:"Precondition Failed",413:"Payload Too Large",414:"URI Too Long",415:"Unsupported Media Type",416:"Range Not Satisfiable",417:"Expectation Failed",418:"I'm a teapot",421:"Misdirected Request",422:"Unprocessable Entity",423:"Locked",424:"Failed Dependency",425:"Unordered Collection",426:"Upgrade Required",428:"Precondition Required",429:"Too Many Requests",431:"Request Header Fields Too Large",451:"Unavailable For Legal Reasons",500:"Internal Server Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Gateway Timeout",505:"HTTP Version Not Supported",506:"Variant Also Negotiates",507:"Insufficient Storage",508:"Loop Detected",509:"Bandwidth Limit Exceeded",510:"Not Extended",511:"Network Authentication Required"}},487:e=>{var t={utf8:{stringToBytes:function(e){return t.bin.stringToBytes(unescape(encodeURIComponent(e)))},bytesToString:function(e){return decodeURIComponent(escape(t.bin.bytesToString(e)))}},bin:{stringToBytes:function(e){for(var t=[],r=0;r<e.length;r++)t.push(255&e.charCodeAt(r));return t},bytesToString:function(e){for(var t=[],r=0;r<e.length;r++)t.push(String.fromCharCode(e[r]));return t.join("")}}};e.exports=t},1012:e=>{var t,r;t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",r={rotl:function(e,t){return e<<t|e>>>32-t},rotr:function(e,t){return e<<32-t|e>>>t},endian:function(e){if(e.constructor==Number)return 16711935&r.rotl(e,8)|4278255360&r.rotl(e,24);for(var t=0;t<e.length;t++)e[t]=r.endian(e[t]);return e},randomBytes:function(e){for(var t=[];e>0;e--)t.push(Math.floor(256*Math.random()));return t},bytesToWords:function(e){for(var t=[],r=0,n=0;r<e.length;r++,n+=8)t[n>>>5]|=e[r]<<24-n%32;return t},wordsToBytes:function(e){for(var t=[],r=0;r<32*e.length;r+=8)t.push(e[r>>>5]>>>24-r%32&255);return t},bytesToHex:function(e){for(var t=[],r=0;r<e.length;r++)t.push((e[r]>>>4).toString(16)),t.push((15&e[r]).toString(16));return t.join("")},hexToBytes:function(e){for(var t=[],r=0;r<e.length;r+=2)t.push(parseInt(e.substr(r,2),16));return t},bytesToBase64:function(e){for(var r=[],n=0;n<e.length;n+=3)for(var i=e[n]<<16|e[n+1]<<8|e[n+2],o=0;o<4;o++)8*n+6*o<=8*e.length?r.push(t.charAt(i>>>6*(3-o)&63)):r.push("=");return r.join("")},base64ToBytes:function(e){e=e.replace(/[^A-Z0-9+\/]/gi,"");for(var r=[],n=0,i=0;n<e.length;i=++n%4)0!=i&&r.push((t.indexOf(e.charAt(n-1))&Math.pow(2,-2*i+8)-1)<<2*i|t.indexOf(e.charAt(n))>>>6-2*i);return r}},e.exports=r},7187:e=>{"use strict";var t,r="object"==typeof Reflect?Reflect:null,n=r&&"function"==typeof r.apply?r.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};t=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var i=Number.isNaN||function(e){return e!=e};function o(){o.init.call(this)}e.exports=o,e.exports.once=function(e,t){return new Promise((function(r,n){function i(r){e.removeListener(t,o),n(r)}function o(){"function"==typeof e.removeListener&&e.removeListener("error",i),r([].slice.call(arguments))}g(e,t,o,{once:!0}),"error"!==t&&function(e,t,r){"function"==typeof e.on&&g(e,"error",t,{once:!0})}(e,i)}))},o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var s=10;function a(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function u(e){return void 0===e._maxListeners?o.defaultMaxListeners:e._maxListeners}function l(e,t,r,n){var i,o,s,l;if(a(r),void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),o=e._events),s=o[t]),void 0===s)s=o[t]=r,++e._eventsCount;else if("function"==typeof s?s=o[t]=n?[r,s]:[s,r]:n?s.unshift(r):s.push(r),(i=u(e))>0&&s.length>i&&!s.warned){s.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=e,c.type=t,c.count=s.length,l=c,console&&console.warn&&console.warn(l)}return e}function c(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function h(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},i=c.bind(n);return i.listener=r,n.wrapFn=i,i}function f(e,t,r){var n=e._events;if(void 0===n)return[];var i=n[t];return void 0===i?[]:"function"==typeof i?r?[i.listener||i]:[i]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(i):p(i,i.length)}function d(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function p(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}function g(e,t,r,n){if("function"==typeof e.on)n.once?e.once(t,r):e.on(t,r);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function i(o){n.once&&e.removeEventListener(t,i),r(o)}))}}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return s},set:function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");s=e}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},o.prototype.getMaxListeners=function(){return u(this)},o.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var i="error"===e,o=this._events;if(void 0!==o)i=i&&void 0===o.error;else if(!i)return!1;if(i){var s;if(t.length>0&&(s=t[0]),s instanceof Error)throw s;var a=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw a.context=s,a}var u=o[e];if(void 0===u)return!1;if("function"==typeof u)n(u,this,t);else{var l=u.length,c=p(u,l);for(r=0;r<l;++r)n(c[r],this,t)}return!0},o.prototype.addListener=function(e,t){return l(this,e,t,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(e,t){return l(this,e,t,!0)},o.prototype.once=function(e,t){return a(t),this.on(e,h(this,e,t)),this},o.prototype.prependOnceListener=function(e,t){return a(t),this.prependListener(e,h(this,e,t)),this},o.prototype.removeListener=function(e,t){var r,n,i,o,s;if(a(t),void 0===(n=this._events))return this;if(void 0===(r=n[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(i=-1,o=r.length-1;o>=0;o--)if(r[o]===t||r[o].listener===t){s=r[o].listener,i=o;break}if(i<0)return this;0===i?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,i),1===r.length&&(n[e]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",e,s||t)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(e){var t,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var i,o=Object.keys(r);for(n=0;n<o.length;++n)"removeListener"!==(i=o[n])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},o.prototype.listeners=function(e){return f(this,e,!0)},o.prototype.rawListeners=function(e){return f(this,e,!1)},o.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):d.call(e,t)},o.prototype.listenerCount=d,o.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},9267:(e,t,r)=>{var n=r(8501),i=r(8575),o=e.exports;for(var s in n)n.hasOwnProperty(s)&&(o[s]=n[s]);function a(e){if("string"==typeof e&&(e=i.parse(e)),e.protocol||(e.protocol="https:"),"https:"!==e.protocol)throw new Error('Protocol "'+e.protocol+'" not supported. Expected "https:"');return e}o.request=function(e,t){return e=a(e),n.request.call(this,e,t)},o.get=function(e,t){return e=a(e),n.get.call(this,e,t)}},645:(e,t)=>{t.read=function(e,t,r,n,i){var o,s,a=8*i-n-1,u=(1<<a)-1,l=u>>1,c=-7,h=r?i-1:0,f=r?-1:1,d=e[t+h];for(h+=f,o=d&(1<<-c)-1,d>>=-c,c+=a;c>0;o=256*o+e[t+h],h+=f,c-=8);for(s=o&(1<<-c)-1,o>>=-c,c+=n;c>0;s=256*s+e[t+h],h+=f,c-=8);if(0===o)o=1-l;else{if(o===u)return s?NaN:1/0*(d?-1:1);s+=Math.pow(2,n),o-=l}return(d?-1:1)*s*Math.pow(2,o-n)},t.write=function(e,t,r,n,i,o){var s,a,u,l=8*o-i-1,c=(1<<l)-1,h=c>>1,f=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,d=n?0:o-1,p=n?1:-1,g=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,s=c):(s=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-s))<1&&(s--,u*=2),(t+=s+h>=1?f/u:f*Math.pow(2,1-h))*u>=2&&(s++,u/=2),s+h>=c?(a=0,s=c):s+h>=1?(a=(t*u-1)*Math.pow(2,i),s+=h):(a=t*Math.pow(2,h-1)*Math.pow(2,i),s=0));i>=8;e[r+d]=255&a,d+=p,a/=256,i-=8);for(s=s<<i|a,l+=i;l>0;e[r+d]=255&s,d+=p,s/=256,l-=8);e[r+d-p]|=128*g}},5717:e=>{"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}}},8738:e=>{function t(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}e.exports=function(e){return null!=e&&(t(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&t(e.slice(0,0))}(e)||!!e._isBuffer)}},2568:(e,t,r)=>{var n,i,o,s,a;n=r(1012),i=r(487).utf8,o=r(8738),s=r(487).bin,(a=function(e,t){e.constructor==String?e=t&&"binary"===t.encoding?s.stringToBytes(e):i.stringToBytes(e):o(e)?e=Array.prototype.slice.call(e,0):Array.isArray(e)||e.constructor===Uint8Array||(e=e.toString());for(var r=n.bytesToWords(e),u=8*e.length,l=1732584193,c=-271733879,h=-1732584194,f=271733878,d=0;d<r.length;d++)r[d]=16711935&(r[d]<<8|r[d]>>>24)|4278255360&(r[d]<<24|r[d]>>>8);r[u>>>5]|=128<<u%32,r[14+(u+64>>>9<<4)]=u;var p=a._ff,g=a._gg,y=a._hh,m=a._ii;for(d=0;d<r.length;d+=16){var b=l,v=c,w=h,_=f;l=p(l,c,h,f,r[d+0],7,-680876936),f=p(f,l,c,h,r[d+1],12,-389564586),h=p(h,f,l,c,r[d+2],17,606105819),c=p(c,h,f,l,r[d+3],22,-1044525330),l=p(l,c,h,f,r[d+4],7,-176418897),f=p(f,l,c,h,r[d+5],12,1200080426),h=p(h,f,l,c,r[d+6],17,-1473231341),c=p(c,h,f,l,r[d+7],22,-45705983),l=p(l,c,h,f,r[d+8],7,1770035416),f=p(f,l,c,h,r[d+9],12,-1958414417),h=p(h,f,l,c,r[d+10],17,-42063),c=p(c,h,f,l,r[d+11],22,-1990404162),l=p(l,c,h,f,r[d+12],7,1804603682),f=p(f,l,c,h,r[d+13],12,-40341101),h=p(h,f,l,c,r[d+14],17,-1502002290),l=g(l,c=p(c,h,f,l,r[d+15],22,1236535329),h,f,r[d+1],5,-165796510),f=g(f,l,c,h,r[d+6],9,-1069501632),h=g(h,f,l,c,r[d+11],14,643717713),c=g(c,h,f,l,r[d+0],20,-373897302),l=g(l,c,h,f,r[d+5],5,-701558691),f=g(f,l,c,h,r[d+10],9,38016083),h=g(h,f,l,c,r[d+15],14,-660478335),c=g(c,h,f,l,r[d+4],20,-405537848),l=g(l,c,h,f,r[d+9],5,568446438),f=g(f,l,c,h,r[d+14],9,-1019803690),h=g(h,f,l,c,r[d+3],14,-187363961),c=g(c,h,f,l,r[d+8],20,1163531501),l=g(l,c,h,f,r[d+13],5,-1444681467),f=g(f,l,c,h,r[d+2],9,-51403784),h=g(h,f,l,c,r[d+7],14,1735328473),l=y(l,c=g(c,h,f,l,r[d+12],20,-1926607734),h,f,r[d+5],4,-378558),f=y(f,l,c,h,r[d+8],11,-2022574463),h=y(h,f,l,c,r[d+11],16,1839030562),c=y(c,h,f,l,r[d+14],23,-35309556),l=y(l,c,h,f,r[d+1],4,-1530992060),f=y(f,l,c,h,r[d+4],11,1272893353),h=y(h,f,l,c,r[d+7],16,-155497632),c=y(c,h,f,l,r[d+10],23,-1094730640),l=y(l,c,h,f,r[d+13],4,681279174),f=y(f,l,c,h,r[d+0],11,-358537222),h=y(h,f,l,c,r[d+3],16,-722521979),c=y(c,h,f,l,r[d+6],23,76029189),l=y(l,c,h,f,r[d+9],4,-640364487),f=y(f,l,c,h,r[d+12],11,-421815835),h=y(h,f,l,c,r[d+15],16,530742520),l=m(l,c=y(c,h,f,l,r[d+2],23,-995338651),h,f,r[d+0],6,-198630844),f=m(f,l,c,h,r[d+7],10,1126891415),h=m(h,f,l,c,r[d+14],15,-1416354905),c=m(c,h,f,l,r[d+5],21,-57434055),l=m(l,c,h,f,r[d+12],6,1700485571),f=m(f,l,c,h,r[d+3],10,-1894986606),h=m(h,f,l,c,r[d+10],15,-1051523),c=m(c,h,f,l,r[d+1],21,-2054922799),l=m(l,c,h,f,r[d+8],6,1873313359),f=m(f,l,c,h,r[d+15],10,-30611744),h=m(h,f,l,c,r[d+6],15,-1560198380),c=m(c,h,f,l,r[d+13],21,1309151649),l=m(l,c,h,f,r[d+4],6,-145523070),f=m(f,l,c,h,r[d+11],10,-1120210379),h=m(h,f,l,c,r[d+2],15,718787259),c=m(c,h,f,l,r[d+9],21,-343485551),l=l+b>>>0,c=c+v>>>0,h=h+w>>>0,f=f+_>>>0}return n.endian([l,c,h,f])})._ff=function(e,t,r,n,i,o,s){var a=e+(t&r|~t&n)+(i>>>0)+s;return(a<<o|a>>>32-o)+t},a._gg=function(e,t,r,n,i,o,s){var a=e+(t&n|r&~n)+(i>>>0)+s;return(a<<o|a>>>32-o)+t},a._hh=function(e,t,r,n,i,o,s){var a=e+(t^r^n)+(i>>>0)+s;return(a<<o|a>>>32-o)+t},a._ii=function(e,t,r,n,i,o,s){var a=e+(r^(t|~n))+(i>>>0)+s;return(a<<o|a>>>32-o)+t},a._blocksize=16,a._digestsize=16,e.exports=function(e,t){if(null==e)throw new Error("Illegal argument "+e);var r=n.wordsToBytes(a(e,t));return t&&t.asBytes?r:t&&t.asString?s.bytesToString(r):n.bytesToHex(r)}},4155:e=>{var t,r,n=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function s(e){if(t===setTimeout)return setTimeout(e,0);if((t===i||!t)&&setTimeout)return t=setTimeout,setTimeout(e,0);try{return t(e,0)}catch(r){try{return t.call(null,e,0)}catch(r){return t.call(this,e,0)}}}!function(){try{t="function"==typeof setTimeout?setTimeout:i}catch(e){t=i}try{r="function"==typeof clearTimeout?clearTimeout:o}catch(e){r=o}}();var a,u=[],l=!1,c=-1;function h(){l&&a&&(l=!1,a.length?u=a.concat(u):c=-1,u.length&&f())}function f(){if(!l){var e=s(h);l=!0;for(var t=u.length;t;){for(a=u,u=[];++c<t;)a&&a[c].run();c=-1,t=u.length}a=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===o||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function d(e,t){this.fun=e,this.array=t}function p(){}n.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];u.push(new d(e,t)),1!==u.length||l||s(f)},d.prototype.run=function(){this.fun.apply(null,this.array)},n.title="browser",n.browser=!0,n.env={},n.argv=[],n.version="",n.versions={},n.on=p,n.addListener=p,n.once=p,n.off=p,n.removeListener=p,n.removeAllListeners=p,n.emit=p,n.prependListener=p,n.prependOnceListener=p,n.listeners=function(e){return[]},n.binding=function(e){throw new Error("process.binding is not supported")},n.cwd=function(){return"/"},n.chdir=function(e){throw new Error("process.chdir is not supported")},n.umask=function(){return 0}},2587:e=>{"use strict";function t(e,t){return Object.prototype.hasOwnProperty.call(e,t)}e.exports=function(e,r,n,i){r=r||"&",n=n||"=";var o={};if("string"!=typeof e||0===e.length)return o;var s=/\+/g;e=e.split(r);var a=1e3;i&&"number"==typeof i.maxKeys&&(a=i.maxKeys);var u=e.length;a>0&&u>a&&(u=a);for(var l=0;l<u;++l){var c,h,f,d,p=e[l].replace(s,"%20"),g=p.indexOf(n);g>=0?(c=p.substr(0,g),h=p.substr(g+1)):(c=p,h=""),f=decodeURIComponent(c),d=decodeURIComponent(h),t(o,f)?Array.isArray(o[f])?o[f].push(d):o[f]=[o[f],d]:o[f]=d}return o}},2182:e=>{"use strict";var t=function(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}};e.exports=function(e,r,n,i){return r=r||"&",n=n||"=",null===e&&(e=void 0),"object"==typeof e?Object.keys(e).map((function(i){var o=encodeURIComponent(t(i))+n;return Array.isArray(e[i])?e[i].map((function(e){return o+encodeURIComponent(t(e))})).join(r):o+encodeURIComponent(t(e[i]))})).join(r):i?encodeURIComponent(t(i))+n+encodeURIComponent(t(e)):""}},7673:(e,t,r)=>{"use strict";t.decode=t.parse=r(2587),t.encode=t.stringify=r(2182)},4281:e=>{"use strict";var t={};function r(e,r,n){n||(n=Error);var i=function(e){var t,n;function i(t,n,i){return e.call(this,function(e,t,n){return"string"==typeof r?r:r(e,t,n)}(t,n,i))||this}return n=e,(t=i).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,i}(n);i.prototype.name=n.name,i.prototype.code=e,t[e]=i}function n(e,t){if(Array.isArray(e)){var r=e.length;return e=e.map((function(e){return String(e)})),r>2?"one of ".concat(t," ").concat(e.slice(0,r-1).join(", "),", or ")+e[r-1]:2===r?"one of ".concat(t," ").concat(e[0]," or ").concat(e[1]):"of ".concat(t," ").concat(e[0])}return"of ".concat(t," ").concat(String(e))}r("ERR_INVALID_OPT_VALUE",(function(e,t){return'The value "'+t+'" is invalid for option "'+e+'"'}),TypeError),r("ERR_INVALID_ARG_TYPE",(function(e,t,r){var i,o,s,a,u;if("string"==typeof t&&(o="not ",t.substr(0,o.length)===o)?(i="must not be",t=t.replace(/^not /,"")):i="must be",function(e,t,r){return(void 0===r||r>e.length)&&(r=e.length),e.substring(r-t.length,r)===t}(e," argument"))s="The ".concat(e," ").concat(i," ").concat(n(t,"type"));else{var l=("number"!=typeof u&&(u=0),u+".".length>(a=e).length||-1===a.indexOf(".",u)?"argument":"property");s='The "'.concat(e,'" ').concat(l," ").concat(i," ").concat(n(t,"type"))}return s+". Received type ".concat(typeof r)}),TypeError),r("ERR_STREAM_PUSH_AFTER_EOF","stream.push() after EOF"),r("ERR_METHOD_NOT_IMPLEMENTED",(function(e){return"The "+e+" method is not implemented"})),r("ERR_STREAM_PREMATURE_CLOSE","Premature close"),r("ERR_STREAM_DESTROYED",(function(e){return"Cannot call "+e+" after a stream was destroyed"})),r("ERR_MULTIPLE_CALLBACK","Callback called multiple times"),r("ERR_STREAM_CANNOT_PIPE","Cannot pipe, not readable"),r("ERR_STREAM_WRITE_AFTER_END","write after end"),r("ERR_STREAM_NULL_VALUES","May not write null values to stream",TypeError),r("ERR_UNKNOWN_ENCODING",(function(e){return"Unknown encoding: "+e}),TypeError),r("ERR_STREAM_UNSHIFT_AFTER_END_EVENT","stream.unshift() after end event"),e.exports.q=t},6753:(e,t,r)=>{"use strict";var n=r(4155),i=Object.keys||function(e){var t=[];for(var r in e)t.push(r);return t};e.exports=c;var o=r(9481),s=r(4229);r(5717)(c,o);for(var a=i(s.prototype),u=0;u<a.length;u++){var l=a[u];c.prototype[l]||(c.prototype[l]=s.prototype[l])}function c(e){if(!(this instanceof c))return new c(e);o.call(this,e),s.call(this,e),this.allowHalfOpen=!0,e&&(!1===e.readable&&(this.readable=!1),!1===e.writable&&(this.writable=!1),!1===e.allowHalfOpen&&(this.allowHalfOpen=!1,this.once("end",h)))}function h(){this._writableState.ended||n.nextTick(f,this)}function f(e){e.end()}Object.defineProperty(c.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(c.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(c.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(c.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&this._readableState.destroyed&&this._writableState.destroyed},set:function(e){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}})},2725:(e,t,r)=>{"use strict";e.exports=i;var n=r(4605);function i(e){if(!(this instanceof i))return new i(e);n.call(this,e)}r(5717)(i,n),i.prototype._transform=function(e,t,r){r(null,e)}},9481:(e,t,r)=>{"use strict";var n,i=r(4155);e.exports=A,A.ReadableState=S,r(7187).EventEmitter;var o,s=function(e,t){return e.listeners(t).length},a=r(2503),u=r(8764).Buffer,l=r.g.Uint8Array||function(){},c=r(4616);o=c&&c.debuglog?c.debuglog("stream"):function(){};var h,f,d,p=r(7327),g=r(1195),y=r(2457).getHighWaterMark,m=r(4281).q,b=m.ERR_INVALID_ARG_TYPE,v=m.ERR_STREAM_PUSH_AFTER_EOF,w=m.ERR_METHOD_NOT_IMPLEMENTED,_=m.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;r(5717)(A,a);var E=g.errorOrDestroy,T=["error","close","destroy","pause","resume"];function S(e,t,i){n=n||r(6753),e=e||{},"boolean"!=typeof i&&(i=t instanceof n),this.objectMode=!!e.objectMode,i&&(this.objectMode=this.objectMode||!!e.readableObjectMode),this.highWaterMark=y(this,e,"readableHighWaterMark",i),this.buffer=new p,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.paused=!0,this.emitClose=!1!==e.emitClose,this.autoDestroy=!!e.autoDestroy,this.destroyed=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(h||(h=r(2553).s),this.decoder=new h(e.encoding),this.encoding=e.encoding)}function A(e){if(n=n||r(6753),!(this instanceof A))return new A(e);var t=this instanceof n;this._readableState=new S(e,this,t),this.readable=!0,e&&("function"==typeof e.read&&(this._read=e.read),"function"==typeof e.destroy&&(this._destroy=e.destroy)),a.call(this)}function R(e,t,r,n,i){o("readableAddChunk",t);var s,a=e._readableState;if(null===t)a.reading=!1,function(e,t){if(o("onEofChunk"),!t.ended){if(t.decoder){var r=t.decoder.end();r&&r.length&&(t.buffer.push(r),t.length+=t.objectMode?1:r.length)}t.ended=!0,t.sync?k(e):(t.needReadable=!1,t.emittedReadable||(t.emittedReadable=!0,M(e)))}}(e,a);else if(i||(s=function(e,t){var r,n;return n=t,u.isBuffer(n)||n instanceof l||"string"==typeof t||void 0===t||e.objectMode||(r=new b("chunk",["string","Buffer","Uint8Array"],t)),r}(a,t)),s)E(e,s);else if(a.objectMode||t&&t.length>0)if("string"==typeof t||a.objectMode||Object.getPrototypeOf(t)===u.prototype||(t=function(e){return u.from(e)}(t)),n)a.endEmitted?E(e,new _):O(e,a,t,!0);else if(a.ended)E(e,new v);else{if(a.destroyed)return!1;a.reading=!1,a.decoder&&!r?(t=a.decoder.write(t),a.objectMode||0!==t.length?O(e,a,t,!1):C(e,a)):O(e,a,t,!1)}else n||(a.reading=!1,C(e,a));return!a.ended&&(a.length<a.highWaterMark||0===a.length)}function O(e,t,r,n){t.flowing&&0===t.length&&!t.sync?(t.awaitDrain=0,e.emit("data",r)):(t.length+=t.objectMode?1:r.length,n?t.buffer.unshift(r):t.buffer.push(r),t.needReadable&&k(e)),C(e,t)}Object.defineProperty(A.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(e){this._readableState&&(this._readableState.destroyed=e)}}),A.prototype.destroy=g.destroy,A.prototype._undestroy=g.undestroy,A.prototype._destroy=function(e,t){t(e)},A.prototype.push=function(e,t){var r,n=this._readableState;return n.objectMode?r=!0:"string"==typeof e&&((t=t||n.defaultEncoding)!==n.encoding&&(e=u.from(e,t),t=""),r=!0),R(this,e,t,!1,r)},A.prototype.unshift=function(e){return R(this,e,null,!0,!1)},A.prototype.isPaused=function(){return!1===this._readableState.flowing},A.prototype.setEncoding=function(e){h||(h=r(2553).s);var t=new h(e);this._readableState.decoder=t,this._readableState.encoding=this._readableState.decoder.encoding;for(var n=this._readableState.buffer.head,i="";null!==n;)i+=t.write(n.data),n=n.next;return this._readableState.buffer.clear(),""!==i&&this._readableState.buffer.push(i),this._readableState.length=i.length,this};var L=1073741824;function I(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:e!=e?t.flowing&&t.length?t.buffer.head.data.length:t.length:(e>t.highWaterMark&&(t.highWaterMark=function(e){return e>=L?e=L:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=t.length?e:t.ended?t.length:(t.needReadable=!0,0))}function k(e){var t=e._readableState;o("emitReadable",t.needReadable,t.emittedReadable),t.needReadable=!1,t.emittedReadable||(o("emitReadable",t.flowing),t.emittedReadable=!0,i.nextTick(M,e))}function M(e){var t=e._readableState;o("emitReadable_",t.destroyed,t.length,t.ended),t.destroyed||!t.length&&!t.ended||(e.emit("readable"),t.emittedReadable=!1),t.needReadable=!t.flowing&&!t.ended&&t.length<=t.highWaterMark,B(e)}function C(e,t){t.readingMore||(t.readingMore=!0,i.nextTick(x,e,t))}function x(e,t){for(;!t.reading&&!t.ended&&(t.length<t.highWaterMark||t.flowing&&0===t.length);){var r=t.length;if(o("maybeReadMore read 0"),e.read(0),r===t.length)break}t.readingMore=!1}function P(e){var t=e._readableState;t.readableListening=e.listenerCount("readable")>0,t.resumeScheduled&&!t.paused?t.flowing=!0:e.listenerCount("data")>0&&e.resume()}function N(e){o("readable nexttick read 0"),e.read(0)}function D(e,t){o("resume",t.reading),t.reading||e.read(0),t.resumeScheduled=!1,e.emit("resume"),B(e),t.flowing&&!t.reading&&e.read(0)}function B(e){var t=e._readableState;for(o("flow",t.flowing);t.flowing&&null!==e.read(););}function U(e,t){return 0===t.length?null:(t.objectMode?r=t.buffer.shift():!e||e>=t.length?(r=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.first():t.buffer.concat(t.length),t.buffer.clear()):r=t.buffer.consume(e,t.decoder),r);var r}function j(e){var t=e._readableState;o("endReadable",t.endEmitted),t.endEmitted||(t.ended=!0,i.nextTick(F,t,e))}function F(e,t){if(o("endReadableNT",e.endEmitted,e.length),!e.endEmitted&&0===e.length&&(e.endEmitted=!0,t.readable=!1,t.emit("end"),e.autoDestroy)){var r=t._writableState;(!r||r.autoDestroy&&r.finished)&&t.destroy()}}function W(e,t){for(var r=0,n=e.length;r<n;r++)if(e[r]===t)return r;return-1}A.prototype.read=function(e){o("read",e),e=parseInt(e,10);var t=this._readableState,r=e;if(0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&((0!==t.highWaterMark?t.length>=t.highWaterMark:t.length>0)||t.ended))return o("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?j(this):k(this),null;if(0===(e=I(e,t))&&t.ended)return 0===t.length&&j(this),null;var n,i=t.needReadable;return o("need readable",i),(0===t.length||t.length-e<t.highWaterMark)&&o("length less than watermark",i=!0),t.ended||t.reading?o("reading or ended",i=!1):i&&(o("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1,t.reading||(e=I(r,t))),null===(n=e>0?U(e,t):null)?(t.needReadable=t.length<=t.highWaterMark,e=0):(t.length-=e,t.awaitDrain=0),0===t.length&&(t.ended||(t.needReadable=!0),r!==e&&t.ended&&j(this)),null!==n&&this.emit("data",n),n},A.prototype._read=function(e){E(this,new w("_read()"))},A.prototype.pipe=function(e,t){var r=this,n=this._readableState;switch(n.pipesCount){case 0:n.pipes=e;break;case 1:n.pipes=[n.pipes,e];break;default:n.pipes.push(e)}n.pipesCount+=1,o("pipe count=%d opts=%j",n.pipesCount,t);var a=t&&!1===t.end||e===i.stdout||e===i.stderr?g:u;function u(){o("onend"),e.end()}n.endEmitted?i.nextTick(a):r.once("end",a),e.on("unpipe",(function t(i,s){o("onunpipe"),i===r&&s&&!1===s.hasUnpiped&&(s.hasUnpiped=!0,o("cleanup"),e.removeListener("close",d),e.removeListener("finish",p),e.removeListener("drain",l),e.removeListener("error",f),e.removeListener("unpipe",t),r.removeListener("end",u),r.removeListener("end",g),r.removeListener("data",h),c=!0,!n.awaitDrain||e._writableState&&!e._writableState.needDrain||l())}));var l=function(e){return function(){var t=e._readableState;o("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&s(e,"data")&&(t.flowing=!0,B(e))}}(r);e.on("drain",l);var c=!1;function h(t){o("ondata");var i=e.write(t);o("dest.write",i),!1===i&&((1===n.pipesCount&&n.pipes===e||n.pipesCount>1&&-1!==W(n.pipes,e))&&!c&&(o("false write response, pause",n.awaitDrain),n.awaitDrain++),r.pause())}function f(t){o("onerror",t),g(),e.removeListener("error",f),0===s(e,"error")&&E(e,t)}function d(){e.removeListener("finish",p),g()}function p(){o("onfinish"),e.removeListener("close",d),g()}function g(){o("unpipe"),r.unpipe(e)}return r.on("data",h),function(e,t,r){if("function"==typeof e.prependListener)return e.prependListener(t,r);e._events&&e._events.error?Array.isArray(e._events.error)?e._events.error.unshift(r):e._events.error=[r,e._events.error]:e.on(t,r)}(e,"error",f),e.once("close",d),e.once("finish",p),e.emit("pipe",r),n.flowing||(o("pipe resume"),r.resume()),e},A.prototype.unpipe=function(e){var t=this._readableState,r={hasUnpiped:!1};if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes||(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this,r)),this;if(!e){var n=t.pipes,i=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var o=0;o<i;o++)n[o].emit("unpipe",this,{hasUnpiped:!1});return this}var s=W(t.pipes,e);return-1===s||(t.pipes.splice(s,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this,r)),this},A.prototype.on=function(e,t){var r=a.prototype.on.call(this,e,t),n=this._readableState;return"data"===e?(n.readableListening=this.listenerCount("readable")>0,!1!==n.flowing&&this.resume()):"readable"===e&&(n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.flowing=!1,n.emittedReadable=!1,o("on readable",n.length,n.reading),n.length?k(this):n.reading||i.nextTick(N,this))),r},A.prototype.addListener=A.prototype.on,A.prototype.removeListener=function(e,t){var r=a.prototype.removeListener.call(this,e,t);return"readable"===e&&i.nextTick(P,this),r},A.prototype.removeAllListeners=function(e){var t=a.prototype.removeAllListeners.apply(this,arguments);return"readable"!==e&&void 0!==e||i.nextTick(P,this),t},A.prototype.resume=function(){var e=this._readableState;return e.flowing||(o("resume"),e.flowing=!e.readableListening,function(e,t){t.resumeScheduled||(t.resumeScheduled=!0,i.nextTick(D,e,t))}(this,e)),e.paused=!1,this},A.prototype.pause=function(){return o("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(o("pause"),this._readableState.flowing=!1,this.emit("pause")),this._readableState.paused=!0,this},A.prototype.wrap=function(e){var t=this,r=this._readableState,n=!1;for(var i in e.on("end",(function(){if(o("wrapped end"),r.decoder&&!r.ended){var e=r.decoder.end();e&&e.length&&t.push(e)}t.push(null)})),e.on("data",(function(i){o("wrapped data"),r.decoder&&(i=r.decoder.write(i)),r.objectMode&&null==i||(r.objectMode||i&&i.length)&&(t.push(i)||(n=!0,e.pause()))})),e)void 0===this[i]&&"function"==typeof e[i]&&(this[i]=function(t){return function(){return e[t].apply(e,arguments)}}(i));for(var s=0;s<T.length;s++)e.on(T[s],this.emit.bind(this,T[s]));return this._read=function(t){o("wrapped _read",t),n&&(n=!1,e.resume())},this},"function"==typeof Symbol&&(A.prototype[Symbol.asyncIterator]=function(){return void 0===f&&(f=r(5850)),f(this)}),Object.defineProperty(A.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),Object.defineProperty(A.prototype,"readableBuffer",{enumerable:!1,get:function(){return this._readableState&&this._readableState.buffer}}),Object.defineProperty(A.prototype,"readableFlowing",{enumerable:!1,get:function(){return this._readableState.flowing},set:function(e){this._readableState&&(this._readableState.flowing=e)}}),A._fromList=U,Object.defineProperty(A.prototype,"readableLength",{enumerable:!1,get:function(){return this._readableState.length}}),"function"==typeof Symbol&&(A.from=function(e,t){return void 0===d&&(d=r(5167)),d(A,e,t)})},4605:(e,t,r)=>{"use strict";e.exports=c;var n=r(4281).q,i=n.ERR_METHOD_NOT_IMPLEMENTED,o=n.ERR_MULTIPLE_CALLBACK,s=n.ERR_TRANSFORM_ALREADY_TRANSFORMING,a=n.ERR_TRANSFORM_WITH_LENGTH_0,u=r(6753);function l(e,t){var r=this._transformState;r.transforming=!1;var n=r.writecb;if(null===n)return this.emit("error",new o);r.writechunk=null,r.writecb=null,null!=t&&this.push(t),n(e);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}function c(e){if(!(this instanceof c))return new c(e);u.call(this,e),this._transformState={afterTransform:l.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.on("prefinish",h)}function h(){var e=this;"function"!=typeof this._flush||this._readableState.destroyed?f(this,null,null):this._flush((function(t,r){f(e,t,r)}))}function f(e,t,r){if(t)return e.emit("error",t);if(null!=r&&e.push(r),e._writableState.length)throw new a;if(e._transformState.transforming)throw new s;return e.push(null)}r(5717)(c,u),c.prototype.push=function(e,t){return this._transformState.needTransform=!1,u.prototype.push.call(this,e,t)},c.prototype._transform=function(e,t,r){r(new i("_transform()"))},c.prototype._write=function(e,t,r){var n=this._transformState;if(n.writecb=r,n.writechunk=e,n.writeencoding=t,!n.transforming){var i=this._readableState;(n.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},c.prototype._read=function(e){var t=this._transformState;null===t.writechunk||t.transforming?t.needTransform=!0:(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform))},c.prototype._destroy=function(e,t){u.prototype._destroy.call(this,e,(function(e){t(e)}))}},4229:(e,t,r)=>{"use strict";var n,i=r(4155);function o(e){var t=this;this.next=null,this.entry=null,this.finish=function(){!function(e,t,r){var n=e.entry;for(e.entry=null;n;){var i=n.callback;t.pendingcb--,i(undefined),n=n.next}t.corkedRequestsFree.next=e}(t,e)}}e.exports=A,A.WritableState=S;var s,a={deprecate:r(4927)},u=r(2503),l=r(8764).Buffer,c=r.g.Uint8Array||function(){},h=r(1195),f=r(2457).getHighWaterMark,d=r(4281).q,p=d.ERR_INVALID_ARG_TYPE,g=d.ERR_METHOD_NOT_IMPLEMENTED,y=d.ERR_MULTIPLE_CALLBACK,m=d.ERR_STREAM_CANNOT_PIPE,b=d.ERR_STREAM_DESTROYED,v=d.ERR_STREAM_NULL_VALUES,w=d.ERR_STREAM_WRITE_AFTER_END,_=d.ERR_UNKNOWN_ENCODING,E=h.errorOrDestroy;function T(){}function S(e,t,s){n=n||r(6753),e=e||{},"boolean"!=typeof s&&(s=t instanceof n),this.objectMode=!!e.objectMode,s&&(this.objectMode=this.objectMode||!!e.writableObjectMode),this.highWaterMark=f(this,e,"writableHighWaterMark",s),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var a=!1===e.decodeStrings;this.decodeStrings=!a,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,t){var r=e._writableState,n=r.sync,o=r.writecb;if("function"!=typeof o)throw new y;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(r),t)!function(e,t,r,n,o){--t.pendingcb,r?(i.nextTick(o,n),i.nextTick(M,e,t),e._writableState.errorEmitted=!0,E(e,n)):(o(n),e._writableState.errorEmitted=!0,E(e,n),M(e,t))}(e,r,n,t,o);else{var s=I(r)||e.destroyed;s||r.corked||r.bufferProcessing||!r.bufferedRequest||L(e,r),n?i.nextTick(O,e,r,s,o):O(e,r,s,o)}}(t,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.emitClose=!1!==e.emitClose,this.autoDestroy=!!e.autoDestroy,this.bufferedRequestCount=0,this.corkedRequestsFree=new o(this)}function A(e){var t=this instanceof(n=n||r(6753));if(!t&&!s.call(A,this))return new A(e);this._writableState=new S(e,this,t),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final)),u.call(this)}function R(e,t,r,n,i,o,s){t.writelen=n,t.writecb=s,t.writing=!0,t.sync=!0,t.destroyed?t.onwrite(new b("write")):r?e._writev(i,t.onwrite):e._write(i,o,t.onwrite),t.sync=!1}function O(e,t,r,n){r||function(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}(e,t),t.pendingcb--,n(),M(e,t)}function L(e,t){t.bufferProcessing=!0;var r=t.bufferedRequest;if(e._writev&&r&&r.next){var n=t.bufferedRequestCount,i=new Array(n),s=t.corkedRequestsFree;s.entry=r;for(var a=0,u=!0;r;)i[a]=r,r.isBuf||(u=!1),r=r.next,a+=1;i.allBuffers=u,R(e,t,!0,t.length,i,"",s.finish),t.pendingcb++,t.lastBufferedRequest=null,s.next?(t.corkedRequestsFree=s.next,s.next=null):t.corkedRequestsFree=new o(t),t.bufferedRequestCount=0}else{for(;r;){var l=r.chunk,c=r.encoding,h=r.callback;if(R(e,t,!1,t.objectMode?1:l.length,l,c,h),r=r.next,t.bufferedRequestCount--,t.writing)break}null===r&&(t.lastBufferedRequest=null)}t.bufferedRequest=r,t.bufferProcessing=!1}function I(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function k(e,t){e._final((function(r){t.pendingcb--,r&&E(e,r),t.prefinished=!0,e.emit("prefinish"),M(e,t)}))}function M(e,t){var r=I(t);if(r&&(function(e,t){t.prefinished||t.finalCalled||("function"!=typeof e._final||t.destroyed?(t.prefinished=!0,e.emit("prefinish")):(t.pendingcb++,t.finalCalled=!0,i.nextTick(k,e,t)))}(e,t),0===t.pendingcb&&(t.finished=!0,e.emit("finish"),t.autoDestroy))){var n=e._readableState;(!n||n.autoDestroy&&n.endEmitted)&&e.destroy()}return r}r(5717)(A,u),S.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(S.prototype,"buffer",{get:a.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(e){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(s=Function.prototype[Symbol.hasInstance],Object.defineProperty(A,Symbol.hasInstance,{value:function(e){return!!s.call(this,e)||this===A&&e&&e._writableState instanceof S}})):s=function(e){return e instanceof this},A.prototype.pipe=function(){E(this,new m)},A.prototype.write=function(e,t,r){var n,o=this._writableState,s=!1,a=!o.objectMode&&(n=e,l.isBuffer(n)||n instanceof c);return a&&!l.isBuffer(e)&&(e=function(e){return l.from(e)}(e)),"function"==typeof t&&(r=t,t=null),a?t="buffer":t||(t=o.defaultEncoding),"function"!=typeof r&&(r=T),o.ending?function(e,t){var r=new w;E(e,r),i.nextTick(t,r)}(this,r):(a||function(e,t,r,n){var o;return null===r?o=new v:"string"==typeof r||t.objectMode||(o=new p("chunk",["string","Buffer"],r)),!o||(E(e,o),i.nextTick(n,o),!1)}(this,o,e,r))&&(o.pendingcb++,s=function(e,t,r,n,i,o){if(!r){var s=function(e,t,r){return e.objectMode||!1===e.decodeStrings||"string"!=typeof t||(t=l.from(t,r)),t}(t,n,i);n!==s&&(r=!0,i="buffer",n=s)}var a=t.objectMode?1:n.length;t.length+=a;var u=t.length<t.highWaterMark;if(u||(t.needDrain=!0),t.writing||t.corked){var c=t.lastBufferedRequest;t.lastBufferedRequest={chunk:n,encoding:i,isBuf:r,callback:o,next:null},c?c.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else R(e,t,!1,a,n,i,o);return u}(this,o,a,e,t,r)),s},A.prototype.cork=function(){this._writableState.corked++},A.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.bufferProcessing||!e.bufferedRequest||L(this,e))},A.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new _(e);return this._writableState.defaultEncoding=e,this},Object.defineProperty(A.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(A.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),A.prototype._write=function(e,t,r){r(new g("_write()"))},A.prototype._writev=null,A.prototype.end=function(e,t,r){var n=this._writableState;return"function"==typeof e?(r=e,e=null,t=null):"function"==typeof t&&(r=t,t=null),null!=e&&this.write(e,t),n.corked&&(n.corked=1,this.uncork()),n.ending||function(e,t,r){t.ending=!0,M(e,t),r&&(t.finished?i.nextTick(r):e.once("finish",r)),t.ended=!0,e.writable=!1}(this,n,r),this},Object.defineProperty(A.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(A.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(e){this._writableState&&(this._writableState.destroyed=e)}}),A.prototype.destroy=h.destroy,A.prototype._undestroy=h.undestroy,A.prototype._destroy=function(e,t){t(e)}},5850:(e,t,r)=>{"use strict";var n,i=r(4155);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var s=r(8610),a=Symbol("lastResolve"),u=Symbol("lastReject"),l=Symbol("error"),c=Symbol("ended"),h=Symbol("lastPromise"),f=Symbol("handlePromise"),d=Symbol("stream");function p(e,t){return{value:e,done:t}}function g(e){var t=e[a];if(null!==t){var r=e[d].read();null!==r&&(e[h]=null,e[a]=null,e[u]=null,t(p(r,!1)))}}function y(e){i.nextTick(g,e)}var m=Object.getPrototypeOf((function(){})),b=Object.setPrototypeOf((o(n={get stream(){return this[d]},next:function(){var e=this,t=this[l];if(null!==t)return Promise.reject(t);if(this[c])return Promise.resolve(p(void 0,!0));if(this[d].destroyed)return new Promise((function(t,r){i.nextTick((function(){e[l]?r(e[l]):t(p(void 0,!0))}))}));var r,n=this[h];if(n)r=new Promise(function(e,t){return function(r,n){e.then((function(){t[c]?r(p(void 0,!0)):t[f](r,n)}),n)}}(n,this));else{var o=this[d].read();if(null!==o)return Promise.resolve(p(o,!1));r=new Promise(this[f])}return this[h]=r,r}},Symbol.asyncIterator,(function(){return this})),o(n,"return",(function(){var e=this;return new Promise((function(t,r){e[d].destroy(null,(function(e){e?r(e):t(p(void 0,!0))}))}))})),n),m);e.exports=function(e){var t,r=Object.create(b,(o(t={},d,{value:e,writable:!0}),o(t,a,{value:null,writable:!0}),o(t,u,{value:null,writable:!0}),o(t,l,{value:null,writable:!0}),o(t,c,{value:e._readableState.endEmitted,writable:!0}),o(t,f,{value:function(e,t){var n=r[d].read();n?(r[h]=null,r[a]=null,r[u]=null,e(p(n,!1))):(r[a]=e,r[u]=t)},writable:!0}),t));return r[h]=null,s(e,(function(e){if(e&&"ERR_STREAM_PREMATURE_CLOSE"!==e.code){var t=r[u];return null!==t&&(r[h]=null,r[a]=null,r[u]=null,t(e)),void(r[l]=e)}var n=r[a];null!==n&&(r[h]=null,r[a]=null,r[u]=null,n(p(void 0,!0))),r[c]=!0})),e.on("readable",y.bind(null,r)),r}},7327:(e,t,r)=>{"use strict";function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var s=r(8764).Buffer,a=r(2361).inspect,u=a&&a.custom||"inspect";e.exports=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.head=null,this.tail=null,this.length=0}var t,r;return t=e,(r=[{key:"push",value:function(e){var t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length}},{key:"unshift",value:function(e){var t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length}},{key:"shift",value:function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}}},{key:"clear",value:function(){this.head=this.tail=null,this.length=0}},{key:"join",value:function(e){if(0===this.length)return"";for(var t=this.head,r=""+t.data;t=t.next;)r+=e+t.data;return r}},{key:"concat",value:function(e){if(0===this.length)return s.alloc(0);for(var t,r,n,i=s.allocUnsafe(e>>>0),o=this.head,a=0;o;)t=o.data,r=i,n=a,s.prototype.copy.call(t,r,n),a+=o.data.length,o=o.next;return i}},{key:"consume",value:function(e,t){var r;return e<this.head.data.length?(r=this.head.data.slice(0,e),this.head.data=this.head.data.slice(e)):r=e===this.head.data.length?this.shift():t?this._getString(e):this._getBuffer(e),r}},{key:"first",value:function(){return this.head.data}},{key:"_getString",value:function(e){var t=this.head,r=1,n=t.data;for(e-=n.length;t=t.next;){var i=t.data,o=e>i.length?i.length:e;if(o===i.length?n+=i:n+=i.slice(0,e),0==(e-=o)){o===i.length?(++r,t.next?this.head=t.next:this.head=this.tail=null):(this.head=t,t.data=i.slice(o));break}++r}return this.length-=r,n}},{key:"_getBuffer",value:function(e){var t=s.allocUnsafe(e),r=this.head,n=1;for(r.data.copy(t),e-=r.data.length;r=r.next;){var i=r.data,o=e>i.length?i.length:e;if(i.copy(t,t.length-e,0,o),0==(e-=o)){o===i.length?(++n,r.next?this.head=r.next:this.head=this.tail=null):(this.head=r,r.data=i.slice(o));break}++n}return this.length-=n,t}},{key:u,value:function(e,t){return a(this,function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}({},t,{depth:0,customInspect:!1}))}}])&&o(t.prototype,r),e}()},1195:(e,t,r)=>{"use strict";var n=r(4155);function i(e,t){s(e,t),o(e)}function o(e){e._writableState&&!e._writableState.emitClose||e._readableState&&!e._readableState.emitClose||e.emit("close")}function s(e,t){e.emit("error",t)}e.exports={destroy:function(e,t){var r=this,a=this._readableState&&this._readableState.destroyed,u=this._writableState&&this._writableState.destroyed;return a||u?(t?t(e):e&&(this._writableState?this._writableState.errorEmitted||(this._writableState.errorEmitted=!0,n.nextTick(s,this,e)):n.nextTick(s,this,e)),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(e||null,(function(e){!t&&e?r._writableState?r._writableState.errorEmitted?n.nextTick(o,r):(r._writableState.errorEmitted=!0,n.nextTick(i,r,e)):n.nextTick(i,r,e):t?(n.nextTick(o,r),t(e)):n.nextTick(o,r)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finalCalled=!1,this._writableState.prefinished=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)},errorOrDestroy:function(e,t){var r=e._readableState,n=e._writableState;r&&r.autoDestroy||n&&n.autoDestroy?e.destroy(t):e.emit("error",t)}}},8610:(e,t,r)=>{"use strict";var n=r(4281).q.ERR_STREAM_PREMATURE_CLOSE;function i(){}e.exports=function e(t,r,o){if("function"==typeof r)return e(t,null,r);r||(r={}),o=function(e){var t=!1;return function(){if(!t){t=!0;for(var r=arguments.length,n=new Array(r),i=0;i<r;i++)n[i]=arguments[i];e.apply(this,n)}}}(o||i);var s=r.readable||!1!==r.readable&&t.readable,a=r.writable||!1!==r.writable&&t.writable,u=function(){t.writable||c()},l=t._writableState&&t._writableState.finished,c=function(){a=!1,l=!0,s||o.call(t)},h=t._readableState&&t._readableState.endEmitted,f=function(){s=!1,h=!0,a||o.call(t)},d=function(e){o.call(t,e)},p=function(){var e;return s&&!h?(t._readableState&&t._readableState.ended||(e=new n),o.call(t,e)):a&&!l?(t._writableState&&t._writableState.ended||(e=new n),o.call(t,e)):void 0},g=function(){t.req.on("finish",c)};return function(e){return e.setHeader&&"function"==typeof e.abort}(t)?(t.on("complete",c),t.on("abort",p),t.req?g():t.on("request",g)):a&&!t._writableState&&(t.on("end",u),t.on("close",u)),t.on("end",f),t.on("finish",c),!1!==r.error&&t.on("error",d),t.on("close",p),function(){t.removeListener("complete",c),t.removeListener("abort",p),t.removeListener("request",g),t.req&&t.req.removeListener("finish",c),t.removeListener("end",u),t.removeListener("close",u),t.removeListener("finish",c),t.removeListener("end",f),t.removeListener("error",d),t.removeListener("close",p)}}},5167:e=>{e.exports=function(){throw new Error("Readable.from is not available in the browser")}},9946:(e,t,r)=>{"use strict";var n,i=r(4281).q,o=i.ERR_MISSING_ARGS,s=i.ERR_STREAM_DESTROYED;function a(e){if(e)throw e}function u(e,t,i,o){o=function(e){var t=!1;return function(){t||(t=!0,e.apply(void 0,arguments))}}(o);var a=!1;e.on("close",(function(){a=!0})),void 0===n&&(n=r(8610)),n(e,{readable:t,writable:i},(function(e){if(e)return o(e);a=!0,o()}));var u=!1;return function(t){if(!a&&!u)return u=!0,function(e){return e.setHeader&&"function"==typeof e.abort}(e)?e.abort():"function"==typeof e.destroy?e.destroy():void o(t||new s("pipe"))}}function l(e){e()}function c(e,t){return e.pipe(t)}function h(e){return e.length?"function"!=typeof e[e.length-1]?a:e.pop():a}e.exports=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var n,i=h(t);if(Array.isArray(t[0])&&(t=t[0]),t.length<2)throw new o("streams");var s=t.map((function(e,r){var o=r<t.length-1;return u(e,o,r>0,(function(e){n||(n=e),e&&s.forEach(l),o||(s.forEach(l),i(n))}))}));return t.reduce(c)}},2457:(e,t,r)=>{"use strict";var n=r(4281).q.ERR_INVALID_OPT_VALUE;e.exports={getHighWaterMark:function(e,t,r,i){var o=function(e,t,r){return null!=e.highWaterMark?e.highWaterMark:t?e[r]:null}(t,i,r);if(null!=o){if(!isFinite(o)||Math.floor(o)!==o||o<0)throw new n(i?r:"highWaterMark",o);return Math.floor(o)}return e.objectMode?16:16384}}},2503:(e,t,r)=>{e.exports=r(7187).EventEmitter},8473:(e,t,r)=>{(t=e.exports=r(9481)).Stream=t,t.Readable=t,t.Writable=r(4229),t.Duplex=r(6753),t.Transform=r(4605),t.PassThrough=r(2725),t.finished=r(8610),t.pipeline=r(9946)},8501:(e,t,r)=>{var n=r(1989),i=r(5676),o=r(7529),s=r(584),a=r(8575),u=t;u.request=function(e,t){e="string"==typeof e?a.parse(e):o(e);var i=-1===r.g.location.protocol.search(/^https?:$/)?"http:":"",s=e.protocol||i,u=e.hostname||e.host,l=e.port,c=e.path||"/";u&&-1!==u.indexOf(":")&&(u="["+u+"]"),e.url=(u?s+"//"+u:"")+(l?":"+l:"")+c,e.method=(e.method||"GET").toUpperCase(),e.headers=e.headers||{};var h=new n(e);return t&&h.on("response",t),h},u.get=function(e,t){var r=u.request(e,t);return r.end(),r},u.ClientRequest=n,u.IncomingMessage=i.IncomingMessage,u.Agent=function(){},u.Agent.defaultMaxSockets=4,u.globalAgent=new u.Agent,u.STATUS_CODES=s,u.METHODS=["CHECKOUT","CONNECT","COPY","DELETE","GET","HEAD","LOCK","M-SEARCH","MERGE","MKACTIVITY","MKCOL","MOVE","NOTIFY","OPTIONS","PATCH","POST","PROPFIND","PROPPATCH","PURGE","PUT","REPORT","SEARCH","SUBSCRIBE","TRACE","UNLOCK","UNSUBSCRIBE"]},8725:(e,t,r)=>{var n;function i(){if(void 0!==n)return n;if(r.g.XMLHttpRequest){n=new r.g.XMLHttpRequest;try{n.open("GET",r.g.XDomainRequest?"/":"https://example.com")}catch(e){n=null}}else n=null;return n}function o(e){var t=i();if(!t)return!1;try{return t.responseType=e,t.responseType===e}catch(e){}return!1}function s(e){return"function"==typeof e}t.fetch=s(r.g.fetch)&&s(r.g.ReadableStream),t.writableStream=s(r.g.WritableStream),t.abortController=s(r.g.AbortController),t.arraybuffer=t.fetch||o("arraybuffer"),t.msstream=!t.fetch&&o("ms-stream"),t.mozchunkedarraybuffer=!t.fetch&&o("moz-chunked-arraybuffer"),t.overrideMimeType=t.fetch||!!i()&&s(i().overrideMimeType),n=null},1989:(e,t,r)=>{var n=r(8764).Buffer,i=r(4155),o=r(8725),s=r(5717),a=r(5676),u=r(8473),l=a.IncomingMessage,c=a.readyStates,h=e.exports=function(e){var t,r=this;u.Writable.call(r),r._opts=e,r._body=[],r._headers={},e.auth&&r.setHeader("Authorization","Basic "+n.from(e.auth).toString("base64")),Object.keys(e.headers).forEach((function(t){r.setHeader(t,e.headers[t])}));var i=!0;if("disable-fetch"===e.mode||"requestTimeout"in e&&!o.abortController)i=!1,t=!0;else if("prefer-streaming"===e.mode)t=!1;else if("allow-wrong-content-type"===e.mode)t=!o.overrideMimeType;else{if(e.mode&&"default"!==e.mode&&"prefer-fast"!==e.mode)throw new Error("Invalid value for opts.mode");t=!0}r._mode=function(e,t){return o.fetch&&t?"fetch":o.mozchunkedarraybuffer?"moz-chunked-arraybuffer":o.msstream?"ms-stream":o.arraybuffer&&e?"arraybuffer":"text"}(t,i),r._fetchTimer=null,r._socketTimeout=null,r._socketTimer=null,r.on("finish",(function(){r._onFinish()}))};s(h,u.Writable),h.prototype.setHeader=function(e,t){var r=e.toLowerCase();-1===f.indexOf(r)&&(this._headers[r]={name:e,value:t})},h.prototype.getHeader=function(e){var t=this._headers[e.toLowerCase()];return t?t.value:null},h.prototype.removeHeader=function(e){delete this._headers[e.toLowerCase()]},h.prototype._onFinish=function(){var e=this;if(!e._destroyed){var t=e._opts;"timeout"in t&&0!==t.timeout&&e.setTimeout(t.timeout);var n=e._headers,s=null;"GET"!==t.method&&"HEAD"!==t.method&&(s=new Blob(e._body,{type:(n["content-type"]||{}).value||""}));var a=[];if(Object.keys(n).forEach((function(e){var t=n[e].name,r=n[e].value;Array.isArray(r)?r.forEach((function(e){a.push([t,e])})):a.push([t,r])})),"fetch"===e._mode){var u=null;if(o.abortController){var l=new AbortController;u=l.signal,e._fetchAbortController=l,"requestTimeout"in t&&0!==t.requestTimeout&&(e._fetchTimer=r.g.setTimeout((function(){e.emit("requestTimeout"),e._fetchAbortController&&e._fetchAbortController.abort()}),t.requestTimeout))}r.g.fetch(e._opts.url,{method:e._opts.method,headers:a,body:s||void 0,mode:"cors",credentials:t.withCredentials?"include":"same-origin",signal:u}).then((function(t){e._fetchResponse=t,e._resetTimers(!1),e._connect()}),(function(t){e._resetTimers(!0),e._destroyed||e.emit("error",t)}))}else{var h=e._xhr=new r.g.XMLHttpRequest;try{h.open(e._opts.method,e._opts.url,!0)}catch(t){return void i.nextTick((function(){e.emit("error",t)}))}"responseType"in h&&(h.responseType=e._mode),"withCredentials"in h&&(h.withCredentials=!!t.withCredentials),"text"===e._mode&&"overrideMimeType"in h&&h.overrideMimeType("text/plain; charset=x-user-defined"),"requestTimeout"in t&&(h.timeout=t.requestTimeout,h.ontimeout=function(){e.emit("requestTimeout")}),a.forEach((function(e){h.setRequestHeader(e[0],e[1])})),e._response=null,h.onreadystatechange=function(){switch(h.readyState){case c.LOADING:case c.DONE:e._onXHRProgress()}},"moz-chunked-arraybuffer"===e._mode&&(h.onprogress=function(){e._onXHRProgress()}),h.onerror=function(){e._destroyed||(e._resetTimers(!0),e.emit("error",new Error("XHR error")))};try{h.send(s)}catch(t){return void i.nextTick((function(){e.emit("error",t)}))}}}},h.prototype._onXHRProgress=function(){var e=this;e._resetTimers(!1),function(e){try{var t=e.status;return null!==t&&0!==t}catch(e){return!1}}(e._xhr)&&!e._destroyed&&(e._response||e._connect(),e._response._onXHRProgress(e._resetTimers.bind(e)))},h.prototype._connect=function(){var e=this;e._destroyed||(e._response=new l(e._xhr,e._fetchResponse,e._mode,e._resetTimers.bind(e)),e._response.on("error",(function(t){e.emit("error",t)})),e.emit("response",e._response))},h.prototype._write=function(e,t,r){this._body.push(e),r()},h.prototype._resetTimers=function(e){var t=this;r.g.clearTimeout(t._socketTimer),t._socketTimer=null,e?(r.g.clearTimeout(t._fetchTimer),t._fetchTimer=null):t._socketTimeout&&(t._socketTimer=r.g.setTimeout((function(){t.emit("timeout")}),t._socketTimeout))},h.prototype.abort=h.prototype.destroy=function(e){var t=this;t._destroyed=!0,t._resetTimers(!0),t._response&&(t._response._destroyed=!0),t._xhr?t._xhr.abort():t._fetchAbortController&&t._fetchAbortController.abort(),e&&t.emit("error",e)},h.prototype.end=function(e,t,r){"function"==typeof e&&(r=e,e=void 0),u.Writable.prototype.end.call(this,e,t,r)},h.prototype.setTimeout=function(e,t){var r=this;t&&r.once("timeout",t),r._socketTimeout=e,r._resetTimers(!1)},h.prototype.flushHeaders=function(){},h.prototype.setNoDelay=function(){},h.prototype.setSocketKeepAlive=function(){};var f=["accept-charset","accept-encoding","access-control-request-headers","access-control-request-method","connection","content-length","cookie","cookie2","date","dnt","expect","host","keep-alive","origin","referer","te","trailer","transfer-encoding","upgrade","via"]},5676:(e,t,r)=>{var n=r(4155),i=r(8764).Buffer,o=r(8725),s=r(5717),a=r(8473),u=t.readyStates={UNSENT:0,OPENED:1,HEADERS_RECEIVED:2,LOADING:3,DONE:4},l=t.IncomingMessage=function(e,t,r,s){var u=this;if(a.Readable.call(u),u._mode=r,u.headers={},u.rawHeaders=[],u.trailers={},u.rawTrailers=[],u.on("end",(function(){n.nextTick((function(){u.emit("close")}))})),"fetch"===r){if(u._fetchResponse=t,u.url=t.url,u.statusCode=t.status,u.statusMessage=t.statusText,t.headers.forEach((function(e,t){u.headers[t.toLowerCase()]=e,u.rawHeaders.push(t,e)})),o.writableStream){var l=new WritableStream({write:function(e){return s(!1),new Promise((function(t,r){u._destroyed?r():u.push(i.from(e))?t():u._resumeFetch=t}))},close:function(){s(!0),u._destroyed||u.push(null)},abort:function(e){s(!0),u._destroyed||u.emit("error",e)}});try{return void t.body.pipeTo(l).catch((function(e){s(!0),u._destroyed||u.emit("error",e)}))}catch(e){}}var c=t.body.getReader();!function e(){c.read().then((function(t){u._destroyed||(s(t.done),t.done?u.push(null):(u.push(i.from(t.value)),e()))})).catch((function(e){s(!0),u._destroyed||u.emit("error",e)}))}()}else if(u._xhr=e,u._pos=0,u.url=e.responseURL,u.statusCode=e.status,u.statusMessage=e.statusText,e.getAllResponseHeaders().split(/\r?\n/).forEach((function(e){var t=e.match(/^([^:]+):\s*(.*)/);if(t){var r=t[1].toLowerCase();"set-cookie"===r?(void 0===u.headers[r]&&(u.headers[r]=[]),u.headers[r].push(t[2])):void 0!==u.headers[r]?u.headers[r]+=", "+t[2]:u.headers[r]=t[2],u.rawHeaders.push(t[1],t[2])}})),u._charset="x-user-defined",!o.overrideMimeType){var h=u.rawHeaders["mime-type"];if(h){var f=h.match(/;\s*charset=([^;])(;|$)/);f&&(u._charset=f[1].toLowerCase())}u._charset||(u._charset="utf-8")}};s(l,a.Readable),l.prototype._read=function(){var e=this._resumeFetch;e&&(this._resumeFetch=null,e())},l.prototype._onXHRProgress=function(e){var t=this,n=t._xhr,o=null;switch(t._mode){case"text":if((o=n.responseText).length>t._pos){var s=o.substr(t._pos);if("x-user-defined"===t._charset){for(var a=i.alloc(s.length),l=0;l<s.length;l++)a[l]=255&s.charCodeAt(l);t.push(a)}else t.push(s,t._charset);t._pos=o.length}break;case"arraybuffer":if(n.readyState!==u.DONE||!n.response)break;o=n.response,t.push(i.from(new Uint8Array(o)));break;case"moz-chunked-arraybuffer":if(o=n.response,n.readyState!==u.LOADING||!o)break;t.push(i.from(new Uint8Array(o)));break;case"ms-stream":if(o=n.response,n.readyState!==u.LOADING)break;var c=new r.g.MSStreamReader;c.onprogress=function(){c.result.byteLength>t._pos&&(t.push(i.from(new Uint8Array(c.result.slice(t._pos)))),t._pos=c.result.byteLength)},c.onload=function(){e(!0),t.push(null)},c.readAsArrayBuffer(o)}t._xhr.readyState===u.DONE&&"ms-stream"!==t._mode&&(e(!0),t.push(null))}},2553:(e,t,r)=>{"use strict";var n=r(396).Buffer,i=n.isEncoding||function(e){switch((e=""+e)&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function o(e){var t;switch(this.encoding=function(e){var t=function(e){if(!e)return"utf8";for(var t;;)switch(e){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return e;default:if(t)return;e=(""+e).toLowerCase(),t=!0}}(e);if("string"!=typeof t&&(n.isEncoding===i||!i(e)))throw new Error("Unknown encoding: "+e);return t||e}(e),this.encoding){case"utf16le":this.text=u,this.end=l,t=4;break;case"utf8":this.fillLast=a,t=4;break;case"base64":this.text=c,this.end=h,t=3;break;default:return this.write=f,void(this.end=d)}this.lastNeed=0,this.lastTotal=0,this.lastChar=n.allocUnsafe(t)}function s(e){return e<=127?0:e>>5==6?2:e>>4==14?3:e>>3==30?4:e>>6==2?-1:-2}function a(e){var t=this.lastTotal-this.lastNeed,r=function(e,t,r){if(128!=(192&t[0]))return e.lastNeed=0,"�";if(e.lastNeed>1&&t.length>1){if(128!=(192&t[1]))return e.lastNeed=1,"�";if(e.lastNeed>2&&t.length>2&&128!=(192&t[2]))return e.lastNeed=2,"�"}}(this,e);return void 0!==r?r:this.lastNeed<=e.length?(e.copy(this.lastChar,t,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(e.copy(this.lastChar,t,0,e.length),void(this.lastNeed-=e.length))}function u(e,t){if((e.length-t)%2==0){var r=e.toString("utf16le",t);if(r){var n=r.charCodeAt(r.length-1);if(n>=55296&&n<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1],r.slice(0,-1)}return r}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=e[e.length-1],e.toString("utf16le",t,e.length-1)}function l(e){var t=e&&e.length?this.write(e):"";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return t+this.lastChar.toString("utf16le",0,r)}return t}function c(e,t){var r=(e.length-t)%3;return 0===r?e.toString("base64",t):(this.lastNeed=3-r,this.lastTotal=3,1===r?this.lastChar[0]=e[e.length-1]:(this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1]),e.toString("base64",t,e.length-r))}function h(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+this.lastChar.toString("base64",0,3-this.lastNeed):t}function f(e){return e.toString(this.encoding)}function d(e){return e&&e.length?this.write(e):""}t.s=o,o.prototype.write=function(e){if(0===e.length)return"";var t,r;if(this.lastNeed){if(void 0===(t=this.fillLast(e)))return"";r=this.lastNeed,this.lastNeed=0}else r=0;return r<e.length?t?t+this.text(e,r):this.text(e,r):t||""},o.prototype.end=function(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+"�":t},o.prototype.text=function(e,t){var r=function(e,t,r){var n=t.length-1;if(n<r)return 0;var i=s(t[n]);return i>=0?(i>0&&(e.lastNeed=i-1),i):--n<r||-2===i?0:(i=s(t[n]))>=0?(i>0&&(e.lastNeed=i-2),i):--n<r||-2===i?0:(i=s(t[n]))>=0?(i>0&&(2===i?i=0:e.lastNeed=i-3),i):0}(this,e,t);if(!this.lastNeed)return e.toString("utf8",t);this.lastTotal=r;var n=e.length-(r-this.lastNeed);return e.copy(this.lastChar,0,n),e.toString("utf8",t,n)},o.prototype.fillLast=function(e){if(this.lastNeed<=e.length)return e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length),this.lastNeed-=e.length}},396:(e,t,r)=>{var n=r(8764),i=n.Buffer;function o(e,t){for(var r in e)t[r]=e[r]}function s(e,t,r){return i(e,t,r)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?e.exports=n:(o(n,t),t.Buffer=s),s.prototype=Object.create(i.prototype),o(i,s),s.from=function(e,t,r){if("number"==typeof e)throw new TypeError("Argument must not be a number");return i(e,t,r)},s.alloc=function(e,t,r){if("number"!=typeof e)throw new TypeError("Argument must be a number");var n=i(e);return void 0!==t?"string"==typeof r?n.fill(t,r):n.fill(t):n.fill(0),n},s.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return i(e)},s.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return n.SlowBuffer(e)}},4985:function(e,t,r){"use strict";var n=r(8764).Buffer,i=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{u(n.next(e))}catch(e){o(e)}}function a(e){try{u(n.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.BackgroundApiService=void 0;const s=o(r(9267)),a=r(8052),u=r(3044),l=r(3168),c=r(7992),h=r(5038);class f{constructor(e,t,r){this.yandexMusicApi=e,f.userSettings=t,f.downloadManager=r}static getInstance(e){return i(this,void 0,void 0,(function*(){const t=new u.YandexMusicAPI(e);return this.userSettings||(this.userSettings=new c.UserSettings,yield this.userSettings.load()),this.downloadManager||(this.downloadManager=new a.DownloadManager(this.userSettings.concurrency),this.completeEventCallback_=e=>i(this,void 0,void 0,(function*(){yield this.processDownloadItem_(e)})),this.downloadManager.on("complete",this.completeEventCallback_)),new f(t,this.userSettings,this.downloadManager)}))}static emitError_(e){console.error(e);for(const t of this.errorListeners_)t(e)}static downloadCover_(e){return i(this,void 0,void 0,(function*(){const t={path:e,headers:{Connection:"keep-alive",Accept:"*/*","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"origin, content-type, accept"}};return new Promise(((e,r)=>{s.default.get(t,(t=>{const i=[];t.on("data",(e=>i.push(e))),t.on("error",r),t.on("end",(()=>e(n.concat(i))))})).on("error",r)}))}))}static processDownloadItem_(e){var t,r;return i(this,void 0,void 0,(function*(){if(!(null===(t=e.customData)||void 0===t?void 0:t.trackId))return;if(!(null===(r=e.customData)||void 0===r?void 0:r.locale))return;const n=new u.YandexMusicAPI(e.customData.locale);try{const t=yield n.getTrack(+e.customData.trackId),r=new l.TrackID3TagWriter(e.bytes);if(r.setTitle(t.track.title).setType(t.track.type).setDuration(t.track.durationMs),t.track.albums.length>0&&r.setPositionInAlbum(t.track.albums[0].trackPosition.index).setVolume(t.track.albums[0].trackPosition.volume).setGenre(t.track.albums[0].genre).setAlbum({title:t.track.albums[0].title,artist:t.track.albums[0].artists.length>0?t.track.albums[0].artists[0].name:void 0,year:t.track.albums[0].year}),t.track.artists.length>0&&r.setArtists(t.artists.map((e=>e.name))),t.track.coverUri){const e=yield this.downloadCover_(yield n.getCoverDownloadLink(t.track.coverUri,f.userSettings.coverSize));r.setCover(e,t.track.title)}0!==t.track.albums[0].labels.length&&r.setLabel(t.track.albums[0].labels[0].name),0!==t.lyric.length&&r.setLyric(t.lyric[0].fullLyrics,t.track.title,t.lyric[0].textLanguage);const i=r.getUrl();return new Promise((t=>{chrome.downloads.download({url:i,filename:e.downloadPath+e.filename},(()=>{r.revokeUrl(),t()}))}))}catch(e){f.emitError_(e)}}))}static encodeFilename_(e){return e.replaceAll(":","%58").replaceAll("?","%63").replaceAll("*","%2A").replaceAll("/","%47").replaceAll("\\","%5C").replaceAll('"',"%22").replaceAll("|","%124")}static encodeFolderName_(e){return this.encodeFilename_(e)}static generateTrackFilename_(e,t,r,n){const i=e.replaceAll("{title}",t).replaceAll("{album}",r).replaceAll("{artist}",n).trim();return this.encodeFilename_(i)}static on(e,t){this.errorListeners_.includes(t)||this.errorListeners_.push(t)}static removeListener(e,t){const r=this.errorListeners_.indexOf(t);-1!==r&&this.errorListeners_.splice(r,1)}downloadTrack(e){return i(this,void 0,void 0,(function*(){try{const t=yield this.yandexMusicApi.getTrack(+e);if(!t.track.available)return;const r=yield this.yandexMusicApi.getTrackDownloadLink(+e),n=f.generateTrackFilename_(f.userSettings.filenameFormat,t.track.title,t.track.albums.length>0?t.track.albums[0].title:"",t.track.artists.length>0?t.track.artists[0].name:""),i=f.userSettings.downloadPath;f.downloadManager.download(r,t.track.title,n+".mp3",i,{trackId:e,locale:this.yandexMusicApi.getLocale()})}catch(e){f.emitError_(e)}}))}downloadAlbum(e){return i(this,void 0,void 0,(function*(){const t=yield this.yandexMusicApi.getAlbum(e);let r=1;for(const e of t.volumes){for(const n of e)try{if(!n.available)continue;const e=yield this.yandexMusicApi.getTrackDownloadLink(+n.id),i=f.generateTrackFilename_(f.userSettings.filenameFormat,n.title,n.albums.length>0?n.albums[0].title:"",n.artists.length>0?n.artists[0].name:"");let o=f.userSettings.downloadPath;f.userSettings.downloadAlbumsInSeparateFolder&&(t.artists.length>0?o+=`${f.encodeFolderName_(t.artists[0].name)}-${f.encodeFolderName_(t.title)}/`:o+=`${f.encodeFolderName_(t.title)}/`),t.volumes.length>1&&(o+=`volume ${r}/`),f.downloadManager.download(e,n.title,i+".mp3",o,{trackId:n.id,locale:this.yandexMusicApi.getLocale()})}catch(e){f.emitError_(e)}++r}}))}downloadPlaylist(e,t){return i(this,void 0,void 0,(function*(){const{playlist:r}=yield this.yandexMusicApi.getPlaylist(e,t);for(const e of r.tracks)try{if(!e.available)continue;const t=yield this.yandexMusicApi.getTrackDownloadLink(+e.id),n=f.generateTrackFilename_(f.userSettings.filenameFormat,e.title,e.albums.length>0?e.albums[0].title:"",e.artists.length>0?e.artists[0].name:"");let i=f.userSettings.downloadPath;f.userSettings.downloadPlaylistsInSeparateFolder&&(i+=`${f.encodeFolderName_(r.title)}/`),f.downloadManager.download(t,e.title,n+".mp3",i,{trackId:e.id,locale:this.yandexMusicApi.getLocale()})}catch(e){f.emitError_(e)}}))}downloadArtist(e){return i(this,void 0,void 0,(function*(){const t=yield this.yandexMusicApi.getArtist(e);for(const e of t.trackIds)try{const{track:r}=yield this.yandexMusicApi.getTrack(+e);if(!r.available)continue;const n=yield this.yandexMusicApi.getTrackDownloadLink(+r.id),i=f.generateTrackFilename_(f.userSettings.filenameFormat,r.title,r.albums.length>0?r.albums[0].title:"",r.artists.length>0?r.artists[0].name:"");let o=f.userSettings.downloadPath;f.userSettings.downloadArtistsInSeparateFolder&&(o+=`${f.encodeFolderName_(t.artist.name)}/`),f.downloadManager.download(n,r.title,i+".mp3",o,{trackId:r.id,locale:this.yandexMusicApi.getLocale()})}catch(e){f.emitError_(e)}}))}}t.BackgroundApiService=f,f.errorListeners_=[],chrome.runtime.onConnect.addListener((e=>i(void 0,void 0,void 0,(function*(){var t,r;chrome.browserAction.setIcon({path:"images/active-icon.png",tabId:null===(r=null===(t=e.sender)||void 0===t?void 0:t.tab)||void 0===r?void 0:r.id});const n=t=>i(void 0,void 0,void 0,(function*(){const r={type:h.ChromeMessageType.DOWNLOAD_EVENT,eventType:"add",downloadItem:Object.assign(Object.assign({},t),{bytes:null})};e.postMessage(r)})),o=t=>i(void 0,void 0,void 0,(function*(){const r={type:h.ChromeMessageType.DOWNLOAD_EVENT,eventType:"progress",downloadItem:Object.assign(Object.assign({},t),{bytes:null})};e.postMessage(r)})),s=t=>i(void 0,void 0,void 0,(function*(){const r={type:h.ChromeMessageType.DOWNLOAD_EVENT,eventType:"interrupted",downloadItem:Object.assign(Object.assign({},t),{bytes:null})};e.postMessage(r)})),a=t=>i(void 0,void 0,void 0,(function*(){const r={type:h.ChromeMessageType.DOWNLOAD_EVENT,eventType:"complete",downloadItem:Object.assign(Object.assign({},t),{bytes:null})};e.postMessage(r)})),u=(t,r)=>i(void 0,void 0,void 0,(function*(){const n={type:h.ChromeMessageType.DOWNLOAD_ERROR_EVENT,downloadItem:Object.assign(Object.assign({},t),{bytes:null}),error:r};e.postMessage(n)})),l=t=>{const r={type:h.ChromeMessageType.ERROR_EVENT,error:t};e.postMessage(r)},c=yield f.getInstance(e.name);e.onMessage.addListener((t=>{switch(t.type){case h.ChromeMessageType.ADD_DOWNLOAD_LISTENER:f.downloadManager.on("add",n),f.downloadManager.on("progress",o),f.downloadManager.on("interrupted",s),f.downloadManager.on("complete",a);break;case h.ChromeMessageType.ADD_ERROR_LISTENER:f.downloadManager.on("error",u),f.on("error",l);break;case h.ChromeMessageType.DOWNLOAD_TRACK:c.downloadTrack(t.trackId);break;case h.ChromeMessageType.DOWNLOAD_ALBUM:c.downloadAlbum(t.albumId);break;case h.ChromeMessageType.DOWNLOAD_PLAYLIST:c.downloadPlaylist(t.owner,t.kind);break;case h.ChromeMessageType.DOWNLOAD_ARTIST:c.downloadArtist(t.artistId);break;case h.ChromeMessageType.LIST_DOWNLOAD_ITEMS:{const t={type:h.ChromeMessageType.LIST_DOWNLOAD_ITEMS,items:f.downloadManager.list().map((e=>Object.assign(Object.assign({},e),{bytes:null})))};e.postMessage(t);break}case h.ChromeMessageType.INTERRUPT_DOWNLOAD:f.downloadManager.interrupt(t.downloadItemId);break;default:console.debug("Unknown message type: "+t.type)}})),e.onDisconnect.addListener((()=>{f.downloadManager.removeListener("add",n),f.downloadManager.removeListener("progress",o),f.downloadManager.removeListener("interrupted",s),f.downloadManager.removeListener("complete",a),f.downloadManager.removeListener("error",u),f.removeListener("error",l)}))}))))},5038:(e,t)=>{"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),t.ChromeMessageType=void 0,(r=t.ChromeMessageType||(t.ChromeMessageType={}))[r.DOWNLOAD_TRACK=0]="DOWNLOAD_TRACK",r[r.DOWNLOAD_ALBUM=1]="DOWNLOAD_ALBUM",r[r.DOWNLOAD_PLAYLIST=2]="DOWNLOAD_PLAYLIST",r[r.DOWNLOAD_ARTIST=3]="DOWNLOAD_ARTIST",r[r.ADD_DOWNLOAD_LISTENER=4]="ADD_DOWNLOAD_LISTENER",r[r.ADD_ERROR_LISTENER=5]="ADD_ERROR_LISTENER",r[r.DOWNLOAD_EVENT=6]="DOWNLOAD_EVENT",r[r.DOWNLOAD_ERROR_EVENT=7]="DOWNLOAD_ERROR_EVENT",r[r.ERROR_EVENT=8]="ERROR_EVENT",r[r.LIST_DOWNLOAD_ITEMS=9]="LIST_DOWNLOAD_ITEMS",r[r.INTERRUPT_DOWNLOAD=10]="INTERRUPT_DOWNLOAD"},8052:function(e,t,r){"use strict";var n=r(8764).Buffer,i=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{u(n.next(e))}catch(e){o(e)}}function a(e){try{u(n.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))},o=this&&this.__asyncValues||function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e="function"==typeof __values?__values(e):e[Symbol.iterator](),t={},n("next"),n("throw"),n("return"),t[Symbol.asyncIterator]=function(){return this},t);function n(r){t[r]=e[r]&&function(t){return new Promise((function(n,i){!function(e,t,r,n){Promise.resolve(n).then((function(t){e({value:t,done:r})}),t)}(n,i,(t=e[r](t)).done,t.value)}))}}},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.DownloadManager=void 0;const a=s(r(9267)),u=r(984);t.DownloadManager=class{constructor(e=1){this.lastId_=1,this.listeners_={add:[],interrupted:[],progress:[],complete:[]},this.errorListeners_=[],this.downloadQueue_=[],this.queuePaused_=!1,this.concurrency_=e,this.inProgressSize_=0}downloadBuffer_(e,t){return i(this,void 0,void 0,(function*(){const r={path:e,headers:{Connection:"keep-alive",Accept:"*/*","Access-Control-Allow-Headers":"origin, content-type, accept"}};return new Promise(((e,i)=>{const o=a.default.get(r,(r=>{var s;const a=[],u=+(null!==(s=r.headers["content-length"])&&void 0!==s?s:-1),l=()=>{o.destroy(),e(null)};r.on("data",(e=>{a.push(e),t(e.byteLength,u,l)})),r.on("error",i),r.on("end",(()=>{e(n.concat(a))}))})).on("error",i)}))}))}queueRemove_(e){const t=this.downloadQueue_.findIndex((t=>t.id===e));-1!==t&&this.downloadQueue_.splice(t,1)}queueProcessNext_(){return i(this,void 0,void 0,(function*(){if(this.inProgressSize_===this.concurrency_)return;if(this.queuePaused_)return;const e=this.downloadQueue_.find((e=>e.state===u.DownloadItemState.PENDING));if(e){this.inProgressSize_++,e.startMs=Date.now(),e.state=u.DownloadItemState.IN_PROGRESS,this.emit_("progress",e);try{e.bytes=yield this.downloadBuffer_(e.uri,((t,r,n)=>{e.size=r,e.downloadedSize+=t,e.state===u.DownloadItemState.INTERRUPTED&&n(),this.emit_("progress",e)})),null===e.bytes?(e.state=u.DownloadItemState.INTERRUPTED,this.emit_("interrupted",e)):(e.state=u.DownloadItemState.COMPLETE,this.emit_("complete",e))}catch(t){e.state=u.DownloadItemState.ERROR,this.emitError_(e,t)}this.inProgressSize_--,this.queueRemove_(e.id),this.queueProcessNext_()}}))}download(e,t,r,n="",i){const o={id:this.lastId_++,name:t,state:u.DownloadItemState.PENDING,filename:r,downloadPath:n,uri:e,bytes:null,size:-1,downloadedSize:0,startMs:-1,customData:i};return this.downloadQueue_.push(o),this.emit_("add",o),this.queueProcessNext_(),o}interrupt(e){const t=this.downloadQueue_.find((t=>t.id===e));t&&(t.state===u.DownloadItemState.IN_PROGRESS?t.state=u.DownloadItemState.INTERRUPTED:t.state===u.DownloadItemState.PENDING&&(t.state=u.DownloadItemState.INTERRUPTED,this.emit_("interrupted",t),this.queueRemove_(e)))}remove(e){this.queueRemove_(e)}run(){this.queuePaused_=!1,this.queueProcessNext_()}stop(){this.queuePaused_=!0}clear(){this.downloadQueue_=this.downloadQueue_.filter((e=>e.state!==u.DownloadItemState.PENDING))}list(){return this.downloadQueue_}size(){return this.downloadQueue_.length}inProgressSize(){return this.inProgressSize_}emit_(e,t){var r,n;return i(this,void 0,void 0,(function*(){try{for(var i,s=o(this.listeners_[e]);!(i=yield s.next()).done;){const e=i.value;try{yield e(t)}catch(e){console.error(e)}}}catch(e){r={error:e}}finally{try{i&&!i.done&&(n=s.return)&&(yield n.call(s))}finally{if(r)throw r.error}}}))}emitError_(e,t){var r,n;return i(this,void 0,void 0,(function*(){console.error(t);try{for(var i,s=o(this.errorListeners_);!(i=yield s.next()).done;){const r=i.value;try{yield r(e,t)}catch(e){console.error(e)}}}catch(e){r={error:e}}finally{try{i&&!i.done&&(n=s.return)&&(yield n.call(s))}finally{if(r)throw r.error}}}))}on(e,t){"error"===e?this.errorListeners_.includes(t)||this.errorListeners_.push(t):this.listeners_[e].includes(t)||this.listeners_[e].push(t)}removeListener(e,t){if("error"===e){const e=this.errorListeners_.indexOf(t);if(-1===e)return;this.errorListeners_.splice(e,1)}else{const r=this.listeners_[e].indexOf(t);if(-1===r)return;this.listeners_[e].splice(r,1)}}}},984:(e,t)=>{"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),t.DownloadItemState=void 0,(r=t.DownloadItemState||(t.DownloadItemState={})).PENDING="pending",r.IN_PROGRESS="in_progress",r.INTERRUPTED="interrupted",r.COMPLETE="complete",r.ERROR="error"},3168:function(e,t,r){"use strict";var n=r(8764).Buffer,i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.TrackID3TagWriter=void 0;const o=i(r(4362)),s=r(1409);t.TrackID3TagWriter=class{constructor(e){this.songBuffer_=e,this.id3Writer_=new o.default(this.songBuffer_),this.languageConverter_=new s.ISO6391ToISO6392Converter("eng")}setTitle(e){return this.id3Writer_.setFrame("TIT2",e),this}setVersion(e){return this.id3Writer_.setFrame("TIT3",e),this}setLanguage(e){return this.id3Writer_.setFrame("TLAN",this.languageConverter_.convert(e)),this}setDuration(e){return this.id3Writer_.setFrame("TLEN",e),this}setType(e){return this.id3Writer_.setFrame("TMED",e),this}setGenre(e){return this.id3Writer_.setFrame("TCON",[e]),this}setLabel(e){return this.id3Writer_.setFrame("TPUB",e),this}setLyric(e,t,r){return this.id3Writer_.setFrame("USLT",{lyrics:e,description:t,language:this.languageConverter_.convert(r||"en")}),this}setCover(e,t){return this.id3Writer_.setFrame("APIC",{type:3,data:e,description:t}),this}setArtists(e){return this.id3Writer_.setFrame("TPE1",e),this}setAlbum(e){return e.title&&this.id3Writer_.setFrame("TALB",e.title),e.artist&&this.id3Writer_.setFrame("TPE2",e.artist),e.year&&this.id3Writer_.setFrame("TYER",e.year),this}setPositionInAlbum(e){return this.id3Writer_.setFrame("TRCK",e.toString()),this}setVolume(e){return this.id3Writer_.setFrame("TPOS",e.toString()),this}getTrack(){return this.id3Writer_.addTag(),n.from(this.id3Writer_.arrayBuffer)}getUrl(){return this.id3Writer_.addTag(),this.id3Writer_.getURL()}revokeUrl(){this.id3Writer_.revokeURL()}}},1409:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ISO6391ToISO6392Converter=void 0;const r=new Map([["en","eng"],["ru","rus"],["be","bel"],["fr","fre"],["de","ger"],["it","ita"],["es","spa"]]);t.ISO6391ToISO6392Converter=class{constructor(e){if(!/[a-z]{3}/i.test(e))throw new Error("Language must be coded following the ISO 639-2 standards");this.defaultLanguage_=e}convert(e){if(/[a-z]{3}/i.test(e))return e;if(!/[a-z]{2}/i.test(e))throw new Error("Language must be coded following the ISO 639-1 standards");return r.get(e)||this.defaultLanguage_}}},7992:function(e,t){"use strict";var r=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{u(n.next(e))}catch(e){o(e)}}function a(e){try{u(n.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.UserSettings=void 0,t.UserSettings=class{constructor(){this.coverSize=300,this.filenameFormat="{artist} {title}",this.downloadPath="",this.downloadAlbumsInSeparateFolder=!0,this.downloadPlaylistsInSeparateFolder=!0,this.downloadArtistsInSeparateFolder=!0,this.maxQueueSize=-1,this.concurrency=2,chrome&&chrome.storage.onChanged.addListener((e=>{var t,r,n,i,o,s,a,u,l,c,h,f,d,p;this.coverSize=null!==(r=null===(t=e.coverSize)||void 0===t?void 0:t.newValue)&&void 0!==r?r:this.coverSize,this.filenameFormat=null!==(i=null===(n=e.filenameFormat)||void 0===n?void 0:n.newValue)&&void 0!==i?i:this.filenameFormat,this.downloadAlbumsInSeparateFolder=null!==(s=null===(o=e.downloadAlbumsInSeparateFolder)||void 0===o?void 0:o.newValue)&&void 0!==s?s:this.downloadAlbumsInSeparateFolder,this.downloadArtistsInSeparateFolder=null!==(u=null===(a=e.downloadArtistsInSeparateFolder)||void 0===a?void 0:a.newValue)&&void 0!==u?u:this.downloadArtistsInSeparateFolder,this.downloadPlaylistsInSeparateFolder=null!==(c=null===(l=e.downloadPlaylistsInSeparateFolder)||void 0===l?void 0:l.newValue)&&void 0!==c?c:this.downloadPlaylistsInSeparateFolder,this.maxQueueSize=null!==(f=null===(h=e.maxQueueSize)||void 0===h?void 0:h.newValue)&&void 0!==f?f:this.maxQueueSize,this.concurrency=null!==(p=null===(d=e.concurrency)||void 0===d?void 0:d.newValue)&&void 0!==p?p:this.concurrency}))}load(){return r(this,void 0,void 0,(function*(){if(chrome)return new Promise((e=>{chrome.storage.sync.get(Object.keys(this),(t=>{var r,n,i,o,s,a,u;this.coverSize=null!==(r=t.coverSize)&&void 0!==r?r:this.coverSize,this.filenameFormat=null!==(n=t.filenameFormat)&&void 0!==n?n:this.filenameFormat,this.downloadAlbumsInSeparateFolder=null!==(i=t.downloadAlbumsInSeparateFolder)&&void 0!==i?i:this.downloadAlbumsInSeparateFolder,this.downloadArtistsInSeparateFolder=null!==(o=t.downloadArtistsInSeparateFolder)&&void 0!==o?o:this.downloadArtistsInSeparateFolder,this.downloadPlaylistsInSeparateFolder=null!==(s=t.downloadPlaylistsInSeparateFolder)&&void 0!==s?s:this.downloadPlaylistsInSeparateFolder,this.maxQueueSize=null!==(a=t.maxQueueSize)&&void 0!==a?a:this.maxQueueSize,this.concurrency=null!==(u=t.concurrency)&&void 0!==u?u:this.concurrency,e()}))}))}))}save(){return r(this,void 0,void 0,(function*(){if(chrome)return new Promise((e=>{chrome.storage.sync.set(this,e)}))}))}}},3044:function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{u(n.next(e))}catch(e){o(e)}}function a(e){try{u(n.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.YandexMusicAPI=void 0;const o=i(r(9267)),s=i(r(2568));class a{constructor(e="ru"){a.availableLocales_.includes(e)||(e="com"),this.locale_=e,this.headers_={"X-Retpath-Y":encodeURI(`https://${this.getHostname()}/`),Connection:"keep-alive",Accept:"*/*","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"origin, content-type, accept"}}getHostname(){return`music.yandex.${this.locale_}`}getObject(e){return n(this,void 0,void 0,(function*(){const t={path:"https://"+e,headers:Object.assign(Object.assign({},this.headers_),{Accept:"application/json"})};return new Promise(((e,r)=>{o.default.get(t,(t=>{let n="";t.setEncoding("utf8"),t.on("data",(e=>n+=e||"")),t.on("error",r),t.on("end",(()=>e(JSON.parse(n))))})).on("error",r)}))}))}getTrack(e){return n(this,void 0,void 0,(function*(){return yield this.getObject(`${this.getHostname()}/handlers/track.jsx?track=${e}`)}))}getAlbum(e){return n(this,void 0,void 0,(function*(){return yield this.getObject(`${this.getHostname()}/handlers/album.jsx?album=${e}`)}))}getArtist(e){return n(this,void 0,void 0,(function*(){return yield this.getObject(`${this.getHostname()}/handlers/artist.jsx?artist=${e}`)}))}getPlaylist(e,t){return n(this,void 0,void 0,(function*(){return yield this.getObject(`${this.getHostname()}/handlers/playlist.jsx?owner=${e}&kinds=${t}`)}))}getTrackDownloadLink(e){return n(this,void 0,void 0,(function*(){const t=`/api/v2.1/handlers/track/${e}/web-album-track-track-main/download/m?hq=1&external-domain=${this.getHostname()}&overembed=no&__t=${Date.now()}`,r=yield this.getObject(this.getHostname()+t),n=yield this.getObject(r.src.slice(2)+"&format=json"),i=`/get-mp3/${s.default("XGRlBW9FXlekgbPrRHuSiA"+n.path.substring(1)+n.s)}/${n.ts}${n.path}?track-id=${e}`;return"https://"+n.host+i}))}getCoverDownloadLink(e,t){return n(this,void 0,void 0,(function*(){return"https://"+e.slice(0,-2)+`${t}x${t}`}))}getLocale(){return this.locale_}}t.YandexMusicAPI=a,a.availableLocales_=["by","ru","kz","com","net","ua"]},2511:function(e,t,r){var n;e=r.nmd(e),function(i){t&&t.nodeType,e&&e.nodeType;var o="object"==typeof r.g&&r.g;o.global!==o&&o.window!==o&&o.self;var s,a=2147483647,u=36,l=/^xn--/,c=/[^\x20-\x7E]/,h=/[\x2E\u3002\uFF0E\uFF61]/g,f={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},d=Math.floor,p=String.fromCharCode;function g(e){throw RangeError(f[e])}function y(e,t){for(var r=e.length,n=[];r--;)n[r]=t(e[r]);return n}function m(e,t){var r=e.split("@"),n="";return r.length>1&&(n=r[0]+"@",e=r[1]),n+y((e=e.replace(h,".")).split("."),t).join(".")}function b(e){for(var t,r,n=[],i=0,o=e.length;i<o;)(t=e.charCodeAt(i++))>=55296&&t<=56319&&i<o?56320==(64512&(r=e.charCodeAt(i++)))?n.push(((1023&t)<<10)+(1023&r)+65536):(n.push(t),i--):n.push(t);return n}function v(e){return y(e,(function(e){var t="";return e>65535&&(t+=p((e-=65536)>>>10&1023|55296),e=56320|1023&e),t+p(e)})).join("")}function w(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function _(e,t,r){var n=0;for(e=r?d(e/700):e>>1,e+=d(e/t);e>455;n+=u)e=d(e/35);return d(n+36*e/(e+38))}function E(e){var t,r,n,i,o,s,l,c,h,f,p,y=[],m=e.length,b=0,w=128,E=72;for((r=e.lastIndexOf("-"))<0&&(r=0),n=0;n<r;++n)e.charCodeAt(n)>=128&&g("not-basic"),y.push(e.charCodeAt(n));for(i=r>0?r+1:0;i<m;){for(o=b,s=1,l=u;i>=m&&g("invalid-input"),((c=(p=e.charCodeAt(i++))-48<10?p-22:p-65<26?p-65:p-97<26?p-97:u)>=u||c>d((a-b)/s))&&g("overflow"),b+=c*s,!(c<(h=l<=E?1:l>=E+26?26:l-E));l+=u)s>d(a/(f=u-h))&&g("overflow"),s*=f;E=_(b-o,t=y.length+1,0==o),d(b/t)>a-w&&g("overflow"),w+=d(b/t),b%=t,y.splice(b++,0,w)}return v(y)}function T(e){var t,r,n,i,o,s,l,c,h,f,y,m,v,E,T,S=[];for(m=(e=b(e)).length,t=128,r=0,o=72,s=0;s<m;++s)(y=e[s])<128&&S.push(p(y));for(n=i=S.length,i&&S.push("-");n<m;){for(l=a,s=0;s<m;++s)(y=e[s])>=t&&y<l&&(l=y);for(l-t>d((a-r)/(v=n+1))&&g("overflow"),r+=(l-t)*v,t=l,s=0;s<m;++s)if((y=e[s])<t&&++r>a&&g("overflow"),y==t){for(c=r,h=u;!(c<(f=h<=o?1:h>=o+26?26:h-o));h+=u)T=c-f,E=u-f,S.push(p(w(f+T%E,0))),c=d(T/E);S.push(p(w(c,0))),o=_(r,v,n==i),r=0,++n}++r,++t}return S.join("")}s={version:"1.3.2",ucs2:{decode:b,encode:v},decode:E,encode:T,toASCII:function(e){return m(e,(function(e){return c.test(e)?"xn--"+T(e):e}))},toUnicode:function(e){return m(e,(function(e){return l.test(e)?E(e.slice(4).toLowerCase()):e}))}},void 0===(n=function(){return s}.call(t,r,t,e))||(e.exports=n)}()},8575:(e,t,r)=>{"use strict";var n=r(2511),i=r(2502);function o(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}t.parse=v,t.resolve=function(e,t){return v(e,!1,!0).resolve(t)},t.resolveObject=function(e,t){return e?v(e,!1,!0).resolveObject(t):t},t.format=function(e){return i.isString(e)&&(e=v(e)),e instanceof o?e.format():o.prototype.format.call(e)},t.Url=o;var s=/^([a-z0-9.+-]+:)/i,a=/:[0-9]*$/,u=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,l=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),c=["'"].concat(l),h=["%","/","?",";","#"].concat(c),f=["/","?","#"],d=/^[+a-z0-9A-Z_-]{0,63}$/,p=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,g={javascript:!0,"javascript:":!0},y={javascript:!0,"javascript:":!0},m={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},b=r(7673);function v(e,t,r){if(e&&i.isObject(e)&&e instanceof o)return e;var n=new o;return n.parse(e,t,r),n}o.prototype.parse=function(e,t,r){if(!i.isString(e))throw new TypeError("Parameter 'url' must be a string, not "+typeof e);var o=e.indexOf("?"),a=-1!==o&&o<e.indexOf("#")?"?":"#",l=e.split(a);l[0]=l[0].replace(/\\/g,"/");var v=e=l.join(a);if(v=v.trim(),!r&&1===e.split("#").length){var w=u.exec(v);if(w)return this.path=v,this.href=v,this.pathname=w[1],w[2]?(this.search=w[2],this.query=t?b.parse(this.search.substr(1)):this.search.substr(1)):t&&(this.search="",this.query={}),this}var _=s.exec(v);if(_){var E=(_=_[0]).toLowerCase();this.protocol=E,v=v.substr(_.length)}if(r||_||v.match(/^\/\/[^@\/]+@[^@\/]+/)){var T="//"===v.substr(0,2);!T||_&&y[_]||(v=v.substr(2),this.slashes=!0)}if(!y[_]&&(T||_&&!m[_])){for(var S,A,R=-1,O=0;O<f.length;O++)-1!==(L=v.indexOf(f[O]))&&(-1===R||L<R)&&(R=L);for(-1!==(A=-1===R?v.lastIndexOf("@"):v.lastIndexOf("@",R))&&(S=v.slice(0,A),v=v.slice(A+1),this.auth=decodeURIComponent(S)),R=-1,O=0;O<h.length;O++){var L;-1!==(L=v.indexOf(h[O]))&&(-1===R||L<R)&&(R=L)}-1===R&&(R=v.length),this.host=v.slice(0,R),v=v.slice(R),this.parseHost(),this.hostname=this.hostname||"";var I="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!I)for(var k=this.hostname.split(/\./),M=(O=0,k.length);O<M;O++){var C=k[O];if(C&&!C.match(d)){for(var x="",P=0,N=C.length;P<N;P++)C.charCodeAt(P)>127?x+="x":x+=C[P];if(!x.match(d)){var D=k.slice(0,O),B=k.slice(O+1),U=C.match(p);U&&(D.push(U[1]),B.unshift(U[2])),B.length&&(v="/"+B.join(".")+v),this.hostname=D.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),I||(this.hostname=n.toASCII(this.hostname));var j=this.port?":"+this.port:"",F=this.hostname||"";this.host=F+j,this.href+=this.host,I&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==v[0]&&(v="/"+v))}if(!g[E])for(O=0,M=c.length;O<M;O++){var W=c[O];if(-1!==v.indexOf(W)){var q=encodeURIComponent(W);q===W&&(q=escape(W)),v=v.split(W).join(q)}}var H=v.indexOf("#");-1!==H&&(this.hash=v.substr(H),v=v.slice(0,H));var z=v.indexOf("?");if(-1!==z?(this.search=v.substr(z),this.query=v.substr(z+1),t&&(this.query=b.parse(this.query)),v=v.slice(0,z)):t&&(this.search="",this.query={}),v&&(this.pathname=v),m[E]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){j=this.pathname||"";var $=this.search||"";this.path=j+$}return this.href=this.format(),this},o.prototype.format=function(){var e=this.auth||"";e&&(e=(e=encodeURIComponent(e)).replace(/%3A/i,":"),e+="@");var t=this.protocol||"",r=this.pathname||"",n=this.hash||"",o=!1,s="";this.host?o=e+this.host:this.hostname&&(o=e+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(o+=":"+this.port)),this.query&&i.isObject(this.query)&&Object.keys(this.query).length&&(s=b.stringify(this.query));var a=this.search||s&&"?"+s||"";return t&&":"!==t.substr(-1)&&(t+=":"),this.slashes||(!t||m[t])&&!1!==o?(o="//"+(o||""),r&&"/"!==r.charAt(0)&&(r="/"+r)):o||(o=""),n&&"#"!==n.charAt(0)&&(n="#"+n),a&&"?"!==a.charAt(0)&&(a="?"+a),t+o+(r=r.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})))+(a=a.replace("#","%23"))+n},o.prototype.resolve=function(e){return this.resolveObject(v(e,!1,!0)).format()},o.prototype.resolveObject=function(e){if(i.isString(e)){var t=new o;t.parse(e,!1,!0),e=t}for(var r=new o,n=Object.keys(this),s=0;s<n.length;s++){var a=n[s];r[a]=this[a]}if(r.hash=e.hash,""===e.href)return r.href=r.format(),r;if(e.slashes&&!e.protocol){for(var u=Object.keys(e),l=0;l<u.length;l++){var c=u[l];"protocol"!==c&&(r[c]=e[c])}return m[r.protocol]&&r.hostname&&!r.pathname&&(r.path=r.pathname="/"),r.href=r.format(),r}if(e.protocol&&e.protocol!==r.protocol){if(!m[e.protocol]){for(var h=Object.keys(e),f=0;f<h.length;f++){var d=h[f];r[d]=e[d]}return r.href=r.format(),r}if(r.protocol=e.protocol,e.host||y[e.protocol])r.pathname=e.pathname;else{for(var p=(e.pathname||"").split("/");p.length&&!(e.host=p.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==p[0]&&p.unshift(""),p.length<2&&p.unshift(""),r.pathname=p.join("/")}if(r.search=e.search,r.query=e.query,r.host=e.host||"",r.auth=e.auth,r.hostname=e.hostname||e.host,r.port=e.port,r.pathname||r.search){var g=r.pathname||"",b=r.search||"";r.path=g+b}return r.slashes=r.slashes||e.slashes,r.href=r.format(),r}var v=r.pathname&&"/"===r.pathname.charAt(0),w=e.host||e.pathname&&"/"===e.pathname.charAt(0),_=w||v||r.host&&e.pathname,E=_,T=r.pathname&&r.pathname.split("/")||[],S=(p=e.pathname&&e.pathname.split("/")||[],r.protocol&&!m[r.protocol]);if(S&&(r.hostname="",r.port=null,r.host&&(""===T[0]?T[0]=r.host:T.unshift(r.host)),r.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===p[0]?p[0]=e.host:p.unshift(e.host)),e.host=null),_=_&&(""===p[0]||""===T[0])),w)r.host=e.host||""===e.host?e.host:r.host,r.hostname=e.hostname||""===e.hostname?e.hostname:r.hostname,r.search=e.search,r.query=e.query,T=p;else if(p.length)T||(T=[]),T.pop(),T=T.concat(p),r.search=e.search,r.query=e.query;else if(!i.isNullOrUndefined(e.search))return S&&(r.hostname=r.host=T.shift(),(I=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=I.shift(),r.host=r.hostname=I.shift())),r.search=e.search,r.query=e.query,i.isNull(r.pathname)&&i.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.href=r.format(),r;if(!T.length)return r.pathname=null,r.search?r.path="/"+r.search:r.path=null,r.href=r.format(),r;for(var A=T.slice(-1)[0],R=(r.host||e.host||T.length>1)&&("."===A||".."===A)||""===A,O=0,L=T.length;L>=0;L--)"."===(A=T[L])?T.splice(L,1):".."===A?(T.splice(L,1),O++):O&&(T.splice(L,1),O--);if(!_&&!E)for(;O--;O)T.unshift("..");!_||""===T[0]||T[0]&&"/"===T[0].charAt(0)||T.unshift(""),R&&"/"!==T.join("/").substr(-1)&&T.push("");var I,k=""===T[0]||T[0]&&"/"===T[0].charAt(0);return S&&(r.hostname=r.host=k?"":T.length?T.shift():"",(I=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=I.shift(),r.host=r.hostname=I.shift())),(_=_||r.host&&T.length)&&!k&&T.unshift(""),T.length?r.pathname=T.join("/"):(r.pathname=null,r.path=null),i.isNull(r.pathname)&&i.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.auth=e.auth||r.auth,r.slashes=r.slashes||e.slashes,r.href=r.format(),r},o.prototype.parseHost=function(){var e=this.host,t=a.exec(e);t&&(":"!==(t=t[0])&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)}},2502:e=>{"use strict";e.exports={isString:function(e){return"string"==typeof e},isObject:function(e){return"object"==typeof e&&null!==e},isNull:function(e){return null===e},isNullOrUndefined:function(e){return null==e}}},4927:(e,t,r)=>{function n(e){try{if(!r.g.localStorage)return!1}catch(e){return!1}var t=r.g.localStorage[e];return null!=t&&"true"===String(t).toLowerCase()}e.exports=function(e,t){if(n("noDeprecation"))return e;var r=!1;return function(){if(!r){if(n("throwDeprecation"))throw new Error(t);n("traceDeprecation")?console.trace(t):console.warn(t),r=!0}return e.apply(this,arguments)}}},7529:e=>{e.exports=function(){for(var e={},r=0;r<arguments.length;r++){var n=arguments[r];for(var i in n)t.call(n,i)&&(e[i]=n[i])}return e};var t=Object.prototype.hasOwnProperty},2361:()=>{},4616:()=>{}},t={};function r(n){var i=t[n];if(void 0!==i)return i.exports;var o=t[n]={id:n,loaded:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.loaded=!0,o.exports}r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),r(4985)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly95YW5kZXgtbXVzaWMtZG93bmxvYWRlci8uL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8veWFuZGV4LW11c2ljLWRvd25sb2FkZXIvLi9ub2RlX21vZHVsZXMvYnJvd3Nlci1pZDMtd3JpdGVyL2Rpc3QvYnJvd3Nlci1pZDMtd3JpdGVyLmpzIiwid2VicGFjazovL3lhbmRleC1tdXNpYy1kb3dubG9hZGVyLy4vbm9kZV9tb2R1bGVzL2J1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly95YW5kZXgtbXVzaWMtZG93bmxvYWRlci8uL25vZGVfbW9kdWxlcy9idWlsdGluLXN0YXR1cy1jb2Rlcy9icm93c2VyLmpzIiwid2VicGFjazovL3lhbmRleC1tdXNpYy1kb3dubG9hZGVyLy4vbm9kZV9tb2R1bGVzL2NoYXJlbmMvY2hhcmVuYy5qcyIsIndlYnBhY2s6Ly95YW5kZXgtbXVzaWMtZG93bmxvYWRlci8uL25vZGVfbW9kdWxlcy9jcnlwdC9jcnlwdC5qcyIsIndlYnBhY2s6Ly95YW5kZXgtbXVzaWMtZG93bmxvYWRlci8uL25vZGVfbW9kdWxlcy9ldmVudHMvZXZlbnRzLmpzIiwid2VicGFjazovL3lhbmRleC1tdXNpYy1kb3dubG9hZGVyLy4vbm9kZV9tb2R1bGVzL2h0dHBzLWJyb3dzZXJpZnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8veWFuZGV4LW11c2ljLWRvd25sb2FkZXIvLi9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcyIsIndlYnBhY2s6Ly95YW5kZXgtbXVzaWMtZG93bmxvYWRlci8uL25vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzIiwid2VicGFjazovL3lhbmRleC1tdXNpYy1kb3dubG9hZGVyLy4vbm9kZV9tb2R1bGVzL2lzLWJ1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly95YW5kZXgtbXVzaWMtZG93bmxvYWRlci8uL25vZGVfbW9kdWxlcy9tZDUvbWQ1LmpzIiwid2VicGFjazovL3lhbmRleC1tdXNpYy1kb3dubG9hZGVyLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly95YW5kZXgtbXVzaWMtZG93bmxvYWRlci8uL25vZGVfbW9kdWxlcy9xdWVyeXN0cmluZy9kZWNvZGUuanMiLCJ3ZWJwYWNrOi8veWFuZGV4LW11c2ljLWRvd25sb2FkZXIvLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmcvZW5jb2RlLmpzIiwid2VicGFjazovL3lhbmRleC1tdXNpYy1kb3dubG9hZGVyLy4vbm9kZV9tb2R1bGVzL3F1ZXJ5c3RyaW5nL2luZGV4LmpzIiwid2VicGFjazovL3lhbmRleC1tdXNpYy1kb3dubG9hZGVyLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9lcnJvcnMtYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly95YW5kZXgtbXVzaWMtZG93bmxvYWRlci8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fZHVwbGV4LmpzIiwid2VicGFjazovL3lhbmRleC1tdXNpYy1kb3dubG9hZGVyLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qcyIsIndlYnBhY2s6Ly95YW5kZXgtbXVzaWMtZG93bmxvYWRlci8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fcmVhZGFibGUuanMiLCJ3ZWJwYWNrOi8veWFuZGV4LW11c2ljLWRvd25sb2FkZXIvLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly95YW5kZXgtbXVzaWMtZG93bmxvYWRlci8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fd3JpdGFibGUuanMiLCJ3ZWJwYWNrOi8veWFuZGV4LW11c2ljLWRvd25sb2FkZXIvLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL2FzeW5jX2l0ZXJhdG9yLmpzIiwid2VicGFjazovL3lhbmRleC1tdXNpYy1kb3dubG9hZGVyLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9idWZmZXJfbGlzdC5qcyIsIndlYnBhY2s6Ly95YW5kZXgtbXVzaWMtZG93bmxvYWRlci8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveS5qcyIsIndlYnBhY2s6Ly95YW5kZXgtbXVzaWMtZG93bmxvYWRlci8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvZW5kLW9mLXN0cmVhbS5qcyIsIndlYnBhY2s6Ly95YW5kZXgtbXVzaWMtZG93bmxvYWRlci8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvZnJvbS1icm93c2VyLmpzIiwid2VicGFjazovL3lhbmRleC1tdXNpYy1kb3dubG9hZGVyLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9waXBlbGluZS5qcyIsIndlYnBhY2s6Ly95YW5kZXgtbXVzaWMtZG93bmxvYWRlci8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvc3RhdGUuanMiLCJ3ZWJwYWNrOi8veWFuZGV4LW11c2ljLWRvd25sb2FkZXIvLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbS1icm93c2VyLmpzIiwid2VicGFjazovL3lhbmRleC1tdXNpYy1kb3dubG9hZGVyLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9yZWFkYWJsZS1icm93c2VyLmpzIiwid2VicGFjazovL3lhbmRleC1tdXNpYy1kb3dubG9hZGVyLy4vbm9kZV9tb2R1bGVzL3N0cmVhbS1odHRwL2luZGV4LmpzIiwid2VicGFjazovL3lhbmRleC1tdXNpYy1kb3dubG9hZGVyLy4vbm9kZV9tb2R1bGVzL3N0cmVhbS1odHRwL2xpYi9jYXBhYmlsaXR5LmpzIiwid2VicGFjazovL3lhbmRleC1tdXNpYy1kb3dubG9hZGVyLy4vbm9kZV9tb2R1bGVzL3N0cmVhbS1odHRwL2xpYi9yZXF1ZXN0LmpzIiwid2VicGFjazovL3lhbmRleC1tdXNpYy1kb3dubG9hZGVyLy4vbm9kZV9tb2R1bGVzL3N0cmVhbS1odHRwL2xpYi9yZXNwb25zZS5qcyIsIndlYnBhY2s6Ly95YW5kZXgtbXVzaWMtZG93bmxvYWRlci8uL25vZGVfbW9kdWxlcy9zdHJpbmdfZGVjb2Rlci9saWIvc3RyaW5nX2RlY29kZXIuanMiLCJ3ZWJwYWNrOi8veWFuZGV4LW11c2ljLWRvd25sb2FkZXIvLi9ub2RlX21vZHVsZXMvc3RyaW5nX2RlY29kZXIvbm9kZV9tb2R1bGVzL3NhZmUtYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovL3lhbmRleC1tdXNpYy1kb3dubG9hZGVyLy4vc3JjL2JhY2tncm91bmQvaW5kZXgudHMiLCJ3ZWJwYWNrOi8veWFuZGV4LW11c2ljLWRvd25sb2FkZXIvLi9zcmMvYmFja2dyb3VuZC9pbnRlcmZhY2VzL2luZGV4LnRzIiwid2VicGFjazovL3lhbmRleC1tdXNpYy1kb3dubG9hZGVyLy4vc3JjL2JhY2tncm91bmQvc2VydmljZXMvZG93bmxvYWQtbWFuYWdlci9pbmRleC50cyIsIndlYnBhY2s6Ly95YW5kZXgtbXVzaWMtZG93bmxvYWRlci8uL3NyYy9iYWNrZ3JvdW5kL3NlcnZpY2VzL2Rvd25sb2FkLW1hbmFnZXIvaW50ZXJmYWNlcy9pbmRleC50cyIsIndlYnBhY2s6Ly95YW5kZXgtbXVzaWMtZG93bmxvYWRlci8uL3NyYy9iYWNrZ3JvdW5kL3NlcnZpY2VzL2lkMy10YWctd3JpdGVyL2luZGV4LnRzIiwid2VicGFjazovL3lhbmRleC1tdXNpYy1kb3dubG9hZGVyLy4vc3JjL2JhY2tncm91bmQvc2VydmljZXMvaWQzLXRhZy13cml0ZXIvaXNvNjM5MS10by1pc282MzkyLnRzIiwid2VicGFjazovL3lhbmRleC1tdXNpYy1kb3dubG9hZGVyLy4vc3JjL2JhY2tncm91bmQvc2VydmljZXMvdXNlci1zZXR0aW5ncy9pbmRleC50cyIsIndlYnBhY2s6Ly95YW5kZXgtbXVzaWMtZG93bmxvYWRlci8uL3NyYy9iYWNrZ3JvdW5kL3NlcnZpY2VzL3lhbmRleC1tdXNpYy1hcGkvaW5kZXgudHMiLCJ3ZWJwYWNrOi8veWFuZGV4LW11c2ljLWRvd25sb2FkZXIvLi9ub2RlX21vZHVsZXMvdXJsL25vZGVfbW9kdWxlcy9wdW55Y29kZS9wdW55Y29kZS5qcyIsIndlYnBhY2s6Ly95YW5kZXgtbXVzaWMtZG93bmxvYWRlci8uL25vZGVfbW9kdWxlcy91cmwvdXJsLmpzIiwid2VicGFjazovL3lhbmRleC1tdXNpYy1kb3dubG9hZGVyLy4vbm9kZV9tb2R1bGVzL3VybC91dGlsLmpzIiwid2VicGFjazovL3lhbmRleC1tdXNpYy1kb3dubG9hZGVyLy4vbm9kZV9tb2R1bGVzL3V0aWwtZGVwcmVjYXRlL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8veWFuZGV4LW11c2ljLWRvd25sb2FkZXIvLi9ub2RlX21vZHVsZXMveHRlbmQvaW1tdXRhYmxlLmpzIiwid2VicGFjazovL3lhbmRleC1tdXNpYy1kb3dubG9hZGVyL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3lhbmRleC1tdXNpYy1kb3dubG9hZGVyL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8veWFuZGV4LW11c2ljLWRvd25sb2FkZXIvd2VicGFjay9ydW50aW1lL25vZGUgbW9kdWxlIGRlY29yYXRvciIsIndlYnBhY2s6Ly95YW5kZXgtbXVzaWMtZG93bmxvYWRlci93ZWJwYWNrL3N0YXJ0dXAiXSwibmFtZXMiOlsiZXhwb3J0cyIsImJ5dGVMZW5ndGgiLCJiNjQiLCJsZW5zIiwiZ2V0TGVucyIsInZhbGlkTGVuIiwicGxhY2VIb2xkZXJzTGVuIiwidG9CeXRlQXJyYXkiLCJ0bXAiLCJpIiwiYXJyIiwiQXJyIiwiX2J5dGVMZW5ndGgiLCJjdXJCeXRlIiwibGVuIiwicmV2TG9va3VwIiwiY2hhckNvZGVBdCIsImZyb21CeXRlQXJyYXkiLCJ1aW50OCIsImxlbmd0aCIsImV4dHJhQnl0ZXMiLCJwYXJ0cyIsIm1heENodW5rTGVuZ3RoIiwibGVuMiIsInB1c2giLCJlbmNvZGVDaHVuayIsImxvb2t1cCIsImpvaW4iLCJVaW50OEFycmF5IiwiQXJyYXkiLCJjb2RlIiwiRXJyb3IiLCJpbmRleE9mIiwic3RhcnQiLCJlbmQiLCJudW0iLCJvdXRwdXQiLCJtb2R1bGUiLCJhIiwiZSIsIlN0cmluZyIsInNwbGl0IiwibWFwIiwibyIsInUiLCJ0IiwiVWludDE2QXJyYXkiLCJidWZmZXIiLCJzZXQiLCJwcm90b3R5cGUiLCJ0aGlzIiwiYXJyYXlCdWZmZXIiLCJwYWRkaW5nIiwiZnJhbWVzIiwidXJsIiwiX3NldEludGVnZXJGcmFtZSIsInBhcnNlSW50IiwibmFtZSIsInZhbHVlIiwic2l6ZSIsInRvU3RyaW5nIiwiX3NldFN0cmluZ0ZyYW1lIiwiX3NldFBpY3R1cmVGcmFtZSIsInIiLCJuIiwicyIsImMiLCJwaWN0dXJlVHlwZSIsIm1pbWVUeXBlIiwidXNlVW5pY29kZUVuY29kaW5nIiwiZGVzY3JpcHRpb24iLCJfc2V0THlyaWNzRnJhbWUiLCJsYW5ndWFnZSIsIl9zZXRDb21tZW50RnJhbWUiLCJfc2V0UHJpdmF0ZUZyYW1lIiwiaWQiLCJfc2V0VXNlclN0cmluZ0ZyYW1lIiwiX3NldFVybExpbmtGcmFtZSIsInNldEZyYW1lIiwiaXNBcnJheSIsIm1hdGNoIiwibHlyaWNzIiwidHlwZSIsImRhdGEiLCJ0ZXh0IiwicmVtb3ZlVGFnIiwic3ViYXJyYXkiLCJhZGRUYWciLCJyZWR1Y2UiLCJBcnJheUJ1ZmZlciIsImZvckVhY2giLCJjb25jYXQiLCJnZXRCbG9iIiwiQmxvYiIsImdldFVSTCIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZVVSTCIsInJldm9rZU9iamVjdFVSTCIsImJhc2U2NCIsImllZWU3NTQiLCJjdXN0b21JbnNwZWN0U3ltYm9sIiwiU3ltYm9sIiwiQnVmZmVyIiwiU2xvd0J1ZmZlciIsImFsbG9jIiwiSU5TUEVDVF9NQVhfQllURVMiLCJLX01BWF9MRU5HVEgiLCJjcmVhdGVCdWZmZXIiLCJSYW5nZUVycm9yIiwiYnVmIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJhcmciLCJlbmNvZGluZ09yT2Zmc2V0IiwiVHlwZUVycm9yIiwiYWxsb2NVbnNhZmUiLCJmcm9tIiwic3RyaW5nIiwiZW5jb2RpbmciLCJpc0VuY29kaW5nIiwiYWN0dWFsIiwid3JpdGUiLCJzbGljZSIsImZyb21TdHJpbmciLCJpc1ZpZXciLCJhcnJheVZpZXciLCJpc0luc3RhbmNlIiwiY29weSIsImZyb21BcnJheUJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJmcm9tQXJyYXlMaWtlIiwiZnJvbUFycmF5VmlldyIsIlNoYXJlZEFycmF5QnVmZmVyIiwidmFsdWVPZiIsImIiLCJvYmoiLCJpc0J1ZmZlciIsImNoZWNrZWQiLCJ1bmRlZmluZWQiLCJudW1iZXJJc05hTiIsImZyb21PYmplY3QiLCJ0b1ByaW1pdGl2ZSIsImFzc2VydFNpemUiLCJhcnJheSIsIm11c3RNYXRjaCIsImFyZ3VtZW50cyIsImxvd2VyZWRDYXNlIiwidXRmOFRvQnl0ZXMiLCJiYXNlNjRUb0J5dGVzIiwidG9Mb3dlckNhc2UiLCJzbG93VG9TdHJpbmciLCJoZXhTbGljZSIsInV0ZjhTbGljZSIsImFzY2lpU2xpY2UiLCJsYXRpbjFTbGljZSIsImJhc2U2NFNsaWNlIiwidXRmMTZsZVNsaWNlIiwic3dhcCIsIm0iLCJiaWRpcmVjdGlvbmFsSW5kZXhPZiIsInZhbCIsImRpciIsImFycmF5SW5kZXhPZiIsImNhbGwiLCJsYXN0SW5kZXhPZiIsImluZGV4U2l6ZSIsImFyckxlbmd0aCIsInZhbExlbmd0aCIsInJlYWQiLCJyZWFkVUludDE2QkUiLCJmb3VuZEluZGV4IiwiZm91bmQiLCJqIiwiaGV4V3JpdGUiLCJvZmZzZXQiLCJOdW1iZXIiLCJyZW1haW5pbmciLCJzdHJMZW4iLCJwYXJzZWQiLCJzdWJzdHIiLCJ1dGY4V3JpdGUiLCJibGl0QnVmZmVyIiwiYXNjaWlXcml0ZSIsInN0ciIsImJ5dGVBcnJheSIsImFzY2lpVG9CeXRlcyIsImJhc2U2NFdyaXRlIiwidWNzMldyaXRlIiwidW5pdHMiLCJoaSIsImxvIiwidXRmMTZsZVRvQnl0ZXMiLCJNYXRoIiwibWluIiwicmVzIiwiZmlyc3RCeXRlIiwiY29kZVBvaW50IiwiYnl0ZXNQZXJTZXF1ZW5jZSIsInNlY29uZEJ5dGUiLCJ0aGlyZEJ5dGUiLCJmb3VydGhCeXRlIiwidGVtcENvZGVQb2ludCIsImNvZGVQb2ludHMiLCJNQVhfQVJHVU1FTlRTX0xFTkdUSCIsImZyb21DaGFyQ29kZSIsImFwcGx5IiwiZGVjb2RlQ29kZVBvaW50c0FycmF5Iiwia01heExlbmd0aCIsIlRZUEVEX0FSUkFZX1NVUFBPUlQiLCJwcm90byIsImZvbyIsInR5cGVkQXJyYXlTdXBwb3J0IiwiY29uc29sZSIsImVycm9yIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwicG9vbFNpemUiLCJmaWxsIiwiYWxsb2NVbnNhZmVTbG93IiwiX2lzQnVmZmVyIiwiY29tcGFyZSIsIngiLCJ5IiwibGlzdCIsInBvcyIsInN3YXAxNiIsInN3YXAzMiIsInN3YXA2NCIsInRvTG9jYWxlU3RyaW5nIiwiZXF1YWxzIiwiaW5zcGVjdCIsIm1heCIsInJlcGxhY2UiLCJ0cmltIiwidGFyZ2V0IiwidGhpc1N0YXJ0IiwidGhpc0VuZCIsInRoaXNDb3B5IiwidGFyZ2V0Q29weSIsImluY2x1ZGVzIiwiaXNGaW5pdGUiLCJ0b0pTT04iLCJfYXJyIiwicmV0Iiwib3V0IiwiaGV4U2xpY2VMb29rdXBUYWJsZSIsImJ5dGVzIiwiY2hlY2tPZmZzZXQiLCJleHQiLCJjaGVja0ludCIsIndydEJpZ1VJbnQ2NExFIiwiY2hlY2tJbnRCSSIsIkJpZ0ludCIsIndydEJpZ1VJbnQ2NEJFIiwiY2hlY2tJRUVFNzU0Iiwid3JpdGVGbG9hdCIsImxpdHRsZUVuZGlhbiIsIm5vQXNzZXJ0Iiwid3JpdGVEb3VibGUiLCJuZXdCdWYiLCJyZWFkVWludExFIiwicmVhZFVJbnRMRSIsIm11bCIsInJlYWRVaW50QkUiLCJyZWFkVUludEJFIiwicmVhZFVpbnQ4IiwicmVhZFVJbnQ4IiwicmVhZFVpbnQxNkxFIiwicmVhZFVJbnQxNkxFIiwicmVhZFVpbnQxNkJFIiwicmVhZFVpbnQzMkxFIiwicmVhZFVJbnQzMkxFIiwicmVhZFVpbnQzMkJFIiwicmVhZFVJbnQzMkJFIiwicmVhZEJpZ1VJbnQ2NExFIiwiZGVmaW5lQmlnSW50TWV0aG9kIiwidmFsaWRhdGVOdW1iZXIiLCJmaXJzdCIsImxhc3QiLCJib3VuZHNFcnJvciIsInJlYWRCaWdVSW50NjRCRSIsInJlYWRJbnRMRSIsInBvdyIsInJlYWRJbnRCRSIsInJlYWRJbnQ4IiwicmVhZEludDE2TEUiLCJyZWFkSW50MTZCRSIsInJlYWRJbnQzMkxFIiwicmVhZEludDMyQkUiLCJyZWFkQmlnSW50NjRMRSIsInJlYWRCaWdJbnQ2NEJFIiwicmVhZEZsb2F0TEUiLCJyZWFkRmxvYXRCRSIsInJlYWREb3VibGVMRSIsInJlYWREb3VibGVCRSIsIndyaXRlVWludExFIiwid3JpdGVVSW50TEUiLCJ3cml0ZVVpbnRCRSIsIndyaXRlVUludEJFIiwid3JpdGVVaW50OCIsIndyaXRlVUludDgiLCJ3cml0ZVVpbnQxNkxFIiwid3JpdGVVSW50MTZMRSIsIndyaXRlVWludDE2QkUiLCJ3cml0ZVVJbnQxNkJFIiwid3JpdGVVaW50MzJMRSIsIndyaXRlVUludDMyTEUiLCJ3cml0ZVVpbnQzMkJFIiwid3JpdGVVSW50MzJCRSIsIndyaXRlQmlnVUludDY0TEUiLCJ3cml0ZUJpZ1VJbnQ2NEJFIiwid3JpdGVJbnRMRSIsImxpbWl0Iiwic3ViIiwid3JpdGVJbnRCRSIsIndyaXRlSW50OCIsIndyaXRlSW50MTZMRSIsIndyaXRlSW50MTZCRSIsIndyaXRlSW50MzJMRSIsIndyaXRlSW50MzJCRSIsIndyaXRlQmlnSW50NjRMRSIsIndyaXRlQmlnSW50NjRCRSIsIndyaXRlRmxvYXRMRSIsIndyaXRlRmxvYXRCRSIsIndyaXRlRG91YmxlTEUiLCJ3cml0ZURvdWJsZUJFIiwidGFyZ2V0U3RhcnQiLCJjb3B5V2l0aGluIiwiZXJyb3JzIiwiRSIsInN5bSIsImdldE1lc3NhZ2UiLCJCYXNlIiwic3VwZXIiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsInN0YWNrIiwibWVzc2FnZSIsImFkZE51bWVyaWNhbFNlcGFyYXRvciIsInJhbmdlIiwiRVJSX09VVF9PRl9SQU5HRSIsImNoZWNrQm91bmRzIiwiRVJSX0lOVkFMSURfQVJHX1RZUEUiLCJmbG9vciIsIkVSUl9CVUZGRVJfT1VUX09GX0JPVU5EUyIsImlucHV0IiwibXNnIiwicmVjZWl2ZWQiLCJpc0ludGVnZXIiLCJhYnMiLCJJTlZBTElEX0JBU0U2NF9SRSIsIkluZmluaXR5IiwibGVhZFN1cnJvZ2F0ZSIsImJhc2U2NGNsZWFuIiwic3JjIiwiZHN0IiwiY29uc3RydWN0b3IiLCJhbHBoYWJldCIsInRhYmxlIiwiaTE2IiwiZm4iLCJCdWZmZXJCaWdJbnROb3REZWZpbmVkIiwiY2hhcmVuYyIsInV0ZjgiLCJzdHJpbmdUb0J5dGVzIiwiYmluIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJieXRlc1RvU3RyaW5nIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZXNjYXBlIiwiYmFzZTY0bWFwIiwiY3J5cHQiLCJyb3RsIiwicm90ciIsImVuZGlhbiIsInJhbmRvbUJ5dGVzIiwicmFuZG9tIiwiYnl0ZXNUb1dvcmRzIiwid29yZHMiLCJ3b3Jkc1RvQnl0ZXMiLCJieXRlc1RvSGV4IiwiaGV4IiwiaGV4VG9CeXRlcyIsImJ5dGVzVG9CYXNlNjQiLCJ0cmlwbGV0IiwiY2hhckF0IiwiaW1vZDQiLCJSZWZsZWN0T3duS2V5cyIsIlIiLCJSZWZsZWN0IiwiUmVmbGVjdEFwcGx5IiwicmVjZWl2ZXIiLCJhcmdzIiwiRnVuY3Rpb24iLCJvd25LZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIk51bWJlcklzTmFOIiwiaXNOYU4iLCJFdmVudEVtaXR0ZXIiLCJpbml0Iiwib25jZSIsImVtaXR0ZXIiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImVycm9yTGlzdGVuZXIiLCJlcnIiLCJyZW1vdmVMaXN0ZW5lciIsInJlc29sdmVyIiwiZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyIiwiaGFuZGxlciIsImZsYWdzIiwib24iLCJhZGRFcnJvckhhbmRsZXJJZkV2ZW50RW1pdHRlciIsIl9ldmVudHMiLCJfZXZlbnRzQ291bnQiLCJfbWF4TGlzdGVuZXJzIiwiZGVmYXVsdE1heExpc3RlbmVycyIsImNoZWNrTGlzdGVuZXIiLCJsaXN0ZW5lciIsIl9nZXRNYXhMaXN0ZW5lcnMiLCJ0aGF0IiwiX2FkZExpc3RlbmVyIiwicHJlcGVuZCIsImV2ZW50cyIsImV4aXN0aW5nIiwid2FybmluZyIsImNyZWF0ZSIsIm5ld0xpc3RlbmVyIiwiZW1pdCIsInVuc2hpZnQiLCJ3YXJuZWQiLCJ3IiwiY291bnQiLCJ3YXJuIiwib25jZVdyYXBwZXIiLCJmaXJlZCIsIndyYXBGbiIsIl9vbmNlV3JhcCIsInN0YXRlIiwid3JhcHBlZCIsImJpbmQiLCJfbGlzdGVuZXJzIiwidW53cmFwIiwiZXZsaXN0ZW5lciIsInVud3JhcExpc3RlbmVycyIsImFycmF5Q2xvbmUiLCJsaXN0ZW5lckNvdW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsIndyYXBMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJnZXRQcm90b3R5cGVPZiIsInNldE1heExpc3RlbmVycyIsImdldE1heExpc3RlbmVycyIsImRvRXJyb3IiLCJlciIsImNvbnRleHQiLCJsaXN0ZW5lcnMiLCJhZGRMaXN0ZW5lciIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJwb3NpdGlvbiIsIm9yaWdpbmFsTGlzdGVuZXIiLCJzaGlmdCIsImluZGV4IiwicG9wIiwic3BsaWNlT25lIiwib2ZmIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwia2V5Iiwia2V5cyIsInJhd0xpc3RlbmVycyIsImV2ZW50TmFtZXMiLCJodHRwIiwiaHR0cHMiLCJoYXNPd25Qcm9wZXJ0eSIsInZhbGlkYXRlUGFyYW1zIiwicGFyYW1zIiwicGFyc2UiLCJwcm90b2NvbCIsInJlcXVlc3QiLCJjYiIsImlzTEUiLCJtTGVuIiwibkJ5dGVzIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsIm5CaXRzIiwiZCIsIk5hTiIsInJ0IiwibG9nIiwiTE4yIiwiY3RvciIsInN1cGVyQ3RvciIsInN1cGVyXyIsIlRlbXBDdG9yIiwiaXNTbG93QnVmZmVyIiwibWQ1Iiwib3B0aW9ucyIsImwiLCJGRiIsIl9mZiIsIkdHIiwiX2dnIiwiSEgiLCJfaGgiLCJJSSIsIl9paSIsImFhIiwiYmIiLCJjYyIsImRkIiwiX2Jsb2Nrc2l6ZSIsIl9kaWdlc3RzaXplIiwiZGlnZXN0Ynl0ZXMiLCJhc0J5dGVzIiwiYXNTdHJpbmciLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwicHJvY2VzcyIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjdXJyZW50UXVldWUiLCJxdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsIm5vb3AiLCJuZXh0VGljayIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9uIiwidmVyc2lvbnMiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJ1bWFzayIsInByb3AiLCJxcyIsInNlcCIsImVxIiwicmVnZXhwIiwibWF4S2V5cyIsImtzdHIiLCJ2c3RyIiwiayIsInYiLCJpZHgiLCJzdHJpbmdpZnlQcmltaXRpdmUiLCJrcyIsImRlY29kZSIsImVuY29kZSIsInN0cmluZ2lmeSIsImNvZGVzIiwiY3JlYXRlRXJyb3JUeXBlIiwiTm9kZUVycm9yIiwiX0Jhc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJhcmcxIiwiYXJnMiIsImFyZzMiLCJfX3Byb3RvX18iLCJvbmVPZiIsImV4cGVjdGVkIiwidGhpbmciLCJkZXRlcm1pbmVyIiwic2VhcmNoIiwidGhpc19sZW4iLCJzdWJzdHJpbmciLCJlbmRzV2l0aCIsIm9iamVjdEtleXMiLCJEdXBsZXgiLCJSZWFkYWJsZSIsIldyaXRhYmxlIiwibWV0aG9kIiwiYWxsb3dIYWxmT3BlbiIsInJlYWRhYmxlIiwib25lbmQiLCJfd3JpdGFibGVTdGF0ZSIsImVuZGVkIiwib25FbmROVCIsInNlbGYiLCJoaWdoV2F0ZXJNYXJrIiwiZ2V0QnVmZmVyIiwiX3JlYWRhYmxlU3RhdGUiLCJkZXN0cm95ZWQiLCJQYXNzVGhyb3VnaCIsIlRyYW5zZm9ybSIsIl90cmFuc2Zvcm0iLCJjaHVuayIsIlJlYWRhYmxlU3RhdGUiLCJkZWJ1ZyIsIkVFbGlzdGVuZXJDb3VudCIsIlN0cmVhbSIsIk91clVpbnQ4QXJyYXkiLCJnIiwiZGVidWdVdGlsIiwiZGVidWdsb2ciLCJTdHJpbmdEZWNvZGVyIiwiY3JlYXRlUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yIiwiQnVmZmVyTGlzdCIsImRlc3Ryb3lJbXBsIiwiZ2V0SGlnaFdhdGVyTWFyayIsIl9yZXF1aXJlJGNvZGVzIiwiRVJSX1NUUkVBTV9QVVNIX0FGVEVSX0VPRiIsIkVSUl9NRVRIT0RfTk9UX0lNUExFTUVOVEVEIiwiRVJSX1NUUkVBTV9VTlNISUZUX0FGVEVSX0VORF9FVkVOVCIsImVycm9yT3JEZXN0cm95Iiwia1Byb3h5RXZlbnRzIiwic3RyZWFtIiwiaXNEdXBsZXgiLCJvYmplY3RNb2RlIiwicmVhZGFibGVPYmplY3RNb2RlIiwicGlwZXMiLCJwaXBlc0NvdW50IiwiZmxvd2luZyIsImVuZEVtaXR0ZWQiLCJyZWFkaW5nIiwic3luYyIsIm5lZWRSZWFkYWJsZSIsImVtaXR0ZWRSZWFkYWJsZSIsInJlYWRhYmxlTGlzdGVuaW5nIiwicmVzdW1lU2NoZWR1bGVkIiwicGF1c2VkIiwiZW1pdENsb3NlIiwiYXV0b0Rlc3Ryb3kiLCJkZWZhdWx0RW5jb2RpbmciLCJhd2FpdERyYWluIiwicmVhZGluZ01vcmUiLCJkZWNvZGVyIiwiX3JlYWQiLCJkZXN0cm95IiwiX2Rlc3Ryb3kiLCJyZWFkYWJsZUFkZENodW5rIiwiYWRkVG9Gcm9udCIsInNraXBDaHVua0NoZWNrIiwiZW1pdFJlYWRhYmxlIiwiZW1pdFJlYWRhYmxlXyIsIm9uRW9mQ2h1bmsiLCJjaHVua0ludmFsaWQiLCJfdWludDhBcnJheVRvQnVmZmVyIiwiYWRkQ2h1bmsiLCJtYXliZVJlYWRNb3JlIiwiX3VuZGVzdHJveSIsInVuZGVzdHJveSIsImlzUGF1c2VkIiwic2V0RW5jb2RpbmciLCJlbmMiLCJwIiwiaGVhZCIsImNvbnRlbnQiLCJuZXh0IiwiY2xlYXIiLCJNQVhfSFdNIiwiaG93TXVjaFRvUmVhZCIsImNvbXB1dGVOZXdIaWdoV2F0ZXJNYXJrIiwiZmxvdyIsIm1heWJlUmVhZE1vcmVfIiwidXBkYXRlUmVhZGFibGVMaXN0ZW5pbmciLCJyZXN1bWUiLCJuUmVhZGluZ05leHRUaWNrIiwicmVzdW1lXyIsImZyb21MaXN0IiwiY29uc3VtZSIsImVuZFJlYWRhYmxlIiwiZW5kUmVhZGFibGVOVCIsIndTdGF0ZSIsImZpbmlzaGVkIiwieHMiLCJuT3JpZyIsImRvUmVhZCIsInBpcGUiLCJkZXN0IiwicGlwZU9wdHMiLCJlbmRGbiIsInN0ZG91dCIsInN0ZGVyciIsInVucGlwZSIsIm9udW5waXBlIiwidW5waXBlSW5mbyIsImhhc1VucGlwZWQiLCJvbmNsb3NlIiwib25maW5pc2giLCJvbmRyYWluIiwib25lcnJvciIsIm9uZGF0YSIsImNsZWFuZWRVcCIsIm5lZWREcmFpbiIsInBpcGVPbkRyYWluIiwicGF1c2UiLCJldmVudCIsImRlc3RzIiwic3BsaWNlIiwiZXYiLCJ3cmFwIiwiX3RoaXMiLCJhc3luY0l0ZXJhdG9yIiwiX2Zyb21MaXN0IiwiaXRlcmFibGUiLCJvcHRzIiwiRVJSX01VTFRJUExFX0NBTExCQUNLIiwiRVJSX1RSQU5TRk9STV9BTFJFQURZX1RSQU5TRk9STUlORyIsIkVSUl9UUkFOU0ZPUk1fV0lUSF9MRU5HVEhfMCIsImFmdGVyVHJhbnNmb3JtIiwidHMiLCJfdHJhbnNmb3JtU3RhdGUiLCJ0cmFuc2Zvcm1pbmciLCJ3cml0ZWNiIiwid3JpdGVjaHVuayIsInJzIiwibmVlZFRyYW5zZm9ybSIsIndyaXRlZW5jb2RpbmciLCJ0cmFuc2Zvcm0iLCJmbHVzaCIsIl9mbHVzaCIsInByZWZpbmlzaCIsImRvbmUiLCJfd3JpdGUiLCJlcnIyIiwiQ29ya2VkUmVxdWVzdCIsImVudHJ5IiwiZmluaXNoIiwiY29ya1JlcSIsImNhbGxiYWNrIiwicGVuZGluZ2NiIiwib25Db3JrZWRGaW5pc2giLCJjb3JrZWRSZXF1ZXN0c0ZyZWUiLCJXcml0YWJsZVN0YXRlIiwicmVhbEhhc0luc3RhbmNlIiwiaW50ZXJuYWxVdGlsIiwiZGVwcmVjYXRlIiwiRVJSX1NUUkVBTV9DQU5OT1RfUElQRSIsIkVSUl9TVFJFQU1fREVTVFJPWUVEIiwiRVJSX1NUUkVBTV9OVUxMX1ZBTFVFUyIsIkVSUl9TVFJFQU1fV1JJVEVfQUZURVJfRU5EIiwiRVJSX1VOS05PV05fRU5DT0RJTkciLCJub3AiLCJ3cml0YWJsZU9iamVjdE1vZGUiLCJmaW5hbENhbGxlZCIsImVuZGluZyIsIm5vRGVjb2RlIiwiZGVjb2RlU3RyaW5ncyIsIndyaXRpbmciLCJjb3JrZWQiLCJidWZmZXJQcm9jZXNzaW5nIiwib253cml0ZSIsIndyaXRlbGVuIiwib253cml0ZVN0YXRlVXBkYXRlIiwiZmluaXNoTWF5YmUiLCJlcnJvckVtaXR0ZWQiLCJvbndyaXRlRXJyb3IiLCJuZWVkRmluaXNoIiwiYnVmZmVyZWRSZXF1ZXN0IiwiY2xlYXJCdWZmZXIiLCJhZnRlcldyaXRlIiwibGFzdEJ1ZmZlcmVkUmVxdWVzdCIsInByZWZpbmlzaGVkIiwiYnVmZmVyZWRSZXF1ZXN0Q291bnQiLCJ3cml0ZXYiLCJfd3JpdGV2IiwiZmluYWwiLCJfZmluYWwiLCJkb1dyaXRlIiwib253cml0ZURyYWluIiwiaG9sZGVyIiwiYWxsQnVmZmVycyIsImlzQnVmIiwiY2FsbEZpbmFsIiwibmVlZCIsInJTdGF0ZSIsImN1cnJlbnQiLCJfIiwiaGFzSW5zdGFuY2UiLCJvYmplY3QiLCJ3cml0ZUFmdGVyRW5kIiwidmFsaWRDaHVuayIsIm5ld0NodW5rIiwiZGVjb2RlQ2h1bmsiLCJ3cml0ZU9yQnVmZmVyIiwiY29yayIsInVuY29yayIsInNldERlZmF1bHRFbmNvZGluZyIsImVuZFdyaXRhYmxlIiwiX09iamVjdCRzZXRQcm90b3R5cGVPIiwiX2RlZmluZVByb3BlcnR5Iiwia0xhc3RSZXNvbHZlIiwia0xhc3RSZWplY3QiLCJrRXJyb3IiLCJrRW5kZWQiLCJrTGFzdFByb21pc2UiLCJrSGFuZGxlUHJvbWlzZSIsImtTdHJlYW0iLCJjcmVhdGVJdGVyUmVzdWx0IiwicmVhZEFuZFJlc29sdmUiLCJpdGVyIiwib25SZWFkYWJsZSIsIkFzeW5jSXRlcmF0b3JQcm90b3R5cGUiLCJSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3JQcm90b3R5cGUiLCJwcm9taXNlIiwibGFzdFByb21pc2UiLCJ0aGVuIiwid3JhcEZvck5leHQiLCJfdGhpczIiLCJfT2JqZWN0JGNyZWF0ZSIsIml0ZXJhdG9yIiwiZW51bWVyYWJsZU9ubHkiLCJzeW1ib2xzIiwiZmlsdGVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJjdXN0b20iLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX2NsYXNzQ2FsbENoZWNrIiwidGFpbCIsInByb3RvUHJvcHMiLCJoYXNTdHJpbmdzIiwiX2dldFN0cmluZyIsIl9nZXRCdWZmZXIiLCJuYiIsInNvdXJjZSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiX29iamVjdFNwcmVhZCIsImRlcHRoIiwiY3VzdG9tSW5zcGVjdCIsImVtaXRFcnJvckFuZENsb3NlTlQiLCJlbWl0RXJyb3JOVCIsImVtaXRDbG9zZU5UIiwicmVhZGFibGVEZXN0cm95ZWQiLCJ3cml0YWJsZURlc3Ryb3llZCIsIkVSUl9TVFJFQU1fUFJFTUFUVVJFX0NMT1NFIiwiZW9zIiwiY2FsbGVkIiwiX2xlbiIsIl9rZXkiLCJvbmxlZ2FjeWZpbmlzaCIsIndyaXRhYmxlRW5kZWQiLCJyZWFkYWJsZUVuZGVkIiwib25yZXF1ZXN0IiwicmVxIiwic2V0SGVhZGVyIiwiYWJvcnQiLCJpc1JlcXVlc3QiLCJFUlJfTUlTU0lOR19BUkdTIiwiZGVzdHJveWVyIiwiY2xvc2VkIiwidG8iLCJwb3BDYWxsYmFjayIsInN0cmVhbXMiLCJkZXN0cm95cyIsIkVSUl9JTlZBTElEX09QVF9WQUxVRSIsImR1cGxleEtleSIsImh3bSIsImhpZ2hXYXRlck1hcmtGcm9tIiwicGlwZWxpbmUiLCJDbGllbnRSZXF1ZXN0IiwicmVzcG9uc2UiLCJleHRlbmQiLCJzdGF0dXNDb2RlcyIsImRlZmF1bHRQcm90b2NvbCIsImxvY2F0aW9uIiwiaG9zdCIsImhvc3RuYW1lIiwicG9ydCIsInBhdGgiLCJ0b1VwcGVyQ2FzZSIsImhlYWRlcnMiLCJJbmNvbWluZ01lc3NhZ2UiLCJBZ2VudCIsImRlZmF1bHRNYXhTb2NrZXRzIiwiZ2xvYmFsQWdlbnQiLCJTVEFUVVNfQ09ERVMiLCJNRVRIT0RTIiwieGhyIiwiZ2V0WEhSIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwiWERvbWFpblJlcXVlc3QiLCJjaGVja1R5cGVTdXBwb3J0IiwicmVzcG9uc2VUeXBlIiwiaXNGdW5jdGlvbiIsImZldGNoIiwiUmVhZGFibGVTdHJlYW0iLCJ3cml0YWJsZVN0cmVhbSIsIldyaXRhYmxlU3RyZWFtIiwiYWJvcnRDb250cm9sbGVyIiwiQWJvcnRDb250cm9sbGVyIiwiYXJyYXlidWZmZXIiLCJtc3N0cmVhbSIsIm1vemNodW5rZWRhcnJheWJ1ZmZlciIsIm92ZXJyaWRlTWltZVR5cGUiLCJjYXBhYmlsaXR5IiwiaW5oZXJpdHMiLCJyU3RhdGVzIiwicmVhZHlTdGF0ZXMiLCJwcmVmZXJCaW5hcnkiLCJfb3B0cyIsIl9ib2R5IiwiX2hlYWRlcnMiLCJhdXRoIiwidXNlRmV0Y2giLCJtb2RlIiwiX21vZGUiLCJkZWNpZGVNb2RlIiwiX2ZldGNoVGltZXIiLCJfc29ja2V0VGltZW91dCIsIl9zb2NrZXRUaW1lciIsIl9vbkZpbmlzaCIsImxvd2VyTmFtZSIsInVuc2FmZUhlYWRlcnMiLCJnZXRIZWFkZXIiLCJoZWFkZXIiLCJyZW1vdmVIZWFkZXIiLCJfZGVzdHJveWVkIiwiaGVhZGVyc09iaiIsImJvZHkiLCJoZWFkZXJzTGlzdCIsImtleU5hbWUiLCJzaWduYWwiLCJjb250cm9sbGVyIiwiX2ZldGNoQWJvcnRDb250cm9sbGVyIiwicmVxdWVzdFRpbWVvdXQiLCJjcmVkZW50aWFscyIsIndpdGhDcmVkZW50aWFscyIsIl9mZXRjaFJlc3BvbnNlIiwiX3Jlc2V0VGltZXJzIiwiX2Nvbm5lY3QiLCJyZWFzb24iLCJfeGhyIiwib250aW1lb3V0Iiwic2V0UmVxdWVzdEhlYWRlciIsIl9yZXNwb25zZSIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJMT0FESU5HIiwiRE9ORSIsIl9vblhIUlByb2dyZXNzIiwib25wcm9ncmVzcyIsInNlbmQiLCJzdGF0dXMiLCJzdGF0dXNWYWxpZCIsImZsdXNoSGVhZGVycyIsInNldE5vRGVsYXkiLCJzZXRTb2NrZXRLZWVwQWxpdmUiLCJVTlNFTlQiLCJPUEVORUQiLCJIRUFERVJTX1JFQ0VJVkVEIiwicmVzZXRUaW1lcnMiLCJyYXdIZWFkZXJzIiwidHJhaWxlcnMiLCJyYXdUcmFpbGVycyIsInN0YXR1c0NvZGUiLCJzdGF0dXNNZXNzYWdlIiwic3RhdHVzVGV4dCIsIl9yZXN1bWVGZXRjaCIsImNsb3NlIiwicGlwZVRvIiwiY2F0Y2giLCJyZWFkZXIiLCJnZXRSZWFkZXIiLCJyZXN1bHQiLCJfcG9zIiwicmVzcG9uc2VVUkwiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJtYXRjaGVzIiwiX2NoYXJzZXQiLCJjaGFyc2V0TWF0Y2giLCJyZXNwb25zZVRleHQiLCJuZXdEYXRhIiwiTVNTdHJlYW1SZWFkZXIiLCJvbmxvYWQiLCJyZWFkQXNBcnJheUJ1ZmZlciIsIm5lbmMiLCJyZXRyaWVkIiwiX25vcm1hbGl6ZUVuY29kaW5nIiwibm9ybWFsaXplRW5jb2RpbmciLCJ1dGYxNlRleHQiLCJ1dGYxNkVuZCIsImZpbGxMYXN0IiwidXRmOEZpbGxMYXN0IiwiYmFzZTY0VGV4dCIsImJhc2U2NEVuZCIsInNpbXBsZVdyaXRlIiwic2ltcGxlRW5kIiwibGFzdE5lZWQiLCJsYXN0VG90YWwiLCJsYXN0Q2hhciIsInV0ZjhDaGVja0J5dGUiLCJieXRlIiwidXRmOENoZWNrRXh0cmFCeXRlcyIsInRvdGFsIiwidXRmOENoZWNrSW5jb21wbGV0ZSIsImNvcHlQcm9wcyIsIlNhZmVCdWZmZXIiLCJCYWNrZ3JvdW5kQXBpU2VydmljZSIsInlhbmRleE11c2ljQXBpIiwidXNlclNldHRpbmdzIiwiZG93bmxvYWRNYW5hZ2VyIiwibG9jYWxlIiwieW1hIiwiWWFuZGV4TXVzaWNBUEkiLCJVc2VyU2V0dGluZ3MiLCJsb2FkIiwiRG93bmxvYWRNYW5hZ2VyIiwiY29uY3VycmVuY3kiLCJjb21wbGV0ZUV2ZW50Q2FsbGJhY2tfIiwiaXRlbSIsInByb2Nlc3NEb3dubG9hZEl0ZW1fIiwiZXJyb3JMaXN0ZW5lcnNfIiwidXJpIiwiQ29ubmVjdGlvbiIsIkFjY2VwdCIsInJhd0RhdGEiLCJjdXN0b21EYXRhIiwidHJhY2tJZCIsInRyYWNrIiwiZ2V0VHJhY2siLCJ0YWdXcml0ZXIiLCJUcmFja0lEM1RhZ1dyaXRlciIsInNldFRpdGxlIiwic2V0VHlwZSIsInNldER1cmF0aW9uIiwiZHVyYXRpb25NcyIsImFsYnVtcyIsInNldFBvc2l0aW9uSW5BbGJ1bSIsInRyYWNrUG9zaXRpb24iLCJzZXRWb2x1bWUiLCJ2b2x1bWUiLCJzZXRHZW5yZSIsImdlbnJlIiwic2V0QWxidW0iLCJhcnRpc3QiLCJhcnRpc3RzIiwieWVhciIsInNldEFydGlzdHMiLCJjb3ZlclVyaSIsImNvdmVyIiwiZG93bmxvYWRDb3Zlcl8iLCJnZXRDb3ZlckRvd25sb2FkTGluayIsImNvdmVyU2l6ZSIsInNldENvdmVyIiwibGFiZWxzIiwic2V0TGFiZWwiLCJseXJpYyIsInNldEx5cmljIiwiZnVsbEx5cmljcyIsInRleHRMYW5ndWFnZSIsInRyYWNrVXJsIiwiZ2V0VXJsIiwiY2hyb21lIiwiZG93bmxvYWRzIiwiZG93bmxvYWQiLCJmaWxlbmFtZSIsImRvd25sb2FkUGF0aCIsInJldm9rZVVybCIsImVtaXRFcnJvcl8iLCJyZXBsYWNlQWxsIiwiZm9sZGVyTmFtZSIsImVuY29kZUZpbGVuYW1lXyIsInRlbXBsYXRlIiwiYWxidW0iLCJfdHlwZSIsImF2YWlsYWJsZSIsImRvd25sb2FkVXJsIiwiZ2V0VHJhY2tEb3dubG9hZExpbmsiLCJnZW5lcmF0ZVRyYWNrRmlsZW5hbWVfIiwiZmlsZW5hbWVGb3JtYXQiLCJnZXRMb2NhbGUiLCJhbGJ1bUlkIiwiZ2V0QWxidW0iLCJ2b2x1bWVJbmRleCIsInZvbHVtZXMiLCJkb3dubG9hZEFsYnVtc0luU2VwYXJhdGVGb2xkZXIiLCJlbmNvZGVGb2xkZXJOYW1lXyIsIm93bmVyIiwia2luZCIsInBsYXlsaXN0IiwiZ2V0UGxheWxpc3QiLCJ0cmFja3MiLCJkb3dubG9hZFBsYXlsaXN0c0luU2VwYXJhdGVGb2xkZXIiLCJhcnRpc3RJZCIsImdldEFydGlzdCIsInRyYWNrSWRzIiwiZG93bmxvYWRBcnRpc3RzSW5TZXBhcmF0ZUZvbGRlciIsInJ1bnRpbWUiLCJvbkNvbm5lY3QiLCJicm93c2VyQWN0aW9uIiwic2V0SWNvbiIsInRhYklkIiwic2VuZGVyIiwidGFiIiwiYWRkRXZlbnRDYWxsYmFjayIsImRvd25sb2FkSXRlbSIsIkNocm9tZU1lc3NhZ2VUeXBlIiwiRE9XTkxPQURfRVZFTlQiLCJldmVudFR5cGUiLCJwb3N0TWVzc2FnZSIsInByb2dyZXNzRXZlbnRDYWxsYmFjayIsImludGVycnVwdGVkRXZlbnRDYWxsYmFjayIsImNvbXBsZXRlRXZlbnRDYWxsYmFjayIsImRvd25sb2FkRXJyb3JFdmVudENhbGxiYWNrIiwiRE9XTkxPQURfRVJST1JfRVZFTlQiLCJlcnJvckV2ZW50Q2FsbGJhY2siLCJFUlJPUl9FVkVOVCIsImJhY2tncm91bmRBcGkiLCJnZXRJbnN0YW5jZSIsIm9uTWVzc2FnZSIsIkFERF9ET1dOTE9BRF9MSVNURU5FUiIsIkFERF9FUlJPUl9MSVNURU5FUiIsIkRPV05MT0FEX1RSQUNLIiwiZG93bmxvYWRUcmFjayIsIkRPV05MT0FEX0FMQlVNIiwiZG93bmxvYWRBbGJ1bSIsIkRPV05MT0FEX1BMQVlMSVNUIiwiZG93bmxvYWRQbGF5bGlzdCIsIkRPV05MT0FEX0FSVElTVCIsImRvd25sb2FkQXJ0aXN0IiwiTElTVF9ET1dOTE9BRF9JVEVNUyIsIml0ZW1zIiwiSU5URVJSVVBUX0RPV05MT0FEIiwiaW50ZXJydXB0IiwiZG93bmxvYWRJdGVtSWQiLCJvbkRpc2Nvbm5lY3QiLCJsYXN0SWRfIiwibGlzdGVuZXJzXyIsImFkZCIsImludGVycnVwdGVkIiwicHJvZ3Jlc3MiLCJjb21wbGV0ZSIsImRvd25sb2FkUXVldWVfIiwicXVldWVQYXVzZWRfIiwiY29uY3VycmVuY3lfIiwiaW5Qcm9ncmVzc1NpemVfIiwidG90YWxCeXRlcyIsImNsb3NlQ29ubmVjdGlvbiIsImZpbmRJbmRleCIsImZpbmQiLCJEb3dubG9hZEl0ZW1TdGF0ZSIsIlBFTkRJTkciLCJzdGFydE1zIiwiRGF0ZSIsIm5vdyIsIklOX1BST0dSRVNTIiwiZW1pdF8iLCJkb3dubG9hZEJ1ZmZlcl8iLCJjdXIiLCJkb3dubG9hZGVkU2l6ZSIsIklOVEVSUlVQVEVEIiwiQ09NUExFVEUiLCJFUlJPUiIsInF1ZXVlUmVtb3ZlXyIsInF1ZXVlUHJvY2Vzc05leHRfIiwic29uZ0J1ZmZlciIsInNvbmdCdWZmZXJfIiwiaWQzV3JpdGVyXyIsImxhbmd1YWdlQ29udmVydGVyXyIsIklTTzYzOTFUb0lTTzYzOTJDb252ZXJ0ZXIiLCJjb252ZXJ0IiwiZHVyYXRpb24iLCJsYWJlbCIsIk1hcCIsImRlZmF1bHRMYW5ndWFnZSIsInRlc3QiLCJkZWZhdWx0TGFuZ3VhZ2VfIiwibGFuZyIsIm1heFF1ZXVlU2l6ZSIsInN0b3JhZ2UiLCJvbkNoYW5nZWQiLCJjaGFuZ2VzIiwibmV3VmFsdWUiLCJhdmFpbGFibGVMb2NhbGVzXyIsImxvY2FsZV8iLCJoZWFkZXJzXyIsImVuY29kZVVSSSIsImdldEhvc3RuYW1lIiwiSlNPTiIsImdldE9iamVjdCIsInVpZCIsInRyYWNrRG93bmxvYWRBcGlQYXRoIiwidHJhY2tEb3dubG9hZEluZm8iLCJmaWxlRG93bmxvYWRJbmZvIiwicm9vdCIsIm5vZGVUeXBlIiwiZnJlZUdsb2JhbCIsImdsb2JhbCIsIndpbmRvdyIsInB1bnljb2RlIiwibWF4SW50IiwiYmFzZSIsInJlZ2V4UHVueWNvZGUiLCJyZWdleE5vbkFTQ0lJIiwicmVnZXhTZXBhcmF0b3JzIiwic3RyaW5nRnJvbUNoYXJDb2RlIiwibWFwRG9tYWluIiwidWNzMmRlY29kZSIsImV4dHJhIiwiY291bnRlciIsInVjczJlbmNvZGUiLCJkaWdpdFRvQmFzaWMiLCJkaWdpdCIsImZsYWciLCJhZGFwdCIsImRlbHRhIiwibnVtUG9pbnRzIiwiZmlyc3RUaW1lIiwiYmFzZU1pbnVzVE1pbiIsImJhc2ljIiwib2xkaSIsImJhc2VNaW51c1QiLCJpbnB1dExlbmd0aCIsImJpYXMiLCJoYW5kbGVkQ1BDb3VudCIsImJhc2ljTGVuZ3RoIiwicSIsImN1cnJlbnRWYWx1ZSIsImhhbmRsZWRDUENvdW50UGx1c09uZSIsInFNaW51c1QiLCJ1dGlsIiwiVXJsIiwic2xhc2hlcyIsImhhc2giLCJxdWVyeSIsInBhdGhuYW1lIiwiaHJlZiIsInVybFBhcnNlIiwicmVsYXRpdmUiLCJyZXNvbHZlT2JqZWN0IiwiZm9ybWF0IiwiaXNTdHJpbmciLCJwcm90b2NvbFBhdHRlcm4iLCJwb3J0UGF0dGVybiIsInNpbXBsZVBhdGhQYXR0ZXJuIiwidW53aXNlIiwiYXV0b0VzY2FwZSIsIm5vbkhvc3RDaGFycyIsImhvc3RFbmRpbmdDaGFycyIsImhvc3RuYW1lUGFydFBhdHRlcm4iLCJob3N0bmFtZVBhcnRTdGFydCIsInVuc2FmZVByb3RvY29sIiwiaG9zdGxlc3NQcm90b2NvbCIsInNsYXNoZWRQcm90b2NvbCIsInF1ZXJ5c3RyaW5nIiwicGFyc2VRdWVyeVN0cmluZyIsInNsYXNoZXNEZW5vdGVIb3N0IiwiaXNPYmplY3QiLCJxdWVyeUluZGV4Iiwic3BsaXR0ZXIiLCJ1U3BsaXQiLCJyZXN0Iiwic2ltcGxlUGF0aCIsImV4ZWMiLCJsb3dlclByb3RvIiwiYXRTaWduIiwiaG9zdEVuZCIsImhlYyIsInBhcnNlSG9zdCIsImlwdjZIb3N0bmFtZSIsImhvc3RwYXJ0cyIsInBhcnQiLCJuZXdwYXJ0IiwidmFsaWRQYXJ0cyIsIm5vdEhvc3QiLCJiaXQiLCJ0b0FTQ0lJIiwiaCIsImFlIiwiZXNjIiwicW0iLCJyZWwiLCJ0a2V5cyIsInRrIiwidGtleSIsInJrZXlzIiwicmsiLCJya2V5IiwicmVsUGF0aCIsImlzU291cmNlQWJzIiwiaXNSZWxBYnMiLCJtdXN0RW5kQWJzIiwicmVtb3ZlQWxsRG90cyIsInNyY1BhdGgiLCJwc3ljaG90aWMiLCJpc051bGxPclVuZGVmaW5lZCIsImF1dGhJbkhvc3QiLCJpc051bGwiLCJoYXNUcmFpbGluZ1NsYXNoIiwidXAiLCJpc0Fic29sdXRlIiwiY29uZmlnIiwibG9jYWxTdG9yYWdlIiwidHJhY2UiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJsb2FkZWQiLCJfX3dlYnBhY2tfbW9kdWxl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UyxHQUVKbk8sRUFBSSxFQUFHQSxFQUFJeUksVUFBVS9ILE9BQVFWLElBQUssQ0FDdkMsSUFBSWcwQixFQUFTdnJCLFVBQVV6SSxHQUV2QixJQUFLLElBQUlnZCxLQUFPZ1gsRUFDUjFXLEVBQWUzVCxLQUFLcXFCLEVBQVFoWCxLQUM1QjdPLEVBQU82TyxHQUFPZ1gsRUFBT2hYLElBS2pDLE9BQU83TyxHQWZYLElBQUltUCxFQUFpQmhYLE9BQU85RCxVQUFVOGEsZ0IseUJDRGxDazBCLEVBQTJCLEdBRy9CLFNBQVNDLEVBQW9CQyxHQUU1QixJQUFJQyxFQUFlSCxFQUF5QkUsR0FDNUMsUUFBcUJ4cEMsSUFBakJ5cEMsRUFDSCxPQUFPQSxFQUFhcHlDLFFBR3JCLElBQUlxQyxFQUFTNHZDLEVBQXlCRSxHQUFZLENBQ2pEeHRDLEdBQUl3dEMsRUFDSkUsUUFBUSxFQUNScnlDLFFBQVMsSUFVVixPQU5Bc3lDLEVBQW9CSCxHQUFVL25DLEtBQUsvSCxFQUFPckMsUUFBU3FDLEVBQVFBLEVBQU9yQyxRQUFTa3lDLEdBRzNFN3ZDLEVBQU9nd0MsUUFBUyxFQUdUaHdDLEVBQU9yQyxRQ3hCZmt5QyxFQUFvQjVyQixFQUFJLFdBQ3ZCLEdBQTBCLGlCQUFmaXNCLFdBQXlCLE9BQU9BLFdBQzNDLElBQ0MsT0FBT3J2QyxNQUFRLElBQUkwVixTQUFTLGNBQWIsR0FDZCxNQUFPclcsR0FDUixHQUFzQixpQkFBWGdwQyxPQUFxQixPQUFPQSxRQUxqQixHQ0F4QjJHLEVBQW9CTSxJQUFPbndDLElBQzFCQSxFQUFPb3dDLE1BQVEsR0FDVnB3QyxFQUFPcXdDLFdBQVVyd0MsRUFBT3F3QyxTQUFXLElBQ2pDcndDLEdDQWtCNnZDLEVBQW9CLE8iLCJmaWxlIjoiYmFja2dyb3VuZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5leHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXlcbmV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXlcblxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcblxudmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpXG59XG5cbi8vIFN1cHBvcnQgZGVjb2RpbmcgVVJMLXNhZmUgYmFzZTY0IHN0cmluZ3MsIGFzIE5vZGUuanMgZG9lcy5cbi8vIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0I1VSTF9hcHBsaWNhdGlvbnNcbnJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxucmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG5cbmZ1bmN0aW9uIGdldExlbnMgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyBUcmltIG9mZiBleHRyYSBieXRlcyBhZnRlciBwbGFjZWhvbGRlciBieXRlcyBhcmUgZm91bmRcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmVhdGdhbW1pdC9iYXNlNjQtanMvaXNzdWVzLzQyXG4gIHZhciB2YWxpZExlbiA9IGI2NC5pbmRleE9mKCc9JylcbiAgaWYgKHZhbGlkTGVuID09PSAtMSkgdmFsaWRMZW4gPSBsZW5cblxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gdmFsaWRMZW4gPT09IGxlblxuICAgID8gMFxuICAgIDogNCAtICh2YWxpZExlbiAlIDQpXG5cbiAgcmV0dXJuIFt2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuXVxufVxuXG4vLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKGI2NCkge1xuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiBfYnl0ZUxlbmd0aCAoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSB7XG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuXG4gIHZhciBhcnIgPSBuZXcgQXJyKF9ieXRlTGVuZ3RoKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikpXG5cbiAgdmFyIGN1ckJ5dGUgPSAwXG5cbiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuICB2YXIgbGVuID0gcGxhY2VIb2xkZXJzTGVuID4gMFxuICAgID8gdmFsaWRMZW4gLSA0XG4gICAgOiB2YWxpZExlblxuXG4gIHZhciBpXG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfFxuICAgICAgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID1cbiAgICAgICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICtcbiAgICAgICgodWludDhbaSArIDFdIDw8IDgpICYgMHhGRjAwKSArXG4gICAgICAodWludDhbaSArIDJdICYgMHhGRilcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayh1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDJdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl0gK1xuICAgICAgJz09J1xuICAgIClcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAxMF0gK1xuICAgICAgbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICtcbiAgICAgICc9J1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIiwiIWZ1bmN0aW9uKGUsdCl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9dCgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUodCk6KGU9ZXx8c2VsZikuSUQzV3JpdGVyPXQoKX0odGhpcyxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGEoZSl7cmV0dXJuIFN0cmluZyhlKS5zcGxpdChcIlwiKS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGUuY2hhckNvZGVBdCgwKX0pfWZ1bmN0aW9uIG8oZSl7cmV0dXJuIG5ldyBVaW50OEFycmF5KGEoZSkpfWZ1bmN0aW9uIHUoZSl7dmFyIHQ9bmV3IFVpbnQ4QXJyYXkoMiplLmxlbmd0aCk7cmV0dXJuIG5ldyBVaW50MTZBcnJheSh0LmJ1ZmZlcikuc2V0KGEoZSkpLHR9cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGU9dC5wcm90b3R5cGU7ZnVuY3Rpb24gdChlKXtpZighKGUmJlwib2JqZWN0XCI9PXR5cGVvZiBlJiZcImJ5dGVMZW5ndGhcImluIGUpKXRocm93IG5ldyBFcnJvcihcIkZpcnN0IGFyZ3VtZW50IHNob3VsZCBiZSBhbiBpbnN0YW5jZSBvZiBBcnJheUJ1ZmZlciBvciBCdWZmZXJcIik7dGhpcy5hcnJheUJ1ZmZlcj1lLHRoaXMucGFkZGluZz00MDk2LHRoaXMuZnJhbWVzPVtdLHRoaXMudXJsPVwiXCJ9cmV0dXJuIGUuX3NldEludGVnZXJGcmFtZT1mdW5jdGlvbihlLHQpe3ZhciBhPXBhcnNlSW50KHQsMTApO3RoaXMuZnJhbWVzLnB1c2goe25hbWU6ZSx2YWx1ZTphLHNpemU6MTErYS50b1N0cmluZygpLmxlbmd0aH0pfSxlLl9zZXRTdHJpbmdGcmFtZT1mdW5jdGlvbihlLHQpe3ZhciBhPXQudG9TdHJpbmcoKTt0aGlzLmZyYW1lcy5wdXNoKHtuYW1lOmUsdmFsdWU6YSxzaXplOjEzKzIqYS5sZW5ndGh9KX0sZS5fc2V0UGljdHVyZUZyYW1lPWZ1bmN0aW9uKGUsdCxhLHIpe3ZhciBuLHMsaSxjPWZ1bmN0aW9uKGUpe2lmKCFlfHwhZS5sZW5ndGgpcmV0dXJuIG51bGw7aWYoMjU1PT09ZVswXSYmMjE2PT09ZVsxXSYmMjU1PT09ZVsyXSlyZXR1cm5cImltYWdlL2pwZWdcIjtpZigxMzc9PT1lWzBdJiY4MD09PWVbMV0mJjc4PT09ZVsyXSYmNzE9PT1lWzNdKXJldHVyblwiaW1hZ2UvcG5nXCI7aWYoNzE9PT1lWzBdJiY3Mz09PWVbMV0mJjcwPT09ZVsyXSlyZXR1cm5cImltYWdlL2dpZlwiO2lmKDg3PT09ZVs4XSYmNjk9PT1lWzldJiY2Nj09PWVbMTBdJiY4MD09PWVbMTFdKXJldHVyblwiaW1hZ2Uvd2VicFwiO3ZhciB0PTczPT09ZVswXSYmNzM9PT1lWzFdJiY0Mj09PWVbMl0mJjA9PT1lWzNdLGE9Nzc9PT1lWzBdJiY3Nz09PWVbMV0mJjA9PT1lWzJdJiY0Mj09PWVbM107cmV0dXJuIHR8fGE/XCJpbWFnZS90aWZmXCI6NjY9PT1lWzBdJiY3Nz09PWVbMV0/XCJpbWFnZS9ibXBcIjowPT09ZVswXSYmMD09PWVbMV0mJjE9PT1lWzJdJiYwPT09ZVszXT9cImltYWdlL3gtaWNvblwiOm51bGx9KG5ldyBVaW50OEFycmF5KHQpKSxvPWEudG9TdHJpbmcoKTtpZighYyl0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIHBpY3R1cmUgTUlNRSB0eXBlXCIpO2F8fChyPSExKSx0aGlzLmZyYW1lcy5wdXNoKHtuYW1lOlwiQVBJQ1wiLHZhbHVlOnQscGljdHVyZVR5cGU6ZSxtaW1lVHlwZTpjLHVzZVVuaWNvZGVFbmNvZGluZzpyLGRlc2NyaXB0aW9uOm8sc2l6ZToobj10LmJ5dGVMZW5ndGgscz1jLmxlbmd0aCxpPW8ubGVuZ3RoLDExK3MrMSsxKyhyPzIrMiooaSsxKTppKzEpK24pfSl9LGUuX3NldEx5cmljc0ZyYW1lPWZ1bmN0aW9uKGUsdCxhKXt2YXIgcixuLHM9ZS5zcGxpdChcIlwiKS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGUuY2hhckNvZGVBdCgwKX0pLGk9dC50b1N0cmluZygpLGM9YS50b1N0cmluZygpO3RoaXMuZnJhbWVzLnB1c2goe25hbWU6XCJVU0xUXCIsdmFsdWU6YyxsYW5ndWFnZTpzLGRlc2NyaXB0aW9uOmksc2l6ZToocj1pLmxlbmd0aCxuPWMubGVuZ3RoLDE2KzIqcisyKzIrMipuKX0pfSxlLl9zZXRDb21tZW50RnJhbWU9ZnVuY3Rpb24oZSx0LGEpe3ZhciByLG4scz1lLnNwbGl0KFwiXCIpLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gZS5jaGFyQ29kZUF0KDApfSksaT10LnRvU3RyaW5nKCksYz1hLnRvU3RyaW5nKCk7dGhpcy5mcmFtZXMucHVzaCh7bmFtZTpcIkNPTU1cIix2YWx1ZTpjLGxhbmd1YWdlOnMsZGVzY3JpcHRpb246aSxzaXplOihyPWkubGVuZ3RoLG49Yy5sZW5ndGgsMTYrMipyKzIrMisyKm4pfSl9LGUuX3NldFByaXZhdGVGcmFtZT1mdW5jdGlvbihlLHQpe3ZhciBhLHIsbj1lLnRvU3RyaW5nKCk7dGhpcy5mcmFtZXMucHVzaCh7bmFtZTpcIlBSSVZcIix2YWx1ZTp0LGlkOm4sc2l6ZTooYT1uLmxlbmd0aCxyPXQuYnl0ZUxlbmd0aCwxMCthKzErcil9KX0sZS5fc2V0VXNlclN0cmluZ0ZyYW1lPWZ1bmN0aW9uKGUsdCl7dmFyIGEscixuPWUudG9TdHJpbmcoKSxzPXQudG9TdHJpbmcoKTt0aGlzLmZyYW1lcy5wdXNoKHtuYW1lOlwiVFhYWFwiLGRlc2NyaXB0aW9uOm4sdmFsdWU6cyxzaXplOihhPW4ubGVuZ3RoLHI9cy5sZW5ndGgsMTMrMiphKzIrMisyKnIpfSl9LGUuX3NldFVybExpbmtGcmFtZT1mdW5jdGlvbihlLHQpe3ZhciBhPXQudG9TdHJpbmcoKTt0aGlzLmZyYW1lcy5wdXNoKHtuYW1lOmUsdmFsdWU6YSxzaXplOjEwK2EubGVuZ3RofSl9LGUuc2V0RnJhbWU9ZnVuY3Rpb24oZSx0KXtzd2l0Y2goZSl7Y2FzZVwiVFBFMVwiOmNhc2VcIlRDT01cIjpjYXNlXCJUQ09OXCI6aWYoIUFycmF5LmlzQXJyYXkodCkpdGhyb3cgbmV3IEVycm9yKGUrXCIgZnJhbWUgdmFsdWUgc2hvdWxkIGJlIGFuIGFycmF5IG9mIHN0cmluZ3NcIik7dmFyIGE9XCJUQ09OXCI9PT1lP1wiO1wiOlwiL1wiLHI9dC5qb2luKGEpO3RoaXMuX3NldFN0cmluZ0ZyYW1lKGUscik7YnJlYWs7Y2FzZVwiVExBTlwiOmNhc2VcIlRJVDFcIjpjYXNlXCJUSVQyXCI6Y2FzZVwiVElUM1wiOmNhc2VcIlRBTEJcIjpjYXNlXCJUUEUyXCI6Y2FzZVwiVFBFM1wiOmNhc2VcIlRQRTRcIjpjYXNlXCJUUkNLXCI6Y2FzZVwiVFBPU1wiOmNhc2VcIlRNRURcIjpjYXNlXCJUUFVCXCI6Y2FzZVwiVENPUFwiOmNhc2VcIlRLRVlcIjpjYXNlXCJURVhUXCI6Y2FzZVwiVFNSQ1wiOnRoaXMuX3NldFN0cmluZ0ZyYW1lKGUsdCk7YnJlYWs7Y2FzZVwiVEJQTVwiOmNhc2VcIlRMRU5cIjpjYXNlXCJUREFUXCI6Y2FzZVwiVFlFUlwiOnRoaXMuX3NldEludGVnZXJGcmFtZShlLHQpO2JyZWFrO2Nhc2VcIlVTTFRcIjppZih0Lmxhbmd1YWdlPXQubGFuZ3VhZ2V8fFwiZW5nXCIsIShcIm9iamVjdFwiPT10eXBlb2YgdCYmXCJkZXNjcmlwdGlvblwiaW4gdCYmXCJseXJpY3NcImluIHQpKXRocm93IG5ldyBFcnJvcihcIlVTTFQgZnJhbWUgdmFsdWUgc2hvdWxkIGJlIGFuIG9iamVjdCB3aXRoIGtleXMgZGVzY3JpcHRpb24gYW5kIGx5cmljc1wiKTtpZih0Lmxhbmd1YWdlJiYhdC5sYW5ndWFnZS5tYXRjaCgvW2Etel17M30vaSkpdGhyb3cgbmV3IEVycm9yKFwiTGFuZ3VhZ2UgbXVzdCBiZSBjb2RlZCBmb2xsb3dpbmcgdGhlIElTTyA2MzktMiBzdGFuZGFyZHNcIik7dGhpcy5fc2V0THlyaWNzRnJhbWUodC5sYW5ndWFnZSx0LmRlc2NyaXB0aW9uLHQubHlyaWNzKTticmVhaztjYXNlXCJBUElDXCI6aWYoIShcIm9iamVjdFwiPT10eXBlb2YgdCYmXCJ0eXBlXCJpbiB0JiZcImRhdGFcImluIHQmJlwiZGVzY3JpcHRpb25cImluIHQpKXRocm93IG5ldyBFcnJvcihcIkFQSUMgZnJhbWUgdmFsdWUgc2hvdWxkIGJlIGFuIG9iamVjdCB3aXRoIGtleXMgdHlwZSwgZGF0YSBhbmQgZGVzY3JpcHRpb25cIik7aWYodC50eXBlPDB8fDIwPHQudHlwZSl0aHJvdyBuZXcgRXJyb3IoXCJJbmNvcnJlY3QgQVBJQyBmcmFtZSBwaWN0dXJlIHR5cGVcIik7dGhpcy5fc2V0UGljdHVyZUZyYW1lKHQudHlwZSx0LmRhdGEsdC5kZXNjcmlwdGlvbiwhIXQudXNlVW5pY29kZUVuY29kaW5nKTticmVhaztjYXNlXCJUWFhYXCI6aWYoIShcIm9iamVjdFwiPT10eXBlb2YgdCYmXCJkZXNjcmlwdGlvblwiaW4gdCYmXCJ2YWx1ZVwiaW4gdCkpdGhyb3cgbmV3IEVycm9yKFwiVFhYWCBmcmFtZSB2YWx1ZSBzaG91bGQgYmUgYW4gb2JqZWN0IHdpdGgga2V5cyBkZXNjcmlwdGlvbiBhbmQgdmFsdWVcIik7dGhpcy5fc2V0VXNlclN0cmluZ0ZyYW1lKHQuZGVzY3JpcHRpb24sdC52YWx1ZSk7YnJlYWs7Y2FzZVwiV0NPTVwiOmNhc2VcIldDT1BcIjpjYXNlXCJXT0FGXCI6Y2FzZVwiV09BUlwiOmNhc2VcIldPQVNcIjpjYXNlXCJXT1JTXCI6Y2FzZVwiV1BBWVwiOmNhc2VcIldQVUJcIjp0aGlzLl9zZXRVcmxMaW5rRnJhbWUoZSx0KTticmVhaztjYXNlXCJDT01NXCI6aWYodC5sYW5ndWFnZT10Lmxhbmd1YWdlfHxcImVuZ1wiLCEoXCJvYmplY3RcIj09dHlwZW9mIHQmJlwiZGVzY3JpcHRpb25cImluIHQmJlwidGV4dFwiaW4gdCkpdGhyb3cgbmV3IEVycm9yKFwiQ09NTSBmcmFtZSB2YWx1ZSBzaG91bGQgYmUgYW4gb2JqZWN0IHdpdGgga2V5cyBkZXNjcmlwdGlvbiBhbmQgdGV4dFwiKTtpZih0Lmxhbmd1YWdlJiYhdC5sYW5ndWFnZS5tYXRjaCgvW2Etel17M30vaSkpdGhyb3cgbmV3IEVycm9yKFwiTGFuZ3VhZ2UgbXVzdCBiZSBjb2RlZCBmb2xsb3dpbmcgdGhlIElTTyA2MzktMiBzdGFuZGFyZHNcIik7dGhpcy5fc2V0Q29tbWVudEZyYW1lKHQubGFuZ3VhZ2UsdC5kZXNjcmlwdGlvbix0LnRleHQpO2JyZWFrO2Nhc2VcIlBSSVZcIjppZighKFwib2JqZWN0XCI9PXR5cGVvZiB0JiZcImlkXCJpbiB0JiZcImRhdGFcImluIHQpKXRocm93IG5ldyBFcnJvcihcIlBSSVYgZnJhbWUgdmFsdWUgc2hvdWxkIGJlIGFuIG9iamVjdCB3aXRoIGtleXMgaWQgYW5kIGRhdGFcIik7dGhpcy5fc2V0UHJpdmF0ZUZyYW1lKHQuaWQsdC5kYXRhKTticmVhaztkZWZhdWx0OnRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIGZyYW1lIFwiK2UpfXJldHVybiB0aGlzfSxlLnJlbW92ZVRhZz1mdW5jdGlvbigpe2lmKCEodGhpcy5hcnJheUJ1ZmZlci5ieXRlTGVuZ3RoPDEwKSl7dmFyIGUsdCxhPW5ldyBVaW50OEFycmF5KHRoaXMuYXJyYXlCdWZmZXIpLHI9YVszXSxuPSgoZT1bYVs2XSxhWzddLGFbOF0sYVs5XV0pWzBdPDwyMSkrKGVbMV08PDE0KSsoZVsyXTw8NykrZVszXSsxMDtpZighKDczIT09KHQ9YSlbMF18fDY4IT09dFsxXXx8NTEhPT10WzJdfHxyPDJ8fDQ8cikpdGhpcy5hcnJheUJ1ZmZlcj1uZXcgVWludDhBcnJheShhLnN1YmFycmF5KG4pKS5idWZmZXJ9fSxlLmFkZFRhZz1mdW5jdGlvbigpe3RoaXMucmVtb3ZlVGFnKCk7dmFyIGUsdCxyPVsyNTUsMjU0XSxhPTEwK3RoaXMuZnJhbWVzLnJlZHVjZShmdW5jdGlvbihlLHQpe3JldHVybiBlK3Quc2l6ZX0sMCkrdGhpcy5wYWRkaW5nLG49bmV3IEFycmF5QnVmZmVyKHRoaXMuYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCthKSxzPW5ldyBVaW50OEFycmF5KG4pLGk9MCxjPVtdO3JldHVybiBjPVs3Myw2OCw1MSwzXSxzLnNldChjLGkpLGkrPWMubGVuZ3RoLGkrKyxpKyssYz1bKGU9YS0xMCk+Pj4yMSYodD0xMjcpLGU+Pj4xNCZ0LGU+Pj43JnQsZSZ0XSxzLnNldChjLGkpLGkrPWMubGVuZ3RoLHRoaXMuZnJhbWVzLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHQsYTtzd2l0Y2goYz1vKGUubmFtZSkscy5zZXQoYyxpKSxpKz1jLmxlbmd0aCx0PWUuc2l6ZS0xMCxjPVt0Pj4+MjQmKGE9MjU1KSx0Pj4+MTYmYSx0Pj4+OCZhLHQmYV0scy5zZXQoYyxpKSxpKz1jLmxlbmd0aCxpKz0yLGUubmFtZSl7Y2FzZVwiV0NPTVwiOmNhc2VcIldDT1BcIjpjYXNlXCJXT0FGXCI6Y2FzZVwiV09BUlwiOmNhc2VcIldPQVNcIjpjYXNlXCJXT1JTXCI6Y2FzZVwiV1BBWVwiOmNhc2VcIldQVUJcIjpjPW8oZS52YWx1ZSkscy5zZXQoYyxpKSxpKz1jLmxlbmd0aDticmVhaztjYXNlXCJUUEUxXCI6Y2FzZVwiVENPTVwiOmNhc2VcIlRDT05cIjpjYXNlXCJUTEFOXCI6Y2FzZVwiVElUMVwiOmNhc2VcIlRJVDJcIjpjYXNlXCJUSVQzXCI6Y2FzZVwiVEFMQlwiOmNhc2VcIlRQRTJcIjpjYXNlXCJUUEUzXCI6Y2FzZVwiVFBFNFwiOmNhc2VcIlRSQ0tcIjpjYXNlXCJUUE9TXCI6Y2FzZVwiVEtFWVwiOmNhc2VcIlRNRURcIjpjYXNlXCJUUFVCXCI6Y2FzZVwiVENPUFwiOmNhc2VcIlRFWFRcIjpjYXNlXCJUU1JDXCI6Yz1bMV0uY29uY2F0KHIpLHMuc2V0KGMsaSksaSs9Yy5sZW5ndGgsYz11KGUudmFsdWUpLHMuc2V0KGMsaSksaSs9Yy5sZW5ndGg7YnJlYWs7Y2FzZVwiVFhYWFwiOmNhc2VcIlVTTFRcIjpjYXNlXCJDT01NXCI6Yz1bMV0sXCJVU0xUXCIhPT1lLm5hbWUmJlwiQ09NTVwiIT09ZS5uYW1lfHwoYz1jLmNvbmNhdChlLmxhbmd1YWdlKSksYz1jLmNvbmNhdChyKSxzLnNldChjLGkpLGkrPWMubGVuZ3RoLGM9dShlLmRlc2NyaXB0aW9uKSxzLnNldChjLGkpLGkrPWMubGVuZ3RoLGM9WzAsMF0uY29uY2F0KHIpLHMuc2V0KGMsaSksaSs9Yy5sZW5ndGgsYz11KGUudmFsdWUpLHMuc2V0KGMsaSksaSs9Yy5sZW5ndGg7YnJlYWs7Y2FzZVwiVEJQTVwiOmNhc2VcIlRMRU5cIjpjYXNlXCJUREFUXCI6Y2FzZVwiVFlFUlwiOmkrKyxjPW8oZS52YWx1ZSkscy5zZXQoYyxpKSxpKz1jLmxlbmd0aDticmVhaztjYXNlXCJQUklWXCI6Yz1vKGUuaWQpLHMuc2V0KGMsaSksaSs9Yy5sZW5ndGgsaSsrLHMuc2V0KG5ldyBVaW50OEFycmF5KGUudmFsdWUpLGkpLGkrPWUudmFsdWUuYnl0ZUxlbmd0aDticmVhaztjYXNlXCJBUElDXCI6Yz1bZS51c2VVbmljb2RlRW5jb2Rpbmc/MTowXSxzLnNldChjLGkpLGkrPWMubGVuZ3RoLGM9byhlLm1pbWVUeXBlKSxzLnNldChjLGkpLGkrPWMubGVuZ3RoLGM9WzAsZS5waWN0dXJlVHlwZV0scy5zZXQoYyxpKSxpKz1jLmxlbmd0aCxlLnVzZVVuaWNvZGVFbmNvZGluZz8oYz1bXS5jb25jYXQocikscy5zZXQoYyxpKSxpKz1jLmxlbmd0aCxjPXUoZS5kZXNjcmlwdGlvbikscy5zZXQoYyxpKSxpKz1jLmxlbmd0aCxpKz0yKTooYz1vKGUuZGVzY3JpcHRpb24pLHMuc2V0KGMsaSksaSs9Yy5sZW5ndGgsaSsrKSxzLnNldChuZXcgVWludDhBcnJheShlLnZhbHVlKSxpKSxpKz1lLnZhbHVlLmJ5dGVMZW5ndGh9fSksaSs9dGhpcy5wYWRkaW5nLHMuc2V0KG5ldyBVaW50OEFycmF5KHRoaXMuYXJyYXlCdWZmZXIpLGkpLHRoaXMuYXJyYXlCdWZmZXI9bn0sZS5nZXRCbG9iPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBCbG9iKFt0aGlzLmFycmF5QnVmZmVyXSx7dHlwZTpcImF1ZGlvL21wZWdcIn0pfSxlLmdldFVSTD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnVybHx8KHRoaXMudXJsPVVSTC5jcmVhdGVPYmplY3RVUkwodGhpcy5nZXRCbG9iKCkpKSx0aGlzLnVybH0sZS5yZXZva2VVUkw9ZnVuY3Rpb24oKXtVUkwucmV2b2tlT2JqZWN0VVJMKHRoaXMudXJsKX0sdH0oKX0pOyIsIi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IGJhc2U2NCA9IHJlcXVpcmUoJ2Jhc2U2NC1qcycpXG5jb25zdCBpZWVlNzU0ID0gcmVxdWlyZSgnaWVlZTc1NCcpXG5jb25zdCBjdXN0b21JbnNwZWN0U3ltYm9sID1cbiAgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbFsnZm9yJ10gPT09ICdmdW5jdGlvbicpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZG90LW5vdGF0aW9uXG4gICAgPyBTeW1ib2xbJ2ZvciddKCdub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbScpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZG90LW5vdGF0aW9uXG4gICAgOiBudWxsXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblxuY29uc3QgS19NQVhfTEVOR1RIID0gMHg3ZmZmZmZmZlxuZXhwb3J0cy5rTWF4TGVuZ3RoID0gS19NQVhfTEVOR1RIXG5cbi8qKlxuICogSWYgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYDpcbiAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpXG4gKiAgID09PSBmYWxzZSAgIFByaW50IHdhcm5pbmcgYW5kIHJlY29tbWVuZCB1c2luZyBgYnVmZmVyYCB2NC54IHdoaWNoIGhhcyBhbiBPYmplY3RcbiAqICAgICAgICAgICAgICAgaW1wbGVtZW50YXRpb24gKG1vc3QgY29tcGF0aWJsZSwgZXZlbiBJRTYpXG4gKlxuICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLFxuICogT3BlcmEgMTEuNissIGlPUyA0LjIrLlxuICpcbiAqIFdlIHJlcG9ydCB0aGF0IHRoZSBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGlmIHRoZSBhcmUgbm90IHN1YmNsYXNzYWJsZVxuICogdXNpbmcgX19wcm90b19fLiBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YFxuICogKFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4KS4gSUUgMTAgbGFja3Mgc3VwcG9ydFxuICogZm9yIF9fcHJvdG9fXyBhbmQgaGFzIGEgYnVnZ3kgdHlwZWQgYXJyYXkgaW1wbGVtZW50YXRpb24uXG4gKi9cbkJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gdHlwZWRBcnJheVN1cHBvcnQoKVxuXG5pZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gIGNvbnNvbGUuZXJyb3IoXG4gICAgJ1RoaXMgYnJvd3NlciBsYWNrcyB0eXBlZCBhcnJheSAoVWludDhBcnJheSkgc3VwcG9ydCB3aGljaCBpcyByZXF1aXJlZCBieSAnICtcbiAgICAnYGJ1ZmZlcmAgdjUueC4gVXNlIGBidWZmZXJgIHY0LnggaWYgeW91IHJlcXVpcmUgb2xkIGJyb3dzZXIgc3VwcG9ydC4nXG4gIClcbn1cblxuZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQgKCkge1xuICAvLyBDYW4gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWQ/XG4gIHRyeSB7XG4gICAgY29uc3QgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMSlcbiAgICBjb25zdCBwcm90byA9IHsgZm9vOiBmdW5jdGlvbiAoKSB7IHJldHVybiA0MiB9IH1cbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YocHJvdG8sIFVpbnQ4QXJyYXkucHJvdG90eXBlKVxuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihhcnIsIHByb3RvKVxuICAgIHJldHVybiBhcnIuZm9vKCkgPT09IDQyXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLnByb3RvdHlwZSwgJ3BhcmVudCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGhpcykpIHJldHVybiB1bmRlZmluZWRcbiAgICByZXR1cm4gdGhpcy5idWZmZXJcbiAgfVxufSlcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlci5wcm90b3R5cGUsICdvZmZzZXQnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKHRoaXMpKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgcmV0dXJuIHRoaXMuYnl0ZU9mZnNldFxuICB9XG59KVxuXG5mdW5jdGlvbiBjcmVhdGVCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAobGVuZ3RoID4gS19NQVhfTEVOR1RIKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBcIicgKyBsZW5ndGggKyAnXCIgaXMgaW52YWxpZCBmb3Igb3B0aW9uIFwic2l6ZVwiJylcbiAgfVxuICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZVxuICBjb25zdCBidWYgPSBuZXcgVWludDhBcnJheShsZW5ndGgpXG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZihidWYsIEJ1ZmZlci5wcm90b3R5cGUpXG4gIHJldHVybiBidWZcbn1cblxuLyoqXG4gKiBUaGUgQnVmZmVyIGNvbnN0cnVjdG9yIHJldHVybnMgaW5zdGFuY2VzIG9mIGBVaW50OEFycmF5YCB0aGF0IGhhdmUgdGhlaXJcbiAqIHByb3RvdHlwZSBjaGFuZ2VkIHRvIGBCdWZmZXIucHJvdG90eXBlYC4gRnVydGhlcm1vcmUsIGBCdWZmZXJgIGlzIGEgc3ViY2xhc3Mgb2ZcbiAqIGBVaW50OEFycmF5YCwgc28gdGhlIHJldHVybmVkIGluc3RhbmNlcyB3aWxsIGhhdmUgYWxsIHRoZSBub2RlIGBCdWZmZXJgIG1ldGhvZHNcbiAqIGFuZCB0aGUgYFVpbnQ4QXJyYXlgIG1ldGhvZHMuIFNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0XG4gKiByZXR1cm5zIGEgc2luZ2xlIG9jdGV0LlxuICpcbiAqIFRoZSBgVWludDhBcnJheWAgcHJvdG90eXBlIHJlbWFpbnMgdW5tb2RpZmllZC5cbiAqL1xuXG5mdW5jdGlvbiBCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIC8vIENvbW1vbiBjYXNlLlxuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAnVGhlIFwic3RyaW5nXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIHN0cmluZy4gUmVjZWl2ZWQgdHlwZSBudW1iZXInXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiBhbGxvY1Vuc2FmZShhcmcpXG4gIH1cbiAgcmV0dXJuIGZyb20oYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wb29sU2l6ZSA9IDgxOTIgLy8gbm90IHVzZWQgYnkgdGhpcyBpbXBsZW1lbnRhdGlvblxuXG5mdW5jdGlvbiBmcm9tICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KHZhbHVlKSkge1xuICAgIHJldHVybiBmcm9tQXJyYXlWaWV3KHZhbHVlKVxuICB9XG5cbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksICcgK1xuICAgICAgJ29yIEFycmF5LWxpa2UgT2JqZWN0LiBSZWNlaXZlZCB0eXBlICcgKyAodHlwZW9mIHZhbHVlKVxuICAgIClcbiAgfVxuXG4gIGlmIChpc0luc3RhbmNlKHZhbHVlLCBBcnJheUJ1ZmZlcikgfHxcbiAgICAgICh2YWx1ZSAmJiBpc0luc3RhbmNlKHZhbHVlLmJ1ZmZlciwgQXJyYXlCdWZmZXIpKSkge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgU2hhcmVkQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAoaXNJbnN0YW5jZSh2YWx1ZSwgU2hhcmVkQXJyYXlCdWZmZXIpIHx8XG4gICAgICAodmFsdWUgJiYgaXNJbnN0YW5jZSh2YWx1ZS5idWZmZXIsIFNoYXJlZEFycmF5QnVmZmVyKSkpKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgb2YgdHlwZSBudW1iZXIuIFJlY2VpdmVkIHR5cGUgbnVtYmVyJ1xuICAgIClcbiAgfVxuXG4gIGNvbnN0IHZhbHVlT2YgPSB2YWx1ZS52YWx1ZU9mICYmIHZhbHVlLnZhbHVlT2YoKVxuICBpZiAodmFsdWVPZiAhPSBudWxsICYmIHZhbHVlT2YgIT09IHZhbHVlKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHZhbHVlT2YsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGNvbnN0IGIgPSBmcm9tT2JqZWN0KHZhbHVlKVxuICBpZiAoYikgcmV0dXJuIGJcblxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvUHJpbWl0aXZlICE9IG51bGwgJiZcbiAgICAgIHR5cGVvZiB2YWx1ZVtTeW1ib2wudG9QcmltaXRpdmVdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHZhbHVlW1N5bWJvbC50b1ByaW1pdGl2ZV0oJ3N0cmluZycpLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICdUaGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCAnICtcbiAgICAnb3IgQXJyYXktbGlrZSBPYmplY3QuIFJlY2VpdmVkIHR5cGUgJyArICh0eXBlb2YgdmFsdWUpXG4gIClcbn1cblxuLyoqXG4gKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvclxuICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pXG4gKiBCdWZmZXIuZnJvbShhcnJheSlcbiAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKVxuICoqL1xuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gZnJvbSh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG4vLyBOb3RlOiBDaGFuZ2UgcHJvdG90eXBlICphZnRlciogQnVmZmVyLmZyb20gaXMgZGVmaW5lZCB0byB3b3JrYXJvdW5kIENocm9tZSBidWc6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzE0OFxuT2JqZWN0LnNldFByb3RvdHlwZU9mKEJ1ZmZlci5wcm90b3R5cGUsIFVpbnQ4QXJyYXkucHJvdG90eXBlKVxuT2JqZWN0LnNldFByb3RvdHlwZU9mKEJ1ZmZlciwgVWludDhBcnJheSlcblxuZnVuY3Rpb24gYXNzZXJ0U2l6ZSAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIG51bWJlcicpXG4gIH0gZWxzZSBpZiAoc2l6ZSA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIFwiJyArIHNpemUgKyAnXCIgaXMgaW52YWxpZCBmb3Igb3B0aW9uIFwic2l6ZVwiJylcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGxvYyAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICBpZiAoc2l6ZSA8PSAwKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcihzaXplKVxuICB9XG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPbmx5IHBheSBhdHRlbnRpb24gdG8gZW5jb2RpbmcgaWYgaXQncyBhIHN0cmluZy4gVGhpc1xuICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWxseSBzZW5kaW5nIGluIGEgbnVtYmVyIHRoYXQgd291bGRcbiAgICAvLyBiZSBpbnRlcnByZXRlZCBhcyBhIHN0YXJ0IG9mZnNldC5cbiAgICByZXR1cm4gdHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJ1xuICAgICAgPyBjcmVhdGVCdWZmZXIoc2l6ZSkuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICAgIDogY3JlYXRlQnVmZmVyKHNpemUpLmZpbGwoZmlsbClcbiAgfVxuICByZXR1cm4gY3JlYXRlQnVmZmVyKHNpemUpXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBmaWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogYWxsb2Moc2l6ZVssIGZpbGxbLCBlbmNvZGluZ11dKVxuICoqL1xuQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIHJldHVybiBhbGxvYyhzaXplLCBmaWxsLCBlbmNvZGluZylcbn1cblxuZnVuY3Rpb24gYWxsb2NVbnNhZmUgKHNpemUpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICByZXR1cm4gY3JlYXRlQnVmZmVyKHNpemUgPCAwID8gMCA6IGNoZWNrZWQoc2l6ZSkgfCAwKVxufVxuXG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gQnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKHNpemUpXG59XG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gU2xvd0J1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICovXG5CdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKHNpemUpXG59XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmcgKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycgfHwgZW5jb2RpbmcgPT09ICcnKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICB9XG5cbiAgY29uc3QgbGVuZ3RoID0gYnl0ZUxlbmd0aChzdHJpbmcsIGVuY29kaW5nKSB8IDBcbiAgbGV0IGJ1ZiA9IGNyZWF0ZUJ1ZmZlcihsZW5ndGgpXG5cbiAgY29uc3QgYWN0dWFsID0gYnVmLndyaXRlKHN0cmluZywgZW5jb2RpbmcpXG5cbiAgaWYgKGFjdHVhbCAhPT0gbGVuZ3RoKSB7XG4gICAgLy8gV3JpdGluZyBhIGhleCBzdHJpbmcsIGZvciBleGFtcGxlLCB0aGF0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyB3aWxsXG4gICAgLy8gY2F1c2UgZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgaW52YWxpZCBjaGFyYWN0ZXIgdG8gYmUgaWdub3JlZC4gKGUuZy5cbiAgICAvLyAnYWJ4eGNkJyB3aWxsIGJlIHRyZWF0ZWQgYXMgJ2FiJylcbiAgICBidWYgPSBidWYuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIGJ1ZlxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlIChhcnJheSkge1xuICBjb25zdCBsZW5ndGggPSBhcnJheS5sZW5ndGggPCAwID8gMCA6IGNoZWNrZWQoYXJyYXkubGVuZ3RoKSB8IDBcbiAgY29uc3QgYnVmID0gY3JlYXRlQnVmZmVyKGxlbmd0aClcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIGJ1ZltpXSA9IGFycmF5W2ldICYgMjU1XG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlWaWV3IChhcnJheVZpZXcpIHtcbiAgaWYgKGlzSW5zdGFuY2UoYXJyYXlWaWV3LCBVaW50OEFycmF5KSkge1xuICAgIGNvbnN0IGNvcHkgPSBuZXcgVWludDhBcnJheShhcnJheVZpZXcpXG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcihjb3B5LmJ1ZmZlciwgY29weS5ieXRlT2Zmc2V0LCBjb3B5LmJ5dGVMZW5ndGgpXG4gIH1cbiAgcmV0dXJuIGZyb21BcnJheUxpa2UoYXJyYXlWaWV3KVxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIgKGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwIHx8IGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0KSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wib2Zmc2V0XCIgaXMgb3V0c2lkZSBvZiBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIGlmIChhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCArIChsZW5ndGggfHwgMCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJsZW5ndGhcIiBpcyBvdXRzaWRlIG9mIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgbGV0IGJ1ZlxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYnVmID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXkpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBidWYgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldClcbiAgfSBlbHNlIHtcbiAgICBidWYgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2VcbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGJ1ZiwgQnVmZmVyLnByb3RvdHlwZSlcblxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICBjb25zdCBsZW4gPSBjaGVja2VkKG9iai5sZW5ndGgpIHwgMFxuICAgIGNvbnN0IGJ1ZiA9IGNyZWF0ZUJ1ZmZlcihsZW4pXG5cbiAgICBpZiAoYnVmLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGJ1ZlxuICAgIH1cblxuICAgIG9iai5jb3B5KGJ1ZiwgMCwgMCwgbGVuKVxuICAgIHJldHVybiBidWZcbiAgfVxuXG4gIGlmIChvYmoubGVuZ3RoICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIG9iai5sZW5ndGggIT09ICdudW1iZXInIHx8IG51bWJlcklzTmFOKG9iai5sZW5ndGgpKSB7XG4gICAgICByZXR1cm4gY3JlYXRlQnVmZmVyKDApXG4gICAgfVxuICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKG9iailcbiAgfVxuXG4gIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgQXJyYXkuaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5TGlrZShvYmouZGF0YSlcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwgS19NQVhfTEVOR1RIYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IEtfTUFYX0xFTkdUSCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBLX01BWF9MRU5HVEgudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7XG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgIGxlbmd0aCA9IDBcbiAgfVxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG4gIHJldHVybiBiICE9IG51bGwgJiYgYi5faXNCdWZmZXIgPT09IHRydWUgJiZcbiAgICBiICE9PSBCdWZmZXIucHJvdG90eXBlIC8vIHNvIEJ1ZmZlci5pc0J1ZmZlcihCdWZmZXIucHJvdG90eXBlKSB3aWxsIGJlIGZhbHNlXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoaXNJbnN0YW5jZShhLCBVaW50OEFycmF5KSkgYSA9IEJ1ZmZlci5mcm9tKGEsIGEub2Zmc2V0LCBhLmJ5dGVMZW5ndGgpXG4gIGlmIChpc0luc3RhbmNlKGIsIFVpbnQ4QXJyYXkpKSBiID0gQnVmZmVyLmZyb20oYiwgYi5vZmZzZXQsIGIuYnl0ZUxlbmd0aClcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIFwiYnVmMVwiLCBcImJ1ZjJcIiBhcmd1bWVudHMgbXVzdCBiZSBvbmUgb2YgdHlwZSBCdWZmZXIgb3IgVWludDhBcnJheSdcbiAgICApXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICBsZXQgeCA9IGEubGVuZ3RoXG4gIGxldCB5ID0gYi5sZW5ndGhcblxuICBmb3IgKGxldCBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIGxldCBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgY29uc3QgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbmd0aClcbiAgbGV0IHBvcyA9IDBcbiAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICBsZXQgYnVmID0gbGlzdFtpXVxuICAgIGlmIChpc0luc3RhbmNlKGJ1ZiwgVWludDhBcnJheSkpIHtcbiAgICAgIGlmIChwb3MgKyBidWYubGVuZ3RoID4gYnVmZmVyLmxlbmd0aCkge1xuICAgICAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSBidWYgPSBCdWZmZXIuZnJvbShidWYpXG4gICAgICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICAgICAgYnVmZmVyLFxuICAgICAgICAgIGJ1ZixcbiAgICAgICAgICBwb3NcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH0gZWxzZSB7XG4gICAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICB9XG4gICAgcG9zICs9IGJ1Zi5sZW5ndGhcbiAgfVxuICByZXR1cm4gYnVmZmVyXG59XG5cbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihzdHJpbmcpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5sZW5ndGhcbiAgfVxuICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KHN0cmluZykgfHwgaXNJbnN0YW5jZShzdHJpbmcsIEFycmF5QnVmZmVyKSkge1xuICAgIHJldHVybiBzdHJpbmcuYnl0ZUxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIFwic3RyaW5nXCIgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBzdHJpbmcsIEJ1ZmZlciwgb3IgQXJyYXlCdWZmZXIuICcgK1xuICAgICAgJ1JlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBzdHJpbmdcbiAgICApXG4gIH1cblxuICBjb25zdCBsZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGNvbnN0IG11c3RNYXRjaCA9IChhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gPT09IHRydWUpXG4gIGlmICghbXVzdE1hdGNoICYmIGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgbGV0IGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gbGVuICogMlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGxlbiA+Pj4gMVxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkge1xuICAgICAgICAgIHJldHVybiBtdXN0TWF0Y2ggPyAtMSA6IHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoIC8vIGFzc3VtZSB1dGY4XG4gICAgICAgIH1cbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIGxldCBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2VyY2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGlzIHByb3BlcnR5IGlzIHVzZWQgYnkgYEJ1ZmZlci5pc0J1ZmZlcmAgKGFuZCB0aGUgYGlzLWJ1ZmZlcmAgbnBtIHBhY2thZ2UpXG4vLyB0byBkZXRlY3QgYSBCdWZmZXIgaW5zdGFuY2UuIEl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBgaW5zdGFuY2VvZiBCdWZmZXJgXG4vLyByZWxpYWJseSBpbiBhIGJyb3dzZXJpZnkgY29udGV4dCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG11bHRpcGxlIGRpZmZlcmVudFxuLy8gY29waWVzIG9mIHRoZSAnYnVmZmVyJyBwYWNrYWdlIGluIHVzZS4gVGhpcyBtZXRob2Qgd29ya3MgZXZlbiBmb3IgQnVmZmVyXG4vLyBpbnN0YW5jZXMgdGhhdCB3ZXJlIGNyZWF0ZWQgZnJvbSBhbm90aGVyIGNvcHkgb2YgdGhlIGBidWZmZXJgIHBhY2thZ2UuXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL2lzc3Vlcy8xNTRcbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIGNvbnN0IGkgPSBiW25dXG4gIGJbbl0gPSBiW21dXG4gIGJbbV0gPSBpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDE2ID0gZnVuY3Rpb24gc3dhcDE2ICgpIHtcbiAgY29uc3QgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDIgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHMnKVxuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAxKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDMyID0gZnVuY3Rpb24gc3dhcDMyICgpIHtcbiAgY29uc3QgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgY29uc3QgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDggIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDY0LWJpdHMnKVxuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyA3KVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyA2KVxuICAgIHN3YXAodGhpcywgaSArIDIsIGkgKyA1KVxuICAgIHN3YXAodGhpcywgaSArIDMsIGkgKyA0KVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gIGNvbnN0IGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nID0gQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZ1xuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIGxldCBzdHIgPSAnJ1xuICBjb25zdCBtYXggPSBleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTXG4gIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkucmVwbGFjZSgvKC57Mn0pL2csICckMSAnKS50cmltKClcbiAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KSBzdHIgKz0gJyAuLi4gJ1xuICByZXR1cm4gJzxCdWZmZXIgJyArIHN0ciArICc+J1xufVxuaWYgKGN1c3RvbUluc3BlY3RTeW1ib2wpIHtcbiAgQnVmZmVyLnByb3RvdHlwZVtjdXN0b21JbnNwZWN0U3ltYm9sXSA9IEJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlICh0YXJnZXQsIHN0YXJ0LCBlbmQsIHRoaXNTdGFydCwgdGhpc0VuZCkge1xuICBpZiAoaXNJbnN0YW5jZSh0YXJnZXQsIFVpbnQ4QXJyYXkpKSB7XG4gICAgdGFyZ2V0ID0gQnVmZmVyLmZyb20odGFyZ2V0LCB0YXJnZXQub2Zmc2V0LCB0YXJnZXQuYnl0ZUxlbmd0aClcbiAgfVxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgXCJ0YXJnZXRcIiBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIEJ1ZmZlciBvciBVaW50OEFycmF5LiAnICtcbiAgICAgICdSZWNlaXZlZCB0eXBlICcgKyAodHlwZW9mIHRhcmdldClcbiAgICApXG4gIH1cblxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuZCA9IHRhcmdldCA/IHRhcmdldC5sZW5ndGggOiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc1N0YXJ0ID0gMFxuICB9XG4gIGlmICh0aGlzRW5kID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzRW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChzdGFydCA8IDAgfHwgZW5kID4gdGFyZ2V0Lmxlbmd0aCB8fCB0aGlzU3RhcnQgPCAwIHx8IHRoaXNFbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kICYmIHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kKSB7XG4gICAgcmV0dXJuIC0xXG4gIH1cbiAgaWYgKHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICBzdGFydCA+Pj49IDBcbiAgZW5kID4+Pj0gMFxuICB0aGlzU3RhcnQgPj4+PSAwXG4gIHRoaXNFbmQgPj4+PSAwXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCkgcmV0dXJuIDBcblxuICBsZXQgeCA9IHRoaXNFbmQgLSB0aGlzU3RhcnRcbiAgbGV0IHkgPSBlbmQgLSBzdGFydFxuICBjb25zdCBsZW4gPSBNYXRoLm1pbih4LCB5KVxuXG4gIGNvbnN0IHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpXG4gIGNvbnN0IHRhcmdldENvcHkgPSB0YXJnZXQuc2xpY2Uoc3RhcnQsIGVuZClcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKHRoaXNDb3B5W2ldICE9PSB0YXJnZXRDb3B5W2ldKSB7XG4gICAgICB4ID0gdGhpc0NvcHlbaV1cbiAgICAgIHkgPSB0YXJnZXRDb3B5W2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuLy8gRmluZHMgZWl0aGVyIHRoZSBmaXJzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPj0gYGJ5dGVPZmZzZXRgLFxuLy8gT1IgdGhlIGxhc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0IDw9IGBieXRlT2Zmc2V0YC5cbi8vXG4vLyBBcmd1bWVudHM6XG4vLyAtIGJ1ZmZlciAtIGEgQnVmZmVyIHRvIHNlYXJjaFxuLy8gLSB2YWwgLSBhIHN0cmluZywgQnVmZmVyLCBvciBudW1iZXJcbi8vIC0gYnl0ZU9mZnNldCAtIGFuIGluZGV4IGludG8gYGJ1ZmZlcmA7IHdpbGwgYmUgY2xhbXBlZCB0byBhbiBpbnQzMlxuLy8gLSBlbmNvZGluZyAtIGFuIG9wdGlvbmFsIGVuY29kaW5nLCByZWxldmFudCBpcyB2YWwgaXMgYSBzdHJpbmdcbi8vIC0gZGlyIC0gdHJ1ZSBmb3IgaW5kZXhPZiwgZmFsc2UgZm9yIGxhc3RJbmRleE9mXG5mdW5jdGlvbiBiaWRpcmVjdGlvbmFsSW5kZXhPZiAoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgLy8gRW1wdHkgYnVmZmVyIG1lYW5zIG5vIG1hdGNoXG4gIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSByZXR1cm4gLTFcblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldFxuICBpZiAodHlwZW9mIGJ5dGVPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBieXRlT2Zmc2V0XG4gICAgYnl0ZU9mZnNldCA9IDBcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0ID4gMHg3ZmZmZmZmZikge1xuICAgIGJ5dGVPZmZzZXQgPSAweDdmZmZmZmZmXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IC0weDgwMDAwMDAwKSB7XG4gICAgYnl0ZU9mZnNldCA9IC0weDgwMDAwMDAwXG4gIH1cbiAgYnl0ZU9mZnNldCA9ICtieXRlT2Zmc2V0IC8vIENvZXJjZSB0byBOdW1iZXIuXG4gIGlmIChudW1iZXJJc05hTihieXRlT2Zmc2V0KSkge1xuICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sIFwiZm9vXCIsIGV0Yywgc2VhcmNoIHdob2xlIGJ1ZmZlclxuICAgIGJ5dGVPZmZzZXQgPSBkaXIgPyAwIDogKGJ1ZmZlci5sZW5ndGggLSAxKVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXQ6IG5lZ2F0aXZlIG9mZnNldHMgc3RhcnQgZnJvbSB0aGUgZW5kIG9mIHRoZSBidWZmZXJcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCArIGJ5dGVPZmZzZXRcbiAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xuICAgIGlmIChkaXIpIHJldHVybiAtMVxuICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggLSAxXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IDApIHtcbiAgICBpZiAoZGlyKSBieXRlT2Zmc2V0ID0gMFxuICAgIGVsc2UgcmV0dXJuIC0xXG4gIH1cblxuICAvLyBOb3JtYWxpemUgdmFsXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gIH1cblxuICAvLyBGaW5hbGx5LCBzZWFyY2ggZWl0aGVyIGluZGV4T2YgKGlmIGRpciBpcyB0cnVlKSBvciBsYXN0SW5kZXhPZlxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbCkpIHtcbiAgICAvLyBTcGVjaWFsIGNhc2U6IGxvb2tpbmcgZm9yIGVtcHR5IHN0cmluZy9idWZmZXIgYWx3YXlzIGZhaWxzXG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMHhGRiAvLyBTZWFyY2ggZm9yIGEgYnl0ZSB2YWx1ZSBbMC0yNTVdXG4gICAgaWYgKHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoZGlyKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIFt2YWxdLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyJylcbn1cblxuZnVuY3Rpb24gYXJyYXlJbmRleE9mIChhcnIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICBsZXQgaW5kZXhTaXplID0gMVxuICBsZXQgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aFxuICBsZXQgdmFsTGVuZ3RoID0gdmFsLmxlbmd0aFxuXG4gIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSBTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICBpZiAoZW5jb2RpbmcgPT09ICd1Y3MyJyB8fCBlbmNvZGluZyA9PT0gJ3Vjcy0yJyB8fFxuICAgICAgICBlbmNvZGluZyA9PT0gJ3V0ZjE2bGUnIHx8IGVuY29kaW5nID09PSAndXRmLTE2bGUnKSB7XG4gICAgICBpZiAoYXJyLmxlbmd0aCA8IDIgfHwgdmFsLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIC0xXG4gICAgICB9XG4gICAgICBpbmRleFNpemUgPSAyXG4gICAgICBhcnJMZW5ndGggLz0gMlxuICAgICAgdmFsTGVuZ3RoIC89IDJcbiAgICAgIGJ5dGVPZmZzZXQgLz0gMlxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWQgKGJ1ZiwgaSkge1xuICAgIGlmIChpbmRleFNpemUgPT09IDEpIHtcbiAgICAgIHJldHVybiBidWZbaV1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDE2QkUoaSAqIGluZGV4U2l6ZSlcbiAgICB9XG4gIH1cblxuICBsZXQgaVxuICBpZiAoZGlyKSB7XG4gICAgbGV0IGZvdW5kSW5kZXggPSAtMVxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPCBhcnJMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHJlYWQoYXJyLCBpKSA9PT0gcmVhZCh2YWwsIGZvdW5kSW5kZXggPT09IC0xID8gMCA6IGkgLSBmb3VuZEluZGV4KSkge1xuICAgICAgICBpZiAoZm91bmRJbmRleCA9PT0gLTEpIGZvdW5kSW5kZXggPSBpXG4gICAgICAgIGlmIChpIC0gZm91bmRJbmRleCArIDEgPT09IHZhbExlbmd0aCkgcmV0dXJuIGZvdW5kSW5kZXggKiBpbmRleFNpemVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ICE9PSAtMSkgaSAtPSBpIC0gZm91bmRJbmRleFxuICAgICAgICBmb3VuZEluZGV4ID0gLTFcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGJ5dGVPZmZzZXQgKyB2YWxMZW5ndGggPiBhcnJMZW5ndGgpIGJ5dGVPZmZzZXQgPSBhcnJMZW5ndGggLSB2YWxMZW5ndGhcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpID49IDA7IGktLSkge1xuICAgICAgbGV0IGZvdW5kID0gdHJ1ZVxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB2YWxMZW5ndGg7IGorKykge1xuICAgICAgICBpZiAocmVhZChhcnIsIGkgKyBqKSAhPT0gcmVhZCh2YWwsIGopKSB7XG4gICAgICAgICAgZm91bmQgPSBmYWxzZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChmb3VuZCkgcmV0dXJuIGlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiB0aGlzLmluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgIT09IC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIHRydWUpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbiBsYXN0SW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZmFsc2UpXG59XG5cbmZ1bmN0aW9uIGhleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICBjb25zdCByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cblxuICBjb25zdCBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG5cbiAgaWYgKGxlbmd0aCA+IHN0ckxlbiAvIDIpIHtcbiAgICBsZW5ndGggPSBzdHJMZW4gLyAyXG4gIH1cbiAgbGV0IGlcbiAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgY29uc3QgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChudW1iZXJJc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYmFzZTY0V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihiYXNlNjRUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIHVjczJXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjE2bGVUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpIHtcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZylcbiAgaWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgZW5jb2RpbmcpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IG9mZnNldFxuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBvZmZzZXRbLCBsZW5ndGhdWywgZW5jb2RpbmddKVxuICB9IGVsc2UgaWYgKGlzRmluaXRlKG9mZnNldCkpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgICBpZiAoaXNGaW5pdGUobGVuZ3RoKSkge1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoID4+PiAwXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCdcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnQnVmZmVyLndyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldFssIGxlbmd0aF0pIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQnXG4gICAgKVxuICB9XG5cbiAgY29uc3QgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICBsZXQgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIGNvbnN0IHJlcyA9IFtdXG5cbiAgbGV0IGkgPSBzdGFydFxuICB3aGlsZSAoaSA8IGVuZCkge1xuICAgIGNvbnN0IGZpcnN0Qnl0ZSA9IGJ1ZltpXVxuICAgIGxldCBjb2RlUG9pbnQgPSBudWxsXG4gICAgbGV0IGJ5dGVzUGVyU2VxdWVuY2UgPSAoZmlyc3RCeXRlID4gMHhFRilcbiAgICAgID8gNFxuICAgICAgOiAoZmlyc3RCeXRlID4gMHhERilcbiAgICAgICAgICA/IDNcbiAgICAgICAgICA6IChmaXJzdEJ5dGUgPiAweEJGKVxuICAgICAgICAgICAgICA/IDJcbiAgICAgICAgICAgICAgOiAxXG5cbiAgICBpZiAoaSArIGJ5dGVzUGVyU2VxdWVuY2UgPD0gZW5kKSB7XG4gICAgICBsZXQgc2Vjb25kQnl0ZSwgdGhpcmRCeXRlLCBmb3VydGhCeXRlLCB0ZW1wQ29kZVBvaW50XG5cbiAgICAgIHN3aXRjaCAoYnl0ZXNQZXJTZXF1ZW5jZSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKGZpcnN0Qnl0ZSA8IDB4ODApIHtcbiAgICAgICAgICAgIGNvZGVQb2ludCA9IGZpcnN0Qnl0ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweDFGKSA8PCAweDYgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0YpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHhDIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAodGhpcmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3RkYgJiYgKHRlbXBDb2RlUG9pbnQgPCAweEQ4MDAgfHwgdGVtcENvZGVQb2ludCA+IDB4REZGRikpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgZm91cnRoQnl0ZSA9IGJ1ZltpICsgM11cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKGZvdXJ0aEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4MTIgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4QyB8ICh0aGlyZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAoZm91cnRoQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4RkZGRiAmJiB0ZW1wQ29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29kZVBvaW50ID09PSBudWxsKSB7XG4gICAgICAvLyB3ZSBkaWQgbm90IGdlbmVyYXRlIGEgdmFsaWQgY29kZVBvaW50IHNvIGluc2VydCBhXG4gICAgICAvLyByZXBsYWNlbWVudCBjaGFyIChVK0ZGRkQpIGFuZCBhZHZhbmNlIG9ubHkgMSBieXRlXG4gICAgICBjb2RlUG9pbnQgPSAweEZGRkRcbiAgICAgIGJ5dGVzUGVyU2VxdWVuY2UgPSAxXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPiAweEZGRkYpIHtcbiAgICAgIC8vIGVuY29kZSB0byB1dGYxNiAoc3Vycm9nYXRlIHBhaXIgZGFuY2UpXG4gICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMFxuICAgICAgcmVzLnB1c2goY29kZVBvaW50ID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKVxuICAgICAgY29kZVBvaW50ID0gMHhEQzAwIHwgY29kZVBvaW50ICYgMHgzRkZcbiAgICB9XG5cbiAgICByZXMucHVzaChjb2RlUG9pbnQpXG4gICAgaSArPSBieXRlc1BlclNlcXVlbmNlXG4gIH1cblxuICByZXR1cm4gZGVjb2RlQ29kZVBvaW50c0FycmF5KHJlcylcbn1cblxuLy8gQmFzZWQgb24gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjI3NDcyNzIvNjgwNzQyLCB0aGUgYnJvd3NlciB3aXRoXG4vLyB0aGUgbG93ZXN0IGxpbWl0IGlzIENocm9tZSwgd2l0aCAweDEwMDAwIGFyZ3MuXG4vLyBXZSBnbyAxIG1hZ25pdHVkZSBsZXNzLCBmb3Igc2FmZXR5XG5jb25zdCBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgY29uc3QgbGVuID0gY29kZVBvaW50cy5sZW5ndGhcbiAgaWYgKGxlbiA8PSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY29kZVBvaW50cykgLy8gYXZvaWQgZXh0cmEgc2xpY2UoKVxuICB9XG5cbiAgLy8gRGVjb2RlIGluIGNodW5rcyB0byBhdm9pZCBcImNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiLlxuICBsZXQgcmVzID0gJydcbiAgbGV0IGkgPSAwXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoXG4gICAgICBTdHJpbmcsXG4gICAgICBjb2RlUG9pbnRzLnNsaWNlKGksIGkgKz0gTUFYX0FSR1VNRU5UU19MRU5HVEgpXG4gICAgKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGxldCByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0gJiAweDdGKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gbGF0aW4xU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBsZXQgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gaGV4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBjb25zdCBsZW4gPSBidWYubGVuZ3RoXG5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA8IDApIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCB8fCBlbmQgPCAwIHx8IGVuZCA+IGxlbikgZW5kID0gbGVuXG5cbiAgbGV0IG91dCA9ICcnXG4gIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgb3V0ICs9IGhleFNsaWNlTG9va3VwVGFibGVbYnVmW2ldXVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgY29uc3QgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcbiAgbGV0IHJlcyA9ICcnXG4gIC8vIElmIGJ5dGVzLmxlbmd0aCBpcyBvZGQsIHRoZSBsYXN0IDggYml0cyBtdXN0IGJlIGlnbm9yZWQgKHNhbWUgYXMgbm9kZS5qcylcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGggLSAxOyBpICs9IDIpIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIChieXRlc1tpICsgMV0gKiAyNTYpKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChzdGFydCwgZW5kKSB7XG4gIGNvbnN0IGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlblxuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgY29uc3QgbmV3QnVmID0gdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKVxuICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZVxuICBPYmplY3Quc2V0UHJvdG90eXBlT2YobmV3QnVmLCBCdWZmZXIucHJvdG90eXBlKVxuXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVpbnRMRSA9XG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50TEUgPSBmdW5jdGlvbiByZWFkVUludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIGxldCB2YWwgPSB0aGlzW29mZnNldF1cbiAgbGV0IG11bCA9IDFcbiAgbGV0IGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludEJFID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuICB9XG5cbiAgbGV0IHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXVxuICBsZXQgbXVsID0gMVxuICB3aGlsZSAoYnl0ZUxlbmd0aCA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVpbnQ4ID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gcmVhZFVJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVpbnQxNkxFID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludDE2QkUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDgpIHwgdGhpc1tvZmZzZXQgKyAxXVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50MzJMRSA9XG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKCh0aGlzW29mZnNldF0pIHxcbiAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSkgK1xuICAgICAgKHRoaXNbb2Zmc2V0ICsgM10gKiAweDEwMDAwMDApXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVpbnQzMkJFID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEJpZ1VJbnQ2NExFID0gZGVmaW5lQmlnSW50TWV0aG9kKGZ1bmN0aW9uIHJlYWRCaWdVSW50NjRMRSAob2Zmc2V0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICB2YWxpZGF0ZU51bWJlcihvZmZzZXQsICdvZmZzZXQnKVxuICBjb25zdCBmaXJzdCA9IHRoaXNbb2Zmc2V0XVxuICBjb25zdCBsYXN0ID0gdGhpc1tvZmZzZXQgKyA3XVxuICBpZiAoZmlyc3QgPT09IHVuZGVmaW5lZCB8fCBsYXN0ID09PSB1bmRlZmluZWQpIHtcbiAgICBib3VuZHNFcnJvcihvZmZzZXQsIHRoaXMubGVuZ3RoIC0gOClcbiAgfVxuXG4gIGNvbnN0IGxvID0gZmlyc3QgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiA4ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMTYgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAyNFxuXG4gIGNvbnN0IGhpID0gdGhpc1srK29mZnNldF0gK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiA4ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMTYgK1xuICAgIGxhc3QgKiAyICoqIDI0XG5cbiAgcmV0dXJuIEJpZ0ludChsbykgKyAoQmlnSW50KGhpKSA8PCBCaWdJbnQoMzIpKVxufSlcblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkQmlnVUludDY0QkUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gcmVhZEJpZ1VJbnQ2NEJFIChvZmZzZXQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIHZhbGlkYXRlTnVtYmVyKG9mZnNldCwgJ29mZnNldCcpXG4gIGNvbnN0IGZpcnN0ID0gdGhpc1tvZmZzZXRdXG4gIGNvbnN0IGxhc3QgPSB0aGlzW29mZnNldCArIDddXG4gIGlmIChmaXJzdCA9PT0gdW5kZWZpbmVkIHx8IGxhc3QgPT09IHVuZGVmaW5lZCkge1xuICAgIGJvdW5kc0Vycm9yKG9mZnNldCwgdGhpcy5sZW5ndGggLSA4KVxuICB9XG5cbiAgY29uc3QgaGkgPSBmaXJzdCAqIDIgKiogMjQgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAxNiArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDggK1xuICAgIHRoaXNbKytvZmZzZXRdXG5cbiAgY29uc3QgbG8gPSB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMjQgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAxNiArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDggK1xuICAgIGxhc3RcblxuICByZXR1cm4gKEJpZ0ludChoaSkgPDwgQmlnSW50KDMyKSkgKyBCaWdJbnQobG8pXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRMRSA9IGZ1bmN0aW9uIHJlYWRJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICBsZXQgdmFsID0gdGhpc1tvZmZzZXRdXG4gIGxldCBtdWwgPSAxXG4gIGxldCBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50QkUgPSBmdW5jdGlvbiByZWFkSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgbGV0IGkgPSBieXRlTGVuZ3RoXG4gIGxldCBtdWwgPSAxXG4gIGxldCB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKVxuICByZXR1cm4gKCgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICBjb25zdCB2YWwgPSB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2QkUgPSBmdW5jdGlvbiByZWFkSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgY29uc3QgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkxFID0gZnVuY3Rpb24gcmVhZEludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0pIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSA8PCAyNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEJpZ0ludDY0TEUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gcmVhZEJpZ0ludDY0TEUgKG9mZnNldCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgdmFsaWRhdGVOdW1iZXIob2Zmc2V0LCAnb2Zmc2V0JylcbiAgY29uc3QgZmlyc3QgPSB0aGlzW29mZnNldF1cbiAgY29uc3QgbGFzdCA9IHRoaXNbb2Zmc2V0ICsgN11cbiAgaWYgKGZpcnN0ID09PSB1bmRlZmluZWQgfHwgbGFzdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYm91bmRzRXJyb3Iob2Zmc2V0LCB0aGlzLmxlbmd0aCAtIDgpXG4gIH1cblxuICBjb25zdCB2YWwgPSB0aGlzW29mZnNldCArIDRdICtcbiAgICB0aGlzW29mZnNldCArIDVdICogMiAqKiA4ICtcbiAgICB0aGlzW29mZnNldCArIDZdICogMiAqKiAxNiArXG4gICAgKGxhc3QgPDwgMjQpIC8vIE92ZXJmbG93XG5cbiAgcmV0dXJuIChCaWdJbnQodmFsKSA8PCBCaWdJbnQoMzIpKSArXG4gICAgQmlnSW50KGZpcnN0ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogOCArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDE2ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMjQpXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRCaWdJbnQ2NEJFID0gZGVmaW5lQmlnSW50TWV0aG9kKGZ1bmN0aW9uIHJlYWRCaWdJbnQ2NEJFIChvZmZzZXQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIHZhbGlkYXRlTnVtYmVyKG9mZnNldCwgJ29mZnNldCcpXG4gIGNvbnN0IGZpcnN0ID0gdGhpc1tvZmZzZXRdXG4gIGNvbnN0IGxhc3QgPSB0aGlzW29mZnNldCArIDddXG4gIGlmIChmaXJzdCA9PT0gdW5kZWZpbmVkIHx8IGxhc3QgPT09IHVuZGVmaW5lZCkge1xuICAgIGJvdW5kc0Vycm9yKG9mZnNldCwgdGhpcy5sZW5ndGggLSA4KVxuICB9XG5cbiAgY29uc3QgdmFsID0gKGZpcnN0IDw8IDI0KSArIC8vIE92ZXJmbG93XG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDE2ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogOCArXG4gICAgdGhpc1srK29mZnNldF1cblxuICByZXR1cm4gKEJpZ0ludCh2YWwpIDw8IEJpZ0ludCgzMikpICtcbiAgICBCaWdJbnQodGhpc1srK29mZnNldF0gKiAyICoqIDI0ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMTYgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiA4ICtcbiAgICBsYXN0KVxufSlcblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdExFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiByZWFkRG91YmxlTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiByZWFkRG91YmxlQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50TEUgPVxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlVUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNvbnN0IG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgbGV0IG11bCA9IDFcbiAgbGV0IGkgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnRCRSA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludEJFID0gZnVuY3Rpb24gd3JpdGVVSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY29uc3QgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICBsZXQgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIGxldCBtdWwgPSAxXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludDggPVxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVVSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50MTZMRSA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludDE2QkUgPVxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnQzMkxFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50MzJCRSA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5mdW5jdGlvbiB3cnRCaWdVSW50NjRMRSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBtaW4sIG1heCkge1xuICBjaGVja0ludEJJKHZhbHVlLCBtaW4sIG1heCwgYnVmLCBvZmZzZXQsIDcpXG5cbiAgbGV0IGxvID0gTnVtYmVyKHZhbHVlICYgQmlnSW50KDB4ZmZmZmZmZmYpKVxuICBidWZbb2Zmc2V0KytdID0gbG9cbiAgbG8gPSBsbyA+PiA4XG4gIGJ1ZltvZmZzZXQrK10gPSBsb1xuICBsbyA9IGxvID4+IDhcbiAgYnVmW29mZnNldCsrXSA9IGxvXG4gIGxvID0gbG8gPj4gOFxuICBidWZbb2Zmc2V0KytdID0gbG9cbiAgbGV0IGhpID0gTnVtYmVyKHZhbHVlID4+IEJpZ0ludCgzMikgJiBCaWdJbnQoMHhmZmZmZmZmZikpXG4gIGJ1ZltvZmZzZXQrK10gPSBoaVxuICBoaSA9IGhpID4+IDhcbiAgYnVmW29mZnNldCsrXSA9IGhpXG4gIGhpID0gaGkgPj4gOFxuICBidWZbb2Zmc2V0KytdID0gaGlcbiAgaGkgPSBoaSA+PiA4XG4gIGJ1ZltvZmZzZXQrK10gPSBoaVxuICByZXR1cm4gb2Zmc2V0XG59XG5cbmZ1bmN0aW9uIHdydEJpZ1VJbnQ2NEJFIChidWYsIHZhbHVlLCBvZmZzZXQsIG1pbiwgbWF4KSB7XG4gIGNoZWNrSW50QkkodmFsdWUsIG1pbiwgbWF4LCBidWYsIG9mZnNldCwgNylcblxuICBsZXQgbG8gPSBOdW1iZXIodmFsdWUgJiBCaWdJbnQoMHhmZmZmZmZmZikpXG4gIGJ1ZltvZmZzZXQgKyA3XSA9IGxvXG4gIGxvID0gbG8gPj4gOFxuICBidWZbb2Zmc2V0ICsgNl0gPSBsb1xuICBsbyA9IGxvID4+IDhcbiAgYnVmW29mZnNldCArIDVdID0gbG9cbiAgbG8gPSBsbyA+PiA4XG4gIGJ1ZltvZmZzZXQgKyA0XSA9IGxvXG4gIGxldCBoaSA9IE51bWJlcih2YWx1ZSA+PiBCaWdJbnQoMzIpICYgQmlnSW50KDB4ZmZmZmZmZmYpKVxuICBidWZbb2Zmc2V0ICsgM10gPSBoaVxuICBoaSA9IGhpID4+IDhcbiAgYnVmW29mZnNldCArIDJdID0gaGlcbiAgaGkgPSBoaSA+PiA4XG4gIGJ1ZltvZmZzZXQgKyAxXSA9IGhpXG4gIGhpID0gaGkgPj4gOFxuICBidWZbb2Zmc2V0XSA9IGhpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVCaWdVSW50NjRMRSA9IGRlZmluZUJpZ0ludE1ldGhvZChmdW5jdGlvbiB3cml0ZUJpZ1VJbnQ2NExFICh2YWx1ZSwgb2Zmc2V0ID0gMCkge1xuICByZXR1cm4gd3J0QmlnVUludDY0TEUodGhpcywgdmFsdWUsIG9mZnNldCwgQmlnSW50KDApLCBCaWdJbnQoJzB4ZmZmZmZmZmZmZmZmZmZmZicpKVxufSlcblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUJpZ1VJbnQ2NEJFID0gZGVmaW5lQmlnSW50TWV0aG9kKGZ1bmN0aW9uIHdyaXRlQmlnVUludDY0QkUgKHZhbHVlLCBvZmZzZXQgPSAwKSB7XG4gIHJldHVybiB3cnRCaWdVSW50NjRCRSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBCaWdJbnQoMCksIEJpZ0ludCgnMHhmZmZmZmZmZmZmZmZmZmZmJykpXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNvbnN0IGxpbWl0ID0gTWF0aC5wb3coMiwgKDggKiBieXRlTGVuZ3RoKSAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIGxldCBpID0gMFxuICBsZXQgbXVsID0gMVxuICBsZXQgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNvbnN0IGxpbWl0ID0gTWF0aC5wb3coMiwgKDggKiBieXRlTGVuZ3RoKSAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIGxldCBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgbGV0IG11bCA9IDFcbiAgbGV0IHN1YiA9IDBcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4N2YsIC0weDgwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVCaWdJbnQ2NExFID0gZGVmaW5lQmlnSW50TWV0aG9kKGZ1bmN0aW9uIHdyaXRlQmlnSW50NjRMRSAodmFsdWUsIG9mZnNldCA9IDApIHtcbiAgcmV0dXJuIHdydEJpZ1VJbnQ2NExFKHRoaXMsIHZhbHVlLCBvZmZzZXQsIC1CaWdJbnQoJzB4ODAwMDAwMDAwMDAwMDAwMCcpLCBCaWdJbnQoJzB4N2ZmZmZmZmZmZmZmZmZmZicpKVxufSlcblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUJpZ0ludDY0QkUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gd3JpdGVCaWdJbnQ2NEJFICh2YWx1ZSwgb2Zmc2V0ID0gMCkge1xuICByZXR1cm4gd3J0QmlnVUludDY0QkUodGhpcywgdmFsdWUsIG9mZnNldCwgLUJpZ0ludCgnMHg4MDAwMDAwMDAwMDAwMDAwJyksIEJpZ0ludCgnMHg3ZmZmZmZmZmZmZmZmZmZmJykpXG59KVxuXG5mdW5jdGlvbiBjaGVja0lFRUU3NTQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBzaG91bGQgYmUgYSBCdWZmZXInKVxuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoXG4gIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMFxuICBpZiAoZW5kID4gMCAmJiBlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVybiAwXG4gIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgaWYgKHRhcmdldFN0YXJ0IDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgfVxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgY29uc3QgbGVuID0gZW5kIC0gc3RhcnRcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gVXNlIGJ1aWx0LWluIHdoZW4gYXZhaWxhYmxlLCBtaXNzaW5nIGZyb20gSUUxMVxuICAgIHRoaXMuY29weVdpdGhpbih0YXJnZXRTdGFydCwgc3RhcnQsIGVuZClcbiAgfSBlbHNlIHtcbiAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgIHRhcmdldCxcbiAgICAgIHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZCksXG4gICAgICB0YXJnZXRTdGFydFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuLy8gVXNhZ2U6XG4vLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IHN0YXJ0XG4gICAgICBzdGFydCA9IDBcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmRcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfVxuICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgfVxuICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICBjb25zdCBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMClcbiAgICAgIGlmICgoZW5jb2RpbmcgPT09ICd1dGY4JyAmJiBjb2RlIDwgMTI4KSB8fFxuICAgICAgICAgIGVuY29kaW5nID09PSAnbGF0aW4xJykge1xuICAgICAgICAvLyBGYXN0IHBhdGg6IElmIGB2YWxgIGZpdHMgaW50byBhIHNpbmdsZSBieXRlLCB1c2UgdGhhdCBudW1lcmljIHZhbHVlLlxuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgdmFsID0gTnVtYmVyKHZhbClcbiAgfVxuXG4gIC8vIEludmFsaWQgcmFuZ2VzIGFyZSBub3Qgc2V0IHRvIGEgZGVmYXVsdCwgc28gY2FuIHJhbmdlIGNoZWNrIGVhcmx5LlxuICBpZiAoc3RhcnQgPCAwIHx8IHRoaXMubGVuZ3RoIDwgc3RhcnQgfHwgdGhpcy5sZW5ndGggPCBlbmQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignT3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgc3RhcnQgPSBzdGFydCA+Pj4gMFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IHRoaXMubGVuZ3RoIDogZW5kID4+PiAwXG5cbiAgaWYgKCF2YWwpIHZhbCA9IDBcblxuICBsZXQgaVxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICB0aGlzW2ldID0gdmFsXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNvbnN0IGJ5dGVzID0gQnVmZmVyLmlzQnVmZmVyKHZhbClcbiAgICAgID8gdmFsXG4gICAgICA6IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gICAgY29uc3QgbGVuID0gYnl0ZXMubGVuZ3RoXG4gICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIHZhbHVlIFwiJyArIHZhbCArXG4gICAgICAgICdcIiBpcyBpbnZhbGlkIGZvciBhcmd1bWVudCBcInZhbHVlXCInKVxuICAgIH1cbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBDVVNUT00gRVJST1JTXG4vLyA9PT09PT09PT09PT09XG5cbi8vIFNpbXBsaWZpZWQgdmVyc2lvbnMgZnJvbSBOb2RlLCBjaGFuZ2VkIGZvciBCdWZmZXItb25seSB1c2FnZVxuY29uc3QgZXJyb3JzID0ge31cbmZ1bmN0aW9uIEUgKHN5bSwgZ2V0TWVzc2FnZSwgQmFzZSkge1xuICBlcnJvcnNbc3ltXSA9IGNsYXNzIE5vZGVFcnJvciBleHRlbmRzIEJhc2Uge1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgIHN1cGVyKClcblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdtZXNzYWdlJywge1xuICAgICAgICB2YWx1ZTogZ2V0TWVzc2FnZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9KVxuXG4gICAgICAvLyBBZGQgdGhlIGVycm9yIGNvZGUgdG8gdGhlIG5hbWUgdG8gaW5jbHVkZSBpdCBpbiB0aGUgc3RhY2sgdHJhY2UuXG4gICAgICB0aGlzLm5hbWUgPSBgJHt0aGlzLm5hbWV9IFske3N5bX1dYFxuICAgICAgLy8gQWNjZXNzIHRoZSBzdGFjayB0byBnZW5lcmF0ZSB0aGUgZXJyb3IgbWVzc2FnZSBpbmNsdWRpbmcgdGhlIGVycm9yIGNvZGVcbiAgICAgIC8vIGZyb20gdGhlIG5hbWUuXG4gICAgICB0aGlzLnN0YWNrIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG4gICAgICAvLyBSZXNldCB0aGUgbmFtZSB0byB0aGUgYWN0dWFsIG5hbWUuXG4gICAgICBkZWxldGUgdGhpcy5uYW1lXG4gICAgfVxuXG4gICAgZ2V0IGNvZGUgKCkge1xuICAgICAgcmV0dXJuIHN5bVxuICAgIH1cblxuICAgIHNldCBjb2RlICh2YWx1ZSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdjb2RlJywge1xuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgfSlcbiAgICB9XG5cbiAgICB0b1N0cmluZyAoKSB7XG4gICAgICByZXR1cm4gYCR7dGhpcy5uYW1lfSBbJHtzeW19XTogJHt0aGlzLm1lc3NhZ2V9YFxuICAgIH1cbiAgfVxufVxuXG5FKCdFUlJfQlVGRkVSX09VVF9PRl9CT1VORFMnLFxuICBmdW5jdGlvbiAobmFtZSkge1xuICAgIGlmIChuYW1lKSB7XG4gICAgICByZXR1cm4gYCR7bmFtZX0gaXMgb3V0c2lkZSBvZiBidWZmZXIgYm91bmRzYFxuICAgIH1cblxuICAgIHJldHVybiAnQXR0ZW1wdCB0byBhY2Nlc3MgbWVtb3J5IG91dHNpZGUgYnVmZmVyIGJvdW5kcydcbiAgfSwgUmFuZ2VFcnJvcilcbkUoJ0VSUl9JTlZBTElEX0FSR19UWVBFJyxcbiAgZnVuY3Rpb24gKG5hbWUsIGFjdHVhbCkge1xuICAgIHJldHVybiBgVGhlIFwiJHtuYW1lfVwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBudW1iZXIuIFJlY2VpdmVkIHR5cGUgJHt0eXBlb2YgYWN0dWFsfWBcbiAgfSwgVHlwZUVycm9yKVxuRSgnRVJSX09VVF9PRl9SQU5HRScsXG4gIGZ1bmN0aW9uIChzdHIsIHJhbmdlLCBpbnB1dCkge1xuICAgIGxldCBtc2cgPSBgVGhlIHZhbHVlIG9mIFwiJHtzdHJ9XCIgaXMgb3V0IG9mIHJhbmdlLmBcbiAgICBsZXQgcmVjZWl2ZWQgPSBpbnB1dFxuICAgIGlmIChOdW1iZXIuaXNJbnRlZ2VyKGlucHV0KSAmJiBNYXRoLmFicyhpbnB1dCkgPiAyICoqIDMyKSB7XG4gICAgICByZWNlaXZlZCA9IGFkZE51bWVyaWNhbFNlcGFyYXRvcihTdHJpbmcoaW5wdXQpKVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnYmlnaW50Jykge1xuICAgICAgcmVjZWl2ZWQgPSBTdHJpbmcoaW5wdXQpXG4gICAgICBpZiAoaW5wdXQgPiBCaWdJbnQoMikgKiogQmlnSW50KDMyKSB8fCBpbnB1dCA8IC0oQmlnSW50KDIpICoqIEJpZ0ludCgzMikpKSB7XG4gICAgICAgIHJlY2VpdmVkID0gYWRkTnVtZXJpY2FsU2VwYXJhdG9yKHJlY2VpdmVkKVxuICAgICAgfVxuICAgICAgcmVjZWl2ZWQgKz0gJ24nXG4gICAgfVxuICAgIG1zZyArPSBgIEl0IG11c3QgYmUgJHtyYW5nZX0uIFJlY2VpdmVkICR7cmVjZWl2ZWR9YFxuICAgIHJldHVybiBtc2dcbiAgfSwgUmFuZ2VFcnJvcilcblxuZnVuY3Rpb24gYWRkTnVtZXJpY2FsU2VwYXJhdG9yICh2YWwpIHtcbiAgbGV0IHJlcyA9ICcnXG4gIGxldCBpID0gdmFsLmxlbmd0aFxuICBjb25zdCBzdGFydCA9IHZhbFswXSA9PT0gJy0nID8gMSA6IDBcbiAgZm9yICg7IGkgPj0gc3RhcnQgKyA0OyBpIC09IDMpIHtcbiAgICByZXMgPSBgXyR7dmFsLnNsaWNlKGkgLSAzLCBpKX0ke3Jlc31gXG4gIH1cbiAgcmV0dXJuIGAke3ZhbC5zbGljZSgwLCBpKX0ke3Jlc31gXG59XG5cbi8vIENIRUNLIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09XG5cbmZ1bmN0aW9uIGNoZWNrQm91bmRzIChidWYsIG9mZnNldCwgYnl0ZUxlbmd0aCkge1xuICB2YWxpZGF0ZU51bWJlcihvZmZzZXQsICdvZmZzZXQnKVxuICBpZiAoYnVmW29mZnNldF0gPT09IHVuZGVmaW5lZCB8fCBidWZbb2Zmc2V0ICsgYnl0ZUxlbmd0aF0gPT09IHVuZGVmaW5lZCkge1xuICAgIGJvdW5kc0Vycm9yKG9mZnNldCwgYnVmLmxlbmd0aCAtIChieXRlTGVuZ3RoICsgMSkpXG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tJbnRCSSAodmFsdWUsIG1pbiwgbWF4LCBidWYsIG9mZnNldCwgYnl0ZUxlbmd0aCkge1xuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHtcbiAgICBjb25zdCBuID0gdHlwZW9mIG1pbiA9PT0gJ2JpZ2ludCcgPyAnbicgOiAnJ1xuICAgIGxldCByYW5nZVxuICAgIGlmIChieXRlTGVuZ3RoID4gMykge1xuICAgICAgaWYgKG1pbiA9PT0gMCB8fCBtaW4gPT09IEJpZ0ludCgwKSkge1xuICAgICAgICByYW5nZSA9IGA+PSAwJHtufSBhbmQgPCAyJHtufSAqKiAkeyhieXRlTGVuZ3RoICsgMSkgKiA4fSR7bn1gXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByYW5nZSA9IGA+PSAtKDIke259ICoqICR7KGJ5dGVMZW5ndGggKyAxKSAqIDggLSAxfSR7bn0pIGFuZCA8IDIgKiogYCArXG4gICAgICAgICAgICAgICAgYCR7KGJ5dGVMZW5ndGggKyAxKSAqIDggLSAxfSR7bn1gXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJhbmdlID0gYD49ICR7bWlufSR7bn0gYW5kIDw9ICR7bWF4fSR7bn1gXG4gICAgfVxuICAgIHRocm93IG5ldyBlcnJvcnMuRVJSX09VVF9PRl9SQU5HRSgndmFsdWUnLCByYW5nZSwgdmFsdWUpXG4gIH1cbiAgY2hlY2tCb3VuZHMoYnVmLCBvZmZzZXQsIGJ5dGVMZW5ndGgpXG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlTnVtYmVyICh2YWx1ZSwgbmFtZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBlcnJvcnMuRVJSX0lOVkFMSURfQVJHX1RZUEUobmFtZSwgJ251bWJlcicsIHZhbHVlKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJvdW5kc0Vycm9yICh2YWx1ZSwgbGVuZ3RoLCB0eXBlKSB7XG4gIGlmIChNYXRoLmZsb29yKHZhbHVlKSAhPT0gdmFsdWUpIHtcbiAgICB2YWxpZGF0ZU51bWJlcih2YWx1ZSwgdHlwZSlcbiAgICB0aHJvdyBuZXcgZXJyb3JzLkVSUl9PVVRfT0ZfUkFOR0UodHlwZSB8fCAnb2Zmc2V0JywgJ2FuIGludGVnZXInLCB2YWx1ZSlcbiAgfVxuXG4gIGlmIChsZW5ndGggPCAwKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5FUlJfQlVGRkVSX09VVF9PRl9CT1VORFMoKVxuICB9XG5cbiAgdGhyb3cgbmV3IGVycm9ycy5FUlJfT1VUX09GX1JBTkdFKHR5cGUgfHwgJ29mZnNldCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgPj0gJHt0eXBlID8gMSA6IDB9IGFuZCA8PSAke2xlbmd0aH1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUpXG59XG5cbi8vIEhFTFBFUiBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PT1cblxuY29uc3QgSU5WQUxJRF9CQVNFNjRfUkUgPSAvW14rLzAtOUEtWmEtei1fXS9nXG5cbmZ1bmN0aW9uIGJhc2U2NGNsZWFuIChzdHIpIHtcbiAgLy8gTm9kZSB0YWtlcyBlcXVhbCBzaWducyBhcyBlbmQgb2YgdGhlIEJhc2U2NCBlbmNvZGluZ1xuICBzdHIgPSBzdHIuc3BsaXQoJz0nKVswXVxuICAvLyBOb2RlIHN0cmlwcyBvdXQgaW52YWxpZCBjaGFyYWN0ZXJzIGxpa2UgXFxuIGFuZCBcXHQgZnJvbSB0aGUgc3RyaW5nLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgc3RyID0gc3RyLnRyaW0oKS5yZXBsYWNlKElOVkFMSURfQkFTRTY0X1JFLCAnJylcbiAgLy8gTm9kZSBjb252ZXJ0cyBzdHJpbmdzIHdpdGggbGVuZ3RoIDwgMiB0byAnJ1xuICBpZiAoc3RyLmxlbmd0aCA8IDIpIHJldHVybiAnJ1xuICAvLyBOb2RlIGFsbG93cyBmb3Igbm9uLXBhZGRlZCBiYXNlNjQgc3RyaW5ncyAobWlzc2luZyB0cmFpbGluZyA9PT0pLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgd2hpbGUgKHN0ci5sZW5ndGggJSA0ICE9PSAwKSB7XG4gICAgc3RyID0gc3RyICsgJz0nXG4gIH1cbiAgcmV0dXJuIHN0clxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIGxldCBjb2RlUG9pbnRcbiAgY29uc3QgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aFxuICBsZXQgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcbiAgY29uc3QgYnl0ZXMgPSBbXVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb2RlUG9pbnQgPSBzdHJpbmcuY2hhckNvZGVBdChpKVxuXG4gICAgLy8gaXMgc3Vycm9nYXRlIGNvbXBvbmVudFxuICAgIGlmIChjb2RlUG9pbnQgPiAweEQ3RkYgJiYgY29kZVBvaW50IDwgMHhFMDAwKSB7XG4gICAgICAvLyBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCFsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAgIC8vIG5vIGxlYWQgeWV0XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPiAweERCRkYpIHtcbiAgICAgICAgICAvLyB1bmV4cGVjdGVkIHRyYWlsXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgLy8gdW5wYWlyZWQgbGVhZFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyB2YWxpZCBsZWFkXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyAyIGxlYWRzIGluIGEgcm93XG4gICAgICBpZiAoY29kZVBvaW50IDwgMHhEQzAwKSB7XG4gICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIHZhbGlkIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICBjb2RlUG9pbnQgPSAobGVhZFN1cnJvZ2F0ZSAtIDB4RDgwMCA8PCAxMCB8IGNvZGVQb2ludCAtIDB4REMwMCkgKyAweDEwMDAwXG4gICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAvLyB2YWxpZCBibXAgY2hhciwgYnV0IGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICB9XG5cbiAgICBsZWFkU3Vycm9nYXRlID0gbnVsbFxuXG4gICAgLy8gZW5jb2RlIHV0ZjhcbiAgICBpZiAoY29kZVBvaW50IDwgMHg4MCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKGNvZGVQb2ludClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4ODAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgfCAweEMwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDIHwgMHhFMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gNCkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4MTIgfCAweEYwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBieXRlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVRvQnl0ZXMgKHN0cikge1xuICBjb25zdCBieXRlQXJyYXkgPSBbXVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIGxldCBjLCBoaSwgbG9cbiAgY29uc3QgYnl0ZUFycmF5ID0gW11cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcblxuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKVxuICAgIGhpID0gYyA+PiA4XG4gICAgbG8gPSBjICUgMjU2XG4gICAgYnl0ZUFycmF5LnB1c2gobG8pXG4gICAgYnl0ZUFycmF5LnB1c2goaGkpXG4gIH1cblxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikge1xuICByZXR1cm4gYmFzZTY0LnRvQnl0ZUFycmF5KGJhc2U2NGNsZWFuKHN0cikpXG59XG5cbmZ1bmN0aW9uIGJsaXRCdWZmZXIgKHNyYywgZHN0LCBvZmZzZXQsIGxlbmd0aCkge1xuICBsZXQgaVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpIGJyZWFrXG4gICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuLy8gQXJyYXlCdWZmZXIgb3IgVWludDhBcnJheSBvYmplY3RzIGZyb20gb3RoZXIgY29udGV4dHMgKGkuZS4gaWZyYW1lcykgZG8gbm90IHBhc3Ncbi8vIHRoZSBgaW5zdGFuY2VvZmAgY2hlY2sgYnV0IHRoZXkgc2hvdWxkIGJlIHRyZWF0ZWQgYXMgb2YgdGhhdCB0eXBlLlxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9pc3N1ZXMvMTY2XG5mdW5jdGlvbiBpc0luc3RhbmNlIChvYmosIHR5cGUpIHtcbiAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIHR5cGUgfHxcbiAgICAob2JqICE9IG51bGwgJiYgb2JqLmNvbnN0cnVjdG9yICE9IG51bGwgJiYgb2JqLmNvbnN0cnVjdG9yLm5hbWUgIT0gbnVsbCAmJlxuICAgICAgb2JqLmNvbnN0cnVjdG9yLm5hbWUgPT09IHR5cGUubmFtZSlcbn1cbmZ1bmN0aW9uIG51bWJlcklzTmFOIChvYmopIHtcbiAgLy8gRm9yIElFMTEgc3VwcG9ydFxuICByZXR1cm4gb2JqICE9PSBvYmogLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbn1cblxuLy8gQ3JlYXRlIGxvb2t1cCB0YWJsZSBmb3IgYHRvU3RyaW5nKCdoZXgnKWBcbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvaXNzdWVzLzIxOVxuY29uc3QgaGV4U2xpY2VMb29rdXBUYWJsZSA9IChmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IGFscGhhYmV0ID0gJzAxMjM0NTY3ODlhYmNkZWYnXG4gIGNvbnN0IHRhYmxlID0gbmV3IEFycmF5KDI1NilcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgKytpKSB7XG4gICAgY29uc3QgaTE2ID0gaSAqIDE2XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCAxNjsgKytqKSB7XG4gICAgICB0YWJsZVtpMTYgKyBqXSA9IGFscGhhYmV0W2ldICsgYWxwaGFiZXRbal1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRhYmxlXG59KSgpXG5cbi8vIFJldHVybiBub3QgZnVuY3Rpb24gd2l0aCBFcnJvciBpZiBCaWdJbnQgbm90IHN1cHBvcnRlZFxuZnVuY3Rpb24gZGVmaW5lQmlnSW50TWV0aG9kIChmbikge1xuICByZXR1cm4gdHlwZW9mIEJpZ0ludCA9PT0gJ3VuZGVmaW5lZCcgPyBCdWZmZXJCaWdJbnROb3REZWZpbmVkIDogZm5cbn1cblxuZnVuY3Rpb24gQnVmZmVyQmlnSW50Tm90RGVmaW5lZCAoKSB7XG4gIHRocm93IG5ldyBFcnJvcignQmlnSW50IG5vdCBzdXBwb3J0ZWQnKVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIFwiMTAwXCI6IFwiQ29udGludWVcIixcbiAgXCIxMDFcIjogXCJTd2l0Y2hpbmcgUHJvdG9jb2xzXCIsXG4gIFwiMTAyXCI6IFwiUHJvY2Vzc2luZ1wiLFxuICBcIjIwMFwiOiBcIk9LXCIsXG4gIFwiMjAxXCI6IFwiQ3JlYXRlZFwiLFxuICBcIjIwMlwiOiBcIkFjY2VwdGVkXCIsXG4gIFwiMjAzXCI6IFwiTm9uLUF1dGhvcml0YXRpdmUgSW5mb3JtYXRpb25cIixcbiAgXCIyMDRcIjogXCJObyBDb250ZW50XCIsXG4gIFwiMjA1XCI6IFwiUmVzZXQgQ29udGVudFwiLFxuICBcIjIwNlwiOiBcIlBhcnRpYWwgQ29udGVudFwiLFxuICBcIjIwN1wiOiBcIk11bHRpLVN0YXR1c1wiLFxuICBcIjIwOFwiOiBcIkFscmVhZHkgUmVwb3J0ZWRcIixcbiAgXCIyMjZcIjogXCJJTSBVc2VkXCIsXG4gIFwiMzAwXCI6IFwiTXVsdGlwbGUgQ2hvaWNlc1wiLFxuICBcIjMwMVwiOiBcIk1vdmVkIFBlcm1hbmVudGx5XCIsXG4gIFwiMzAyXCI6IFwiRm91bmRcIixcbiAgXCIzMDNcIjogXCJTZWUgT3RoZXJcIixcbiAgXCIzMDRcIjogXCJOb3QgTW9kaWZpZWRcIixcbiAgXCIzMDVcIjogXCJVc2UgUHJveHlcIixcbiAgXCIzMDdcIjogXCJUZW1wb3JhcnkgUmVkaXJlY3RcIixcbiAgXCIzMDhcIjogXCJQZXJtYW5lbnQgUmVkaXJlY3RcIixcbiAgXCI0MDBcIjogXCJCYWQgUmVxdWVzdFwiLFxuICBcIjQwMVwiOiBcIlVuYXV0aG9yaXplZFwiLFxuICBcIjQwMlwiOiBcIlBheW1lbnQgUmVxdWlyZWRcIixcbiAgXCI0MDNcIjogXCJGb3JiaWRkZW5cIixcbiAgXCI0MDRcIjogXCJOb3QgRm91bmRcIixcbiAgXCI0MDVcIjogXCJNZXRob2QgTm90IEFsbG93ZWRcIixcbiAgXCI0MDZcIjogXCJOb3QgQWNjZXB0YWJsZVwiLFxuICBcIjQwN1wiOiBcIlByb3h5IEF1dGhlbnRpY2F0aW9uIFJlcXVpcmVkXCIsXG4gIFwiNDA4XCI6IFwiUmVxdWVzdCBUaW1lb3V0XCIsXG4gIFwiNDA5XCI6IFwiQ29uZmxpY3RcIixcbiAgXCI0MTBcIjogXCJHb25lXCIsXG4gIFwiNDExXCI6IFwiTGVuZ3RoIFJlcXVpcmVkXCIsXG4gIFwiNDEyXCI6IFwiUHJlY29uZGl0aW9uIEZhaWxlZFwiLFxuICBcIjQxM1wiOiBcIlBheWxvYWQgVG9vIExhcmdlXCIsXG4gIFwiNDE0XCI6IFwiVVJJIFRvbyBMb25nXCIsXG4gIFwiNDE1XCI6IFwiVW5zdXBwb3J0ZWQgTWVkaWEgVHlwZVwiLFxuICBcIjQxNlwiOiBcIlJhbmdlIE5vdCBTYXRpc2ZpYWJsZVwiLFxuICBcIjQxN1wiOiBcIkV4cGVjdGF0aW9uIEZhaWxlZFwiLFxuICBcIjQxOFwiOiBcIkknbSBhIHRlYXBvdFwiLFxuICBcIjQyMVwiOiBcIk1pc2RpcmVjdGVkIFJlcXVlc3RcIixcbiAgXCI0MjJcIjogXCJVbnByb2Nlc3NhYmxlIEVudGl0eVwiLFxuICBcIjQyM1wiOiBcIkxvY2tlZFwiLFxuICBcIjQyNFwiOiBcIkZhaWxlZCBEZXBlbmRlbmN5XCIsXG4gIFwiNDI1XCI6IFwiVW5vcmRlcmVkIENvbGxlY3Rpb25cIixcbiAgXCI0MjZcIjogXCJVcGdyYWRlIFJlcXVpcmVkXCIsXG4gIFwiNDI4XCI6IFwiUHJlY29uZGl0aW9uIFJlcXVpcmVkXCIsXG4gIFwiNDI5XCI6IFwiVG9vIE1hbnkgUmVxdWVzdHNcIixcbiAgXCI0MzFcIjogXCJSZXF1ZXN0IEhlYWRlciBGaWVsZHMgVG9vIExhcmdlXCIsXG4gIFwiNDUxXCI6IFwiVW5hdmFpbGFibGUgRm9yIExlZ2FsIFJlYXNvbnNcIixcbiAgXCI1MDBcIjogXCJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3JcIixcbiAgXCI1MDFcIjogXCJOb3QgSW1wbGVtZW50ZWRcIixcbiAgXCI1MDJcIjogXCJCYWQgR2F0ZXdheVwiLFxuICBcIjUwM1wiOiBcIlNlcnZpY2UgVW5hdmFpbGFibGVcIixcbiAgXCI1MDRcIjogXCJHYXRld2F5IFRpbWVvdXRcIixcbiAgXCI1MDVcIjogXCJIVFRQIFZlcnNpb24gTm90IFN1cHBvcnRlZFwiLFxuICBcIjUwNlwiOiBcIlZhcmlhbnQgQWxzbyBOZWdvdGlhdGVzXCIsXG4gIFwiNTA3XCI6IFwiSW5zdWZmaWNpZW50IFN0b3JhZ2VcIixcbiAgXCI1MDhcIjogXCJMb29wIERldGVjdGVkXCIsXG4gIFwiNTA5XCI6IFwiQmFuZHdpZHRoIExpbWl0IEV4Y2VlZGVkXCIsXG4gIFwiNTEwXCI6IFwiTm90IEV4dGVuZGVkXCIsXG4gIFwiNTExXCI6IFwiTmV0d29yayBBdXRoZW50aWNhdGlvbiBSZXF1aXJlZFwiXG59XG4iLCJ2YXIgY2hhcmVuYyA9IHtcbiAgLy8gVVRGLTggZW5jb2RpbmdcbiAgdXRmODoge1xuICAgIC8vIENvbnZlcnQgYSBzdHJpbmcgdG8gYSBieXRlIGFycmF5XG4gICAgc3RyaW5nVG9CeXRlczogZnVuY3Rpb24oc3RyKSB7XG4gICAgICByZXR1cm4gY2hhcmVuYy5iaW4uc3RyaW5nVG9CeXRlcyh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoc3RyKSkpO1xuICAgIH0sXG5cbiAgICAvLyBDb252ZXJ0IGEgYnl0ZSBhcnJheSB0byBhIHN0cmluZ1xuICAgIGJ5dGVzVG9TdHJpbmc6IGZ1bmN0aW9uKGJ5dGVzKSB7XG4gICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShjaGFyZW5jLmJpbi5ieXRlc1RvU3RyaW5nKGJ5dGVzKSkpO1xuICAgIH1cbiAgfSxcblxuICAvLyBCaW5hcnkgZW5jb2RpbmdcbiAgYmluOiB7XG4gICAgLy8gQ29udmVydCBhIHN0cmluZyB0byBhIGJ5dGUgYXJyYXlcbiAgICBzdHJpbmdUb0J5dGVzOiBmdW5jdGlvbihzdHIpIHtcbiAgICAgIGZvciAodmFyIGJ5dGVzID0gW10sIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKVxuICAgICAgICBieXRlcy5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRik7XG4gICAgICByZXR1cm4gYnl0ZXM7XG4gICAgfSxcblxuICAgIC8vIENvbnZlcnQgYSBieXRlIGFycmF5IHRvIGEgc3RyaW5nXG4gICAgYnl0ZXNUb1N0cmluZzogZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgIGZvciAodmFyIHN0ciA9IFtdLCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSsrKVxuICAgICAgICBzdHIucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldKSk7XG4gICAgICByZXR1cm4gc3RyLmpvaW4oJycpO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBjaGFyZW5jO1xuIiwiKGZ1bmN0aW9uKCkge1xuICB2YXIgYmFzZTY0bWFwXG4gICAgICA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJyxcblxuICBjcnlwdCA9IHtcbiAgICAvLyBCaXQtd2lzZSByb3RhdGlvbiBsZWZ0XG4gICAgcm90bDogZnVuY3Rpb24obiwgYikge1xuICAgICAgcmV0dXJuIChuIDw8IGIpIHwgKG4gPj4+ICgzMiAtIGIpKTtcbiAgICB9LFxuXG4gICAgLy8gQml0LXdpc2Ugcm90YXRpb24gcmlnaHRcbiAgICByb3RyOiBmdW5jdGlvbihuLCBiKSB7XG4gICAgICByZXR1cm4gKG4gPDwgKDMyIC0gYikpIHwgKG4gPj4+IGIpO1xuICAgIH0sXG5cbiAgICAvLyBTd2FwIGJpZy1lbmRpYW4gdG8gbGl0dGxlLWVuZGlhbiBhbmQgdmljZSB2ZXJzYVxuICAgIGVuZGlhbjogZnVuY3Rpb24obikge1xuICAgICAgLy8gSWYgbnVtYmVyIGdpdmVuLCBzd2FwIGVuZGlhblxuICAgICAgaWYgKG4uY29uc3RydWN0b3IgPT0gTnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBjcnlwdC5yb3RsKG4sIDgpICYgMHgwMEZGMDBGRiB8IGNyeXB0LnJvdGwobiwgMjQpICYgMHhGRjAwRkYwMDtcbiAgICAgIH1cblxuICAgICAgLy8gRWxzZSwgYXNzdW1lIGFycmF5IGFuZCBzd2FwIGFsbCBpdGVtc1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuLmxlbmd0aDsgaSsrKVxuICAgICAgICBuW2ldID0gY3J5cHQuZW5kaWFuKG5baV0pO1xuICAgICAgcmV0dXJuIG47XG4gICAgfSxcblxuICAgIC8vIEdlbmVyYXRlIGFuIGFycmF5IG9mIGFueSBsZW5ndGggb2YgcmFuZG9tIGJ5dGVzXG4gICAgcmFuZG9tQnl0ZXM6IGZ1bmN0aW9uKG4pIHtcbiAgICAgIGZvciAodmFyIGJ5dGVzID0gW107IG4gPiAwOyBuLS0pXG4gICAgICAgIGJ5dGVzLnB1c2goTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjU2KSk7XG4gICAgICByZXR1cm4gYnl0ZXM7XG4gICAgfSxcblxuICAgIC8vIENvbnZlcnQgYSBieXRlIGFycmF5IHRvIGJpZy1lbmRpYW4gMzItYml0IHdvcmRzXG4gICAgYnl0ZXNUb1dvcmRzOiBmdW5jdGlvbihieXRlcykge1xuICAgICAgZm9yICh2YXIgd29yZHMgPSBbXSwgaSA9IDAsIGIgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpKyssIGIgKz0gOClcbiAgICAgICAgd29yZHNbYiA+Pj4gNV0gfD0gYnl0ZXNbaV0gPDwgKDI0IC0gYiAlIDMyKTtcbiAgICAgIHJldHVybiB3b3JkcztcbiAgICB9LFxuXG4gICAgLy8gQ29udmVydCBiaWctZW5kaWFuIDMyLWJpdCB3b3JkcyB0byBhIGJ5dGUgYXJyYXlcbiAgICB3b3Jkc1RvQnl0ZXM6IGZ1bmN0aW9uKHdvcmRzKSB7XG4gICAgICBmb3IgKHZhciBieXRlcyA9IFtdLCBiID0gMDsgYiA8IHdvcmRzLmxlbmd0aCAqIDMyOyBiICs9IDgpXG4gICAgICAgIGJ5dGVzLnB1c2goKHdvcmRzW2IgPj4+IDVdID4+PiAoMjQgLSBiICUgMzIpKSAmIDB4RkYpO1xuICAgICAgcmV0dXJuIGJ5dGVzO1xuICAgIH0sXG5cbiAgICAvLyBDb252ZXJ0IGEgYnl0ZSBhcnJheSB0byBhIGhleCBzdHJpbmdcbiAgICBieXRlc1RvSGV4OiBmdW5jdGlvbihieXRlcykge1xuICAgICAgZm9yICh2YXIgaGV4ID0gW10sIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaGV4LnB1c2goKGJ5dGVzW2ldID4+PiA0KS50b1N0cmluZygxNikpO1xuICAgICAgICBoZXgucHVzaCgoYnl0ZXNbaV0gJiAweEYpLnRvU3RyaW5nKDE2KSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGV4LmpvaW4oJycpO1xuICAgIH0sXG5cbiAgICAvLyBDb252ZXJ0IGEgaGV4IHN0cmluZyB0byBhIGJ5dGUgYXJyYXlcbiAgICBoZXhUb0J5dGVzOiBmdW5jdGlvbihoZXgpIHtcbiAgICAgIGZvciAodmFyIGJ5dGVzID0gW10sIGMgPSAwOyBjIDwgaGV4Lmxlbmd0aDsgYyArPSAyKVxuICAgICAgICBieXRlcy5wdXNoKHBhcnNlSW50KGhleC5zdWJzdHIoYywgMiksIDE2KSk7XG4gICAgICByZXR1cm4gYnl0ZXM7XG4gICAgfSxcblxuICAgIC8vIENvbnZlcnQgYSBieXRlIGFycmF5IHRvIGEgYmFzZS02NCBzdHJpbmdcbiAgICBieXRlc1RvQmFzZTY0OiBmdW5jdGlvbihieXRlcykge1xuICAgICAgZm9yICh2YXIgYmFzZTY0ID0gW10sIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgdmFyIHRyaXBsZXQgPSAoYnl0ZXNbaV0gPDwgMTYpIHwgKGJ5dGVzW2kgKyAxXSA8PCA4KSB8IGJ5dGVzW2kgKyAyXTtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCA0OyBqKyspXG4gICAgICAgICAgaWYgKGkgKiA4ICsgaiAqIDYgPD0gYnl0ZXMubGVuZ3RoICogOClcbiAgICAgICAgICAgIGJhc2U2NC5wdXNoKGJhc2U2NG1hcC5jaGFyQXQoKHRyaXBsZXQgPj4+IDYgKiAoMyAtIGopKSAmIDB4M0YpKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBiYXNlNjQucHVzaCgnPScpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2U2NC5qb2luKCcnKTtcbiAgICB9LFxuXG4gICAgLy8gQ29udmVydCBhIGJhc2UtNjQgc3RyaW5nIHRvIGEgYnl0ZSBhcnJheVxuICAgIGJhc2U2NFRvQnl0ZXM6IGZ1bmN0aW9uKGJhc2U2NCkge1xuICAgICAgLy8gUmVtb3ZlIG5vbi1iYXNlLTY0IGNoYXJhY3RlcnNcbiAgICAgIGJhc2U2NCA9IGJhc2U2NC5yZXBsYWNlKC9bXkEtWjAtOStcXC9dL2lnLCAnJyk7XG5cbiAgICAgIGZvciAodmFyIGJ5dGVzID0gW10sIGkgPSAwLCBpbW9kNCA9IDA7IGkgPCBiYXNlNjQubGVuZ3RoO1xuICAgICAgICAgIGltb2Q0ID0gKytpICUgNCkge1xuICAgICAgICBpZiAoaW1vZDQgPT0gMCkgY29udGludWU7XG4gICAgICAgIGJ5dGVzLnB1c2goKChiYXNlNjRtYXAuaW5kZXhPZihiYXNlNjQuY2hhckF0KGkgLSAxKSlcbiAgICAgICAgICAgICYgKE1hdGgucG93KDIsIC0yICogaW1vZDQgKyA4KSAtIDEpKSA8PCAoaW1vZDQgKiAyKSlcbiAgICAgICAgICAgIHwgKGJhc2U2NG1hcC5pbmRleE9mKGJhc2U2NC5jaGFyQXQoaSkpID4+PiAoNiAtIGltb2Q0ICogMikpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBieXRlcztcbiAgICB9XG4gIH07XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBjcnlwdDtcbn0pKCk7XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUiA9IHR5cGVvZiBSZWZsZWN0ID09PSAnb2JqZWN0JyA/IFJlZmxlY3QgOiBudWxsXG52YXIgUmVmbGVjdEFwcGx5ID0gUiAmJiB0eXBlb2YgUi5hcHBseSA9PT0gJ2Z1bmN0aW9uJ1xuICA/IFIuYXBwbHlcbiAgOiBmdW5jdGlvbiBSZWZsZWN0QXBwbHkodGFyZ2V0LCByZWNlaXZlciwgYXJncykge1xuICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbCh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKTtcbiAgfVxuXG52YXIgUmVmbGVjdE93bktleXNcbmlmIChSICYmIHR5cGVvZiBSLm93bktleXMgPT09ICdmdW5jdGlvbicpIHtcbiAgUmVmbGVjdE93bktleXMgPSBSLm93bktleXNcbn0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpXG4gICAgICAuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSk7XG4gIH07XG59IGVsc2Uge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBQcm9jZXNzRW1pdFdhcm5pbmcod2FybmluZykge1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLndhcm4pIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbn1cblxudmFyIE51bWJlcklzTmFOID0gTnVtYmVyLmlzTmFOIHx8IGZ1bmN0aW9uIE51bWJlcklzTmFOKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgRXZlbnRFbWl0dGVyLmluaXQuY2FsbCh0aGlzKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xubW9kdWxlLmV4cG9ydHMub25jZSA9IG9uY2U7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzQ291bnQgPSAwO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG52YXIgZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG5mdW5jdGlvbiBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKSB7XG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRFbWl0dGVyLCAnZGVmYXVsdE1heExpc3RlbmVycycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1heExpc3RlbmVycztcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihhcmcpIHtcbiAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ251bWJlcicgfHwgYXJnIDwgMCB8fCBOdW1iZXJJc05hTihhcmcpKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiZGVmYXVsdE1heExpc3RlbmVyc1wiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBhcmcgKyAnLicpO1xuICAgIH1cbiAgICBkZWZhdWx0TWF4TGlzdGVuZXJzID0gYXJnO1xuICB9XG59KTtcblxuRXZlbnRFbWl0dGVyLmluaXQgPSBmdW5jdGlvbigpIHtcblxuICBpZiAodGhpcy5fZXZlbnRzID09PSB1bmRlZmluZWQgfHxcbiAgICAgIHRoaXMuX2V2ZW50cyA9PT0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLl9ldmVudHMpIHtcbiAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgfVxuXG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG59O1xuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXRNYXhMaXN0ZW5lcnMobikge1xuICBpZiAodHlwZW9mIG4gIT09ICdudW1iZXInIHx8IG4gPCAwIHx8IE51bWJlcklzTmFOKG4pKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcIm5cIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgbiArICcuJyk7XG4gIH1cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBfZ2V0TWF4TGlzdGVuZXJzKHRoYXQpIHtcbiAgaWYgKHRoYXQuX21heExpc3RlbmVycyA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcbiAgcmV0dXJuIHRoYXQuX21heExpc3RlbmVycztcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5nZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBnZXRNYXhMaXN0ZW5lcnMoKSB7XG4gIHJldHVybiBfZ2V0TWF4TGlzdGVuZXJzKHRoaXMpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdCh0eXBlKSB7XG4gIHZhciBhcmdzID0gW107XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgdmFyIGRvRXJyb3IgPSAodHlwZSA9PT0gJ2Vycm9yJyk7XG5cbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKVxuICAgIGRvRXJyb3IgPSAoZG9FcnJvciAmJiBldmVudHMuZXJyb3IgPT09IHVuZGVmaW5lZCk7XG4gIGVsc2UgaWYgKCFkb0Vycm9yKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmIChkb0Vycm9yKSB7XG4gICAgdmFyIGVyO1xuICAgIGlmIChhcmdzLmxlbmd0aCA+IDApXG4gICAgICBlciA9IGFyZ3NbMF07XG4gICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIC8vIE5vdGU6IFRoZSBjb21tZW50cyBvbiB0aGUgYHRocm93YCBsaW5lcyBhcmUgaW50ZW50aW9uYWwsIHRoZXkgc2hvd1xuICAgICAgLy8gdXAgaW4gTm9kZSdzIG91dHB1dCBpZiB0aGlzIHJlc3VsdHMgaW4gYW4gdW5oYW5kbGVkIGV4Y2VwdGlvbi5cbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgIH1cbiAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcignVW5oYW5kbGVkIGVycm9yLicgKyAoZXIgPyAnICgnICsgZXIubWVzc2FnZSArICcpJyA6ICcnKSk7XG4gICAgZXJyLmNvbnRleHQgPSBlcjtcbiAgICB0aHJvdyBlcnI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gIH1cblxuICB2YXIgaGFuZGxlciA9IGV2ZW50c1t0eXBlXTtcblxuICBpZiAoaGFuZGxlciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBSZWZsZWN0QXBwbHkoaGFuZGxlciwgdGhpcywgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIFJlZmxlY3RBcHBseShsaXN0ZW5lcnNbaV0sIHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5mdW5jdGlvbiBfYWRkTGlzdGVuZXIodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciwgcHJlcGVuZCkge1xuICB2YXIgbTtcbiAgdmFyIGV2ZW50cztcbiAgdmFyIGV4aXN0aW5nO1xuXG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpIHtcbiAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGFyZ2V0Ll9ldmVudHNDb3VudCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gXCJuZXdMaXN0ZW5lclwiISBCZWZvcmVcbiAgICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCBcIm5ld0xpc3RlbmVyXCIuXG4gICAgaWYgKGV2ZW50cy5uZXdMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0YXJnZXQuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgPyBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICAgICAgLy8gUmUtYXNzaWduIGBldmVudHNgIGJlY2F1c2UgYSBuZXdMaXN0ZW5lciBoYW5kbGVyIGNvdWxkIGhhdmUgY2F1c2VkIHRoZVxuICAgICAgLy8gdGhpcy5fZXZlbnRzIHRvIGJlIGFzc2lnbmVkIHRvIGEgbmV3IG9iamVjdFxuICAgICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gICAgfVxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdO1xuICB9XG5cbiAgaWYgKGV4aXN0aW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xuICAgICsrdGFyZ2V0Ll9ldmVudHNDb3VudDtcbiAgfSBlbHNlIHtcbiAgICBpZiAodHlwZW9mIGV4aXN0aW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cbiAgICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID1cbiAgICAgICAgcHJlcGVuZCA/IFtsaXN0ZW5lciwgZXhpc3RpbmddIDogW2V4aXN0aW5nLCBsaXN0ZW5lcl07XG4gICAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhcHBlbmQuXG4gICAgfSBlbHNlIGlmIChwcmVwZW5kKSB7XG4gICAgICBleGlzdGluZy51bnNoaWZ0KGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhpc3RpbmcucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgICBtID0gX2dldE1heExpc3RlbmVycyh0YXJnZXQpO1xuICAgIGlmIChtID4gMCAmJiBleGlzdGluZy5sZW5ndGggPiBtICYmICFleGlzdGluZy53YXJuZWQpIHtcbiAgICAgIGV4aXN0aW5nLndhcm5lZCA9IHRydWU7XG4gICAgICAvLyBObyBlcnJvciBjb2RlIGZvciB0aGlzIHNpbmNlIGl0IGlzIGEgV2FybmluZ1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICB2YXIgdyA9IG5ldyBFcnJvcignUG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcubGVuZ3RoICsgJyAnICsgU3RyaW5nKHR5cGUpICsgJyBsaXN0ZW5lcnMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdhZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdpbmNyZWFzZSBsaW1pdCcpO1xuICAgICAgdy5uYW1lID0gJ01heExpc3RlbmVyc0V4Y2VlZGVkV2FybmluZyc7XG4gICAgICB3LmVtaXR0ZXIgPSB0YXJnZXQ7XG4gICAgICB3LnR5cGUgPSB0eXBlO1xuICAgICAgdy5jb3VudCA9IGV4aXN0aW5nLmxlbmd0aDtcbiAgICAgIFByb2Nlc3NFbWl0V2FybmluZyh3KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24gYWRkTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZExpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIHRydWUpO1xuICAgIH07XG5cbmZ1bmN0aW9uIG9uY2VXcmFwcGVyKCkge1xuICBpZiAoIXRoaXMuZmlyZWQpIHtcbiAgICB0aGlzLnRhcmdldC5yZW1vdmVMaXN0ZW5lcih0aGlzLnR5cGUsIHRoaXMud3JhcEZuKTtcbiAgICB0aGlzLmZpcmVkID0gdHJ1ZTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMClcbiAgICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmNhbGwodGhpcy50YXJnZXQpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmFwcGx5KHRoaXMudGFyZ2V0LCBhcmd1bWVudHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9vbmNlV3JhcCh0YXJnZXQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBzdGF0ZSA9IHsgZmlyZWQ6IGZhbHNlLCB3cmFwRm46IHVuZGVmaW5lZCwgdGFyZ2V0OiB0YXJnZXQsIHR5cGU6IHR5cGUsIGxpc3RlbmVyOiBsaXN0ZW5lciB9O1xuICB2YXIgd3JhcHBlZCA9IG9uY2VXcmFwcGVyLmJpbmQoc3RhdGUpO1xuICB3cmFwcGVkLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHN0YXRlLndyYXBGbiA9IHdyYXBwZWQ7XG4gIHJldHVybiB3cmFwcGVkO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuICB0aGlzLm9uKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZE9uY2VMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZE9uY2VMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgICB0aGlzLnByZXBlbmRMaXN0ZW5lcih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbi8vIEVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZiBhbmQgb25seSBpZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGxpc3QsIGV2ZW50cywgcG9zaXRpb24sIGksIG9yaWdpbmFsTGlzdGVuZXI7XG5cbiAgICAgIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBsaXN0ID0gZXZlbnRzW3R5cGVdO1xuICAgICAgaWYgKGxpc3QgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fCBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdC5saXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpc3QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcG9zaXRpb24gPSAtMTtcblxuICAgICAgICBmb3IgKGkgPSBsaXN0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8IGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBvcmlnaW5hbExpc3RlbmVyID0gbGlzdFtpXS5saXN0ZW5lcjtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAwKVxuICAgICAgICAgIGxpc3Quc2hpZnQoKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgc3BsaWNlT25lKGxpc3QsIHBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICBldmVudHNbdHlwZV0gPSBsaXN0WzBdO1xuXG4gICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgb3JpZ2luYWxMaXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyh0eXBlKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzLCBldmVudHMsIGk7XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50c1t0eXBlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhldmVudHMpO1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgbGlzdGVuZXJzID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gICAgICB9IGVsc2UgaWYgKGxpc3RlbmVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIExJRk8gb3JkZXJcbiAgICAgICAgZm9yIChpID0gbGlzdGVuZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbmZ1bmN0aW9uIF9saXN0ZW5lcnModGFyZ2V0LCB0eXBlLCB1bndyYXApIHtcbiAgdmFyIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gW107XG5cbiAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG4gIGlmIChldmxpc3RlbmVyID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJylcbiAgICByZXR1cm4gdW53cmFwID8gW2V2bGlzdGVuZXIubGlzdGVuZXIgfHwgZXZsaXN0ZW5lcl0gOiBbZXZsaXN0ZW5lcl07XG5cbiAgcmV0dXJuIHVud3JhcCA/XG4gICAgdW53cmFwTGlzdGVuZXJzKGV2bGlzdGVuZXIpIDogYXJyYXlDbG9uZShldmxpc3RlbmVyLCBldmxpc3RlbmVyLmxlbmd0aCk7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgdHJ1ZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJhd0xpc3RlbmVycyA9IGZ1bmN0aW9uIHJhd0xpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIubGlzdGVuZXJDb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyQ291bnQuY2FsbChlbWl0dGVyLCB0eXBlKTtcbiAgfVxufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gbGlzdGVuZXJDb3VudDtcbmZ1bmN0aW9uIGxpc3RlbmVyQ291bnQodHlwZSkge1xuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2UgaWYgKGV2bGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGV2bGlzdGVuZXIubGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICByZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQgPiAwID8gUmVmbGVjdE93bktleXModGhpcy5fZXZlbnRzKSA6IFtdO1xufTtcblxuZnVuY3Rpb24gYXJyYXlDbG9uZShhcnIsIG4pIHtcbiAgdmFyIGNvcHkgPSBuZXcgQXJyYXkobik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKVxuICAgIGNvcHlbaV0gPSBhcnJbaV07XG4gIHJldHVybiBjb3B5O1xufVxuXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICg7IGluZGV4ICsgMSA8IGxpc3QubGVuZ3RoOyBpbmRleCsrKVxuICAgIGxpc3RbaW5kZXhdID0gbGlzdFtpbmRleCArIDFdO1xuICBsaXN0LnBvcCgpO1xufVxuXG5mdW5jdGlvbiB1bndyYXBMaXN0ZW5lcnMoYXJyKSB7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgKytpKSB7XG4gICAgcmV0W2ldID0gYXJyW2ldLmxpc3RlbmVyIHx8IGFycltpXTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBvbmNlKGVtaXR0ZXIsIG5hbWUpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBmdW5jdGlvbiBlcnJvckxpc3RlbmVyKGVycikge1xuICAgICAgZW1pdHRlci5yZW1vdmVMaXN0ZW5lcihuYW1lLCByZXNvbHZlcik7XG4gICAgICByZWplY3QoZXJyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNvbHZlcigpIHtcbiAgICAgIGlmICh0eXBlb2YgZW1pdHRlci5yZW1vdmVMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBlbWl0dGVyLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIGVycm9yTGlzdGVuZXIpO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZShbXS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIH07XG5cbiAgICBldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXIoZW1pdHRlciwgbmFtZSwgcmVzb2x2ZXIsIHsgb25jZTogdHJ1ZSB9KTtcbiAgICBpZiAobmFtZSAhPT0gJ2Vycm9yJykge1xuICAgICAgYWRkRXJyb3JIYW5kbGVySWZFdmVudEVtaXR0ZXIoZW1pdHRlciwgZXJyb3JMaXN0ZW5lciwgeyBvbmNlOiB0cnVlIH0pO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZEVycm9ySGFuZGxlcklmRXZlbnRFbWl0dGVyKGVtaXR0ZXIsIGhhbmRsZXIsIGZsYWdzKSB7XG4gIGlmICh0eXBlb2YgZW1pdHRlci5vbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGV2ZW50VGFyZ2V0QWdub3N0aWNBZGRMaXN0ZW5lcihlbWl0dGVyLCAnZXJyb3InLCBoYW5kbGVyLCBmbGFncyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyKGVtaXR0ZXIsIG5hbWUsIGxpc3RlbmVyLCBmbGFncykge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIub24gPT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAoZmxhZ3Mub25jZSkge1xuICAgICAgZW1pdHRlci5vbmNlKG5hbWUsIGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW1pdHRlci5vbihuYW1lLCBsaXN0ZW5lcik7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBlbWl0dGVyLmFkZEV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBFdmVudFRhcmdldCBkb2VzIG5vdCBoYXZlIGBlcnJvcmAgZXZlbnQgc2VtYW50aWNzIGxpa2UgTm9kZVxuICAgIC8vIEV2ZW50RW1pdHRlcnMsIHdlIGRvIG5vdCBsaXN0ZW4gZm9yIGBlcnJvcmAgZXZlbnRzIGhlcmUuXG4gICAgZW1pdHRlci5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGZ1bmN0aW9uIHdyYXBMaXN0ZW5lcihhcmcpIHtcbiAgICAgIC8vIElFIGRvZXMgbm90IGhhdmUgYnVpbHRpbiBgeyBvbmNlOiB0cnVlIH1gIHN1cHBvcnQgc28gd2VcbiAgICAgIC8vIGhhdmUgdG8gZG8gaXQgbWFudWFsbHkuXG4gICAgICBpZiAoZmxhZ3Mub25jZSkge1xuICAgICAgICBlbWl0dGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIobmFtZSwgd3JhcExpc3RlbmVyKTtcbiAgICAgIH1cbiAgICAgIGxpc3RlbmVyKGFyZyk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwiZW1pdHRlclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBFdmVudEVtaXR0ZXIuIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBlbWl0dGVyKTtcbiAgfVxufVxuIiwidmFyIGh0dHAgPSByZXF1aXJlKCdodHRwJylcbnZhciB1cmwgPSByZXF1aXJlKCd1cmwnKVxuXG52YXIgaHR0cHMgPSBtb2R1bGUuZXhwb3J0c1xuXG5mb3IgKHZhciBrZXkgaW4gaHR0cCkge1xuICBpZiAoaHR0cC5oYXNPd25Qcm9wZXJ0eShrZXkpKSBodHRwc1trZXldID0gaHR0cFtrZXldXG59XG5cbmh0dHBzLnJlcXVlc3QgPSBmdW5jdGlvbiAocGFyYW1zLCBjYikge1xuICBwYXJhbXMgPSB2YWxpZGF0ZVBhcmFtcyhwYXJhbXMpXG4gIHJldHVybiBodHRwLnJlcXVlc3QuY2FsbCh0aGlzLCBwYXJhbXMsIGNiKVxufVxuXG5odHRwcy5nZXQgPSBmdW5jdGlvbiAocGFyYW1zLCBjYikge1xuICBwYXJhbXMgPSB2YWxpZGF0ZVBhcmFtcyhwYXJhbXMpXG4gIHJldHVybiBodHRwLmdldC5jYWxsKHRoaXMsIHBhcmFtcywgY2IpXG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlUGFyYW1zIChwYXJhbXMpIHtcbiAgaWYgKHR5cGVvZiBwYXJhbXMgPT09ICdzdHJpbmcnKSB7XG4gICAgcGFyYW1zID0gdXJsLnBhcnNlKHBhcmFtcylcbiAgfVxuICBpZiAoIXBhcmFtcy5wcm90b2NvbCkge1xuICAgIHBhcmFtcy5wcm90b2NvbCA9ICdodHRwczonXG4gIH1cbiAgaWYgKHBhcmFtcy5wcm90b2NvbCAhPT0gJ2h0dHBzOicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Byb3RvY29sIFwiJyArIHBhcmFtcy5wcm90b2NvbCArICdcIiBub3Qgc3VwcG9ydGVkLiBFeHBlY3RlZCBcImh0dHBzOlwiJylcbiAgfVxuICByZXR1cm4gcGFyYW1zXG59XG4iLCIvKiEgaWVlZTc1NC4gQlNELTMtQ2xhdXNlIExpY2Vuc2UuIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZy9vcGVuc291cmNlPiAqL1xuZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwiaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgICAgdmFsdWU6IGN0b3IsXG4gICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9O1xufSBlbHNlIHtcbiAgLy8gb2xkIHNjaG9vbCBzaGltIGZvciBvbGQgYnJvd3NlcnNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBpZiAoc3VwZXJDdG9yKSB7XG4gICAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge31cbiAgICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGVcbiAgICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcbiAgICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvclxuICAgIH1cbiAgfVxufVxuIiwiLyohXG4gKiBEZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIGEgQnVmZmVyXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuXG4vLyBUaGUgX2lzQnVmZmVyIGNoZWNrIGlzIGZvciBTYWZhcmkgNS03IHN1cHBvcnQsIGJlY2F1c2UgaXQncyBtaXNzaW5nXG4vLyBPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yLiBSZW1vdmUgdGhpcyBldmVudHVhbGx5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPSBudWxsICYmIChpc0J1ZmZlcihvYmopIHx8IGlzU2xvd0J1ZmZlcihvYmopIHx8ICEhb2JqLl9pc0J1ZmZlcilcbn1cblxuZnVuY3Rpb24gaXNCdWZmZXIgKG9iaikge1xuICByZXR1cm4gISFvYmouY29uc3RydWN0b3IgJiYgdHlwZW9mIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKVxufVxuXG4vLyBGb3IgTm9kZSB2MC4xMCBzdXBwb3J0LiBSZW1vdmUgdGhpcyBldmVudHVhbGx5LlxuZnVuY3Rpb24gaXNTbG93QnVmZmVyIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmoucmVhZEZsb2F0TEUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG9iai5zbGljZSA9PT0gJ2Z1bmN0aW9uJyAmJiBpc0J1ZmZlcihvYmouc2xpY2UoMCwgMCkpXG59XG4iLCIoZnVuY3Rpb24oKXtcclxuICB2YXIgY3J5cHQgPSByZXF1aXJlKCdjcnlwdCcpLFxyXG4gICAgICB1dGY4ID0gcmVxdWlyZSgnY2hhcmVuYycpLnV0ZjgsXHJcbiAgICAgIGlzQnVmZmVyID0gcmVxdWlyZSgnaXMtYnVmZmVyJyksXHJcbiAgICAgIGJpbiA9IHJlcXVpcmUoJ2NoYXJlbmMnKS5iaW4sXHJcblxyXG4gIC8vIFRoZSBjb3JlXHJcbiAgbWQ1ID0gZnVuY3Rpb24gKG1lc3NhZ2UsIG9wdGlvbnMpIHtcclxuICAgIC8vIENvbnZlcnQgdG8gYnl0ZSBhcnJheVxyXG4gICAgaWYgKG1lc3NhZ2UuY29uc3RydWN0b3IgPT0gU3RyaW5nKVxyXG4gICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmVuY29kaW5nID09PSAnYmluYXJ5JylcclxuICAgICAgICBtZXNzYWdlID0gYmluLnN0cmluZ1RvQnl0ZXMobWVzc2FnZSk7XHJcbiAgICAgIGVsc2VcclxuICAgICAgICBtZXNzYWdlID0gdXRmOC5zdHJpbmdUb0J5dGVzKG1lc3NhZ2UpO1xyXG4gICAgZWxzZSBpZiAoaXNCdWZmZXIobWVzc2FnZSkpXHJcbiAgICAgIG1lc3NhZ2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChtZXNzYWdlLCAwKTtcclxuICAgIGVsc2UgaWYgKCFBcnJheS5pc0FycmF5KG1lc3NhZ2UpICYmIG1lc3NhZ2UuY29uc3RydWN0b3IgIT09IFVpbnQ4QXJyYXkpXHJcbiAgICAgIG1lc3NhZ2UgPSBtZXNzYWdlLnRvU3RyaW5nKCk7XHJcbiAgICAvLyBlbHNlLCBhc3N1bWUgYnl0ZSBhcnJheSBhbHJlYWR5XHJcblxyXG4gICAgdmFyIG0gPSBjcnlwdC5ieXRlc1RvV29yZHMobWVzc2FnZSksXHJcbiAgICAgICAgbCA9IG1lc3NhZ2UubGVuZ3RoICogOCxcclxuICAgICAgICBhID0gIDE3MzI1ODQxOTMsXHJcbiAgICAgICAgYiA9IC0yNzE3MzM4NzksXHJcbiAgICAgICAgYyA9IC0xNzMyNTg0MTk0LFxyXG4gICAgICAgIGQgPSAgMjcxNzMzODc4O1xyXG5cclxuICAgIC8vIFN3YXAgZW5kaWFuXHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG0ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgbVtpXSA9ICgobVtpXSA8PCAgOCkgfCAobVtpXSA+Pj4gMjQpKSAmIDB4MDBGRjAwRkYgfFxyXG4gICAgICAgICAgICAgKChtW2ldIDw8IDI0KSB8IChtW2ldID4+PiAgOCkpICYgMHhGRjAwRkYwMDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBQYWRkaW5nXHJcbiAgICBtW2wgPj4+IDVdIHw9IDB4ODAgPDwgKGwgJSAzMik7XHJcbiAgICBtWygoKGwgKyA2NCkgPj4+IDkpIDw8IDQpICsgMTRdID0gbDtcclxuXHJcbiAgICAvLyBNZXRob2Qgc2hvcnRjdXRzXHJcbiAgICB2YXIgRkYgPSBtZDUuX2ZmLFxyXG4gICAgICAgIEdHID0gbWQ1Ll9nZyxcclxuICAgICAgICBISCA9IG1kNS5faGgsXHJcbiAgICAgICAgSUkgPSBtZDUuX2lpO1xyXG5cclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbS5sZW5ndGg7IGkgKz0gMTYpIHtcclxuXHJcbiAgICAgIHZhciBhYSA9IGEsXHJcbiAgICAgICAgICBiYiA9IGIsXHJcbiAgICAgICAgICBjYyA9IGMsXHJcbiAgICAgICAgICBkZCA9IGQ7XHJcblxyXG4gICAgICBhID0gRkYoYSwgYiwgYywgZCwgbVtpKyAwXSwgIDcsIC02ODA4NzY5MzYpO1xyXG4gICAgICBkID0gRkYoZCwgYSwgYiwgYywgbVtpKyAxXSwgMTIsIC0zODk1NjQ1ODYpO1xyXG4gICAgICBjID0gRkYoYywgZCwgYSwgYiwgbVtpKyAyXSwgMTcsICA2MDYxMDU4MTkpO1xyXG4gICAgICBiID0gRkYoYiwgYywgZCwgYSwgbVtpKyAzXSwgMjIsIC0xMDQ0NTI1MzMwKTtcclxuICAgICAgYSA9IEZGKGEsIGIsIGMsIGQsIG1baSsgNF0sICA3LCAtMTc2NDE4ODk3KTtcclxuICAgICAgZCA9IEZGKGQsIGEsIGIsIGMsIG1baSsgNV0sIDEyLCAgMTIwMDA4MDQyNik7XHJcbiAgICAgIGMgPSBGRihjLCBkLCBhLCBiLCBtW2krIDZdLCAxNywgLTE0NzMyMzEzNDEpO1xyXG4gICAgICBiID0gRkYoYiwgYywgZCwgYSwgbVtpKyA3XSwgMjIsIC00NTcwNTk4Myk7XHJcbiAgICAgIGEgPSBGRihhLCBiLCBjLCBkLCBtW2krIDhdLCAgNywgIDE3NzAwMzU0MTYpO1xyXG4gICAgICBkID0gRkYoZCwgYSwgYiwgYywgbVtpKyA5XSwgMTIsIC0xOTU4NDE0NDE3KTtcclxuICAgICAgYyA9IEZGKGMsIGQsIGEsIGIsIG1baSsxMF0sIDE3LCAtNDIwNjMpO1xyXG4gICAgICBiID0gRkYoYiwgYywgZCwgYSwgbVtpKzExXSwgMjIsIC0xOTkwNDA0MTYyKTtcclxuICAgICAgYSA9IEZGKGEsIGIsIGMsIGQsIG1baSsxMl0sICA3LCAgMTgwNDYwMzY4Mik7XHJcbiAgICAgIGQgPSBGRihkLCBhLCBiLCBjLCBtW2krMTNdLCAxMiwgLTQwMzQxMTAxKTtcclxuICAgICAgYyA9IEZGKGMsIGQsIGEsIGIsIG1baSsxNF0sIDE3LCAtMTUwMjAwMjI5MCk7XHJcbiAgICAgIGIgPSBGRihiLCBjLCBkLCBhLCBtW2krMTVdLCAyMiwgIDEyMzY1MzUzMjkpO1xyXG5cclxuICAgICAgYSA9IEdHKGEsIGIsIGMsIGQsIG1baSsgMV0sICA1LCAtMTY1Nzk2NTEwKTtcclxuICAgICAgZCA9IEdHKGQsIGEsIGIsIGMsIG1baSsgNl0sICA5LCAtMTA2OTUwMTYzMik7XHJcbiAgICAgIGMgPSBHRyhjLCBkLCBhLCBiLCBtW2krMTFdLCAxNCwgIDY0MzcxNzcxMyk7XHJcbiAgICAgIGIgPSBHRyhiLCBjLCBkLCBhLCBtW2krIDBdLCAyMCwgLTM3Mzg5NzMwMik7XHJcbiAgICAgIGEgPSBHRyhhLCBiLCBjLCBkLCBtW2krIDVdLCAgNSwgLTcwMTU1ODY5MSk7XHJcbiAgICAgIGQgPSBHRyhkLCBhLCBiLCBjLCBtW2krMTBdLCAgOSwgIDM4MDE2MDgzKTtcclxuICAgICAgYyA9IEdHKGMsIGQsIGEsIGIsIG1baSsxNV0sIDE0LCAtNjYwNDc4MzM1KTtcclxuICAgICAgYiA9IEdHKGIsIGMsIGQsIGEsIG1baSsgNF0sIDIwLCAtNDA1NTM3ODQ4KTtcclxuICAgICAgYSA9IEdHKGEsIGIsIGMsIGQsIG1baSsgOV0sICA1LCAgNTY4NDQ2NDM4KTtcclxuICAgICAgZCA9IEdHKGQsIGEsIGIsIGMsIG1baSsxNF0sICA5LCAtMTAxOTgwMzY5MCk7XHJcbiAgICAgIGMgPSBHRyhjLCBkLCBhLCBiLCBtW2krIDNdLCAxNCwgLTE4NzM2Mzk2MSk7XHJcbiAgICAgIGIgPSBHRyhiLCBjLCBkLCBhLCBtW2krIDhdLCAyMCwgIDExNjM1MzE1MDEpO1xyXG4gICAgICBhID0gR0coYSwgYiwgYywgZCwgbVtpKzEzXSwgIDUsIC0xNDQ0NjgxNDY3KTtcclxuICAgICAgZCA9IEdHKGQsIGEsIGIsIGMsIG1baSsgMl0sICA5LCAtNTE0MDM3ODQpO1xyXG4gICAgICBjID0gR0coYywgZCwgYSwgYiwgbVtpKyA3XSwgMTQsICAxNzM1MzI4NDczKTtcclxuICAgICAgYiA9IEdHKGIsIGMsIGQsIGEsIG1baSsxMl0sIDIwLCAtMTkyNjYwNzczNCk7XHJcblxyXG4gICAgICBhID0gSEgoYSwgYiwgYywgZCwgbVtpKyA1XSwgIDQsIC0zNzg1NTgpO1xyXG4gICAgICBkID0gSEgoZCwgYSwgYiwgYywgbVtpKyA4XSwgMTEsIC0yMDIyNTc0NDYzKTtcclxuICAgICAgYyA9IEhIKGMsIGQsIGEsIGIsIG1baSsxMV0sIDE2LCAgMTgzOTAzMDU2Mik7XHJcbiAgICAgIGIgPSBISChiLCBjLCBkLCBhLCBtW2krMTRdLCAyMywgLTM1MzA5NTU2KTtcclxuICAgICAgYSA9IEhIKGEsIGIsIGMsIGQsIG1baSsgMV0sICA0LCAtMTUzMDk5MjA2MCk7XHJcbiAgICAgIGQgPSBISChkLCBhLCBiLCBjLCBtW2krIDRdLCAxMSwgIDEyNzI4OTMzNTMpO1xyXG4gICAgICBjID0gSEgoYywgZCwgYSwgYiwgbVtpKyA3XSwgMTYsIC0xNTU0OTc2MzIpO1xyXG4gICAgICBiID0gSEgoYiwgYywgZCwgYSwgbVtpKzEwXSwgMjMsIC0xMDk0NzMwNjQwKTtcclxuICAgICAgYSA9IEhIKGEsIGIsIGMsIGQsIG1baSsxM10sICA0LCAgNjgxMjc5MTc0KTtcclxuICAgICAgZCA9IEhIKGQsIGEsIGIsIGMsIG1baSsgMF0sIDExLCAtMzU4NTM3MjIyKTtcclxuICAgICAgYyA9IEhIKGMsIGQsIGEsIGIsIG1baSsgM10sIDE2LCAtNzIyNTIxOTc5KTtcclxuICAgICAgYiA9IEhIKGIsIGMsIGQsIGEsIG1baSsgNl0sIDIzLCAgNzYwMjkxODkpO1xyXG4gICAgICBhID0gSEgoYSwgYiwgYywgZCwgbVtpKyA5XSwgIDQsIC02NDAzNjQ0ODcpO1xyXG4gICAgICBkID0gSEgoZCwgYSwgYiwgYywgbVtpKzEyXSwgMTEsIC00MjE4MTU4MzUpO1xyXG4gICAgICBjID0gSEgoYywgZCwgYSwgYiwgbVtpKzE1XSwgMTYsICA1MzA3NDI1MjApO1xyXG4gICAgICBiID0gSEgoYiwgYywgZCwgYSwgbVtpKyAyXSwgMjMsIC05OTUzMzg2NTEpO1xyXG5cclxuICAgICAgYSA9IElJKGEsIGIsIGMsIGQsIG1baSsgMF0sICA2LCAtMTk4NjMwODQ0KTtcclxuICAgICAgZCA9IElJKGQsIGEsIGIsIGMsIG1baSsgN10sIDEwLCAgMTEyNjg5MTQxNSk7XHJcbiAgICAgIGMgPSBJSShjLCBkLCBhLCBiLCBtW2krMTRdLCAxNSwgLTE0MTYzNTQ5MDUpO1xyXG4gICAgICBiID0gSUkoYiwgYywgZCwgYSwgbVtpKyA1XSwgMjEsIC01NzQzNDA1NSk7XHJcbiAgICAgIGEgPSBJSShhLCBiLCBjLCBkLCBtW2krMTJdLCAgNiwgIDE3MDA0ODU1NzEpO1xyXG4gICAgICBkID0gSUkoZCwgYSwgYiwgYywgbVtpKyAzXSwgMTAsIC0xODk0OTg2NjA2KTtcclxuICAgICAgYyA9IElJKGMsIGQsIGEsIGIsIG1baSsxMF0sIDE1LCAtMTA1MTUyMyk7XHJcbiAgICAgIGIgPSBJSShiLCBjLCBkLCBhLCBtW2krIDFdLCAyMSwgLTIwNTQ5MjI3OTkpO1xyXG4gICAgICBhID0gSUkoYSwgYiwgYywgZCwgbVtpKyA4XSwgIDYsICAxODczMzEzMzU5KTtcclxuICAgICAgZCA9IElJKGQsIGEsIGIsIGMsIG1baSsxNV0sIDEwLCAtMzA2MTE3NDQpO1xyXG4gICAgICBjID0gSUkoYywgZCwgYSwgYiwgbVtpKyA2XSwgMTUsIC0xNTYwMTk4MzgwKTtcclxuICAgICAgYiA9IElJKGIsIGMsIGQsIGEsIG1baSsxM10sIDIxLCAgMTMwOTE1MTY0OSk7XHJcbiAgICAgIGEgPSBJSShhLCBiLCBjLCBkLCBtW2krIDRdLCAgNiwgLTE0NTUyMzA3MCk7XHJcbiAgICAgIGQgPSBJSShkLCBhLCBiLCBjLCBtW2krMTFdLCAxMCwgLTExMjAyMTAzNzkpO1xyXG4gICAgICBjID0gSUkoYywgZCwgYSwgYiwgbVtpKyAyXSwgMTUsICA3MTg3ODcyNTkpO1xyXG4gICAgICBiID0gSUkoYiwgYywgZCwgYSwgbVtpKyA5XSwgMjEsIC0zNDM0ODU1NTEpO1xyXG5cclxuICAgICAgYSA9IChhICsgYWEpID4+PiAwO1xyXG4gICAgICBiID0gKGIgKyBiYikgPj4+IDA7XHJcbiAgICAgIGMgPSAoYyArIGNjKSA+Pj4gMDtcclxuICAgICAgZCA9IChkICsgZGQpID4+PiAwO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjcnlwdC5lbmRpYW4oW2EsIGIsIGMsIGRdKTtcclxuICB9O1xyXG5cclxuICAvLyBBdXhpbGlhcnkgZnVuY3Rpb25zXHJcbiAgbWQ1Ll9mZiAgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCwgeCwgcywgdCkge1xyXG4gICAgdmFyIG4gPSBhICsgKGIgJiBjIHwgfmIgJiBkKSArICh4ID4+PiAwKSArIHQ7XHJcbiAgICByZXR1cm4gKChuIDw8IHMpIHwgKG4gPj4+ICgzMiAtIHMpKSkgKyBiO1xyXG4gIH07XHJcbiAgbWQ1Ll9nZyAgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCwgeCwgcywgdCkge1xyXG4gICAgdmFyIG4gPSBhICsgKGIgJiBkIHwgYyAmIH5kKSArICh4ID4+PiAwKSArIHQ7XHJcbiAgICByZXR1cm4gKChuIDw8IHMpIHwgKG4gPj4+ICgzMiAtIHMpKSkgKyBiO1xyXG4gIH07XHJcbiAgbWQ1Ll9oaCAgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCwgeCwgcywgdCkge1xyXG4gICAgdmFyIG4gPSBhICsgKGIgXiBjIF4gZCkgKyAoeCA+Pj4gMCkgKyB0O1xyXG4gICAgcmV0dXJuICgobiA8PCBzKSB8IChuID4+PiAoMzIgLSBzKSkpICsgYjtcclxuICB9O1xyXG4gIG1kNS5faWkgID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcclxuICAgIHZhciBuID0gYSArIChjIF4gKGIgfCB+ZCkpICsgKHggPj4+IDApICsgdDtcclxuICAgIHJldHVybiAoKG4gPDwgcykgfCAobiA+Pj4gKDMyIC0gcykpKSArIGI7XHJcbiAgfTtcclxuXHJcbiAgLy8gUGFja2FnZSBwcml2YXRlIGJsb2Nrc2l6ZVxyXG4gIG1kNS5fYmxvY2tzaXplID0gMTY7XHJcbiAgbWQ1Ll9kaWdlc3RzaXplID0gMTY7XHJcblxyXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1lc3NhZ2UsIG9wdGlvbnMpIHtcclxuICAgIGlmIChtZXNzYWdlID09PSB1bmRlZmluZWQgfHwgbWVzc2FnZSA9PT0gbnVsbClcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbGxlZ2FsIGFyZ3VtZW50ICcgKyBtZXNzYWdlKTtcclxuXHJcbiAgICB2YXIgZGlnZXN0Ynl0ZXMgPSBjcnlwdC53b3Jkc1RvQnl0ZXMobWQ1KG1lc3NhZ2UsIG9wdGlvbnMpKTtcclxuICAgIHJldHVybiBvcHRpb25zICYmIG9wdGlvbnMuYXNCeXRlcyA/IGRpZ2VzdGJ5dGVzIDpcclxuICAgICAgICBvcHRpb25zICYmIG9wdGlvbnMuYXNTdHJpbmcgPyBiaW4uYnl0ZXNUb1N0cmluZyhkaWdlc3RieXRlcykgOlxyXG4gICAgICAgIGNyeXB0LmJ5dGVzVG9IZXgoZGlnZXN0Ynl0ZXMpO1xyXG4gIH07XHJcblxyXG59KSgpO1xyXG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxuLy8gSWYgb2JqLmhhc093blByb3BlcnR5IGhhcyBiZWVuIG92ZXJyaWRkZW4sIHRoZW4gY2FsbGluZ1xuLy8gb2JqLmhhc093blByb3BlcnR5KHByb3ApIHdpbGwgYnJlYWsuXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9qb3llbnQvbm9kZS9pc3N1ZXMvMTcwN1xuZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBwcm9wKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihxcywgc2VwLCBlcSwgb3B0aW9ucykge1xuICBzZXAgPSBzZXAgfHwgJyYnO1xuICBlcSA9IGVxIHx8ICc9JztcbiAgdmFyIG9iaiA9IHt9O1xuXG4gIGlmICh0eXBlb2YgcXMgIT09ICdzdHJpbmcnIHx8IHFzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICB2YXIgcmVnZXhwID0gL1xcKy9nO1xuICBxcyA9IHFzLnNwbGl0KHNlcCk7XG5cbiAgdmFyIG1heEtleXMgPSAxMDAwO1xuICBpZiAob3B0aW9ucyAmJiB0eXBlb2Ygb3B0aW9ucy5tYXhLZXlzID09PSAnbnVtYmVyJykge1xuICAgIG1heEtleXMgPSBvcHRpb25zLm1heEtleXM7XG4gIH1cblxuICB2YXIgbGVuID0gcXMubGVuZ3RoO1xuICAvLyBtYXhLZXlzIDw9IDAgbWVhbnMgdGhhdCB3ZSBzaG91bGQgbm90IGxpbWl0IGtleXMgY291bnRcbiAgaWYgKG1heEtleXMgPiAwICYmIGxlbiA+IG1heEtleXMpIHtcbiAgICBsZW4gPSBtYXhLZXlzO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIHZhciB4ID0gcXNbaV0ucmVwbGFjZShyZWdleHAsICclMjAnKSxcbiAgICAgICAgaWR4ID0geC5pbmRleE9mKGVxKSxcbiAgICAgICAga3N0ciwgdnN0ciwgaywgdjtcblxuICAgIGlmIChpZHggPj0gMCkge1xuICAgICAga3N0ciA9IHguc3Vic3RyKDAsIGlkeCk7XG4gICAgICB2c3RyID0geC5zdWJzdHIoaWR4ICsgMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGtzdHIgPSB4O1xuICAgICAgdnN0ciA9ICcnO1xuICAgIH1cblxuICAgIGsgPSBkZWNvZGVVUklDb21wb25lbnQoa3N0cik7XG4gICAgdiA9IGRlY29kZVVSSUNvbXBvbmVudCh2c3RyKTtcblxuICAgIGlmICghaGFzT3duUHJvcGVydHkob2JqLCBrKSkge1xuICAgICAgb2JqW2tdID0gdjtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob2JqW2tdKSkge1xuICAgICAgb2JqW2tdLnB1c2godik7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9ialtrXSA9IFtvYmpba10sIHZdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvYmo7XG59O1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHN0cmluZ2lmeVByaW1pdGl2ZSA9IGZ1bmN0aW9uKHYpIHtcbiAgc3dpdGNoICh0eXBlb2Ygdikge1xuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICByZXR1cm4gdjtcblxuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgcmV0dXJuIHYgPyAndHJ1ZScgOiAnZmFsc2UnO1xuXG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgIHJldHVybiBpc0Zpbml0ZSh2KSA/IHYgOiAnJztcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gJyc7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqLCBzZXAsIGVxLCBuYW1lKSB7XG4gIHNlcCA9IHNlcCB8fCAnJic7XG4gIGVxID0gZXEgfHwgJz0nO1xuICBpZiAob2JqID09PSBudWxsKSB7XG4gICAgb2JqID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubWFwKGZ1bmN0aW9uKGspIHtcbiAgICAgIHZhciBrcyA9IGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUoaykpICsgZXE7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShvYmpba10pKSB7XG4gICAgICAgIHJldHVybiBvYmpba10ubWFwKGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICByZXR1cm4ga3MgKyBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKHYpKTtcbiAgICAgICAgfSkuam9pbihzZXApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGtzICsgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShvYmpba10pKTtcbiAgICAgIH1cbiAgICB9KS5qb2luKHNlcCk7XG5cbiAgfVxuXG4gIGlmICghbmFtZSkgcmV0dXJuICcnO1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShuYW1lKSkgKyBlcSArXG4gICAgICAgICBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKG9iaikpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5kZWNvZGUgPSBleHBvcnRzLnBhcnNlID0gcmVxdWlyZSgnLi9kZWNvZGUnKTtcbmV4cG9ydHMuZW5jb2RlID0gZXhwb3J0cy5zdHJpbmdpZnkgPSByZXF1aXJlKCcuL2VuY29kZScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIGNvZGVzID0ge307XG5cbmZ1bmN0aW9uIGNyZWF0ZUVycm9yVHlwZShjb2RlLCBtZXNzYWdlLCBCYXNlKSB7XG4gIGlmICghQmFzZSkge1xuICAgIEJhc2UgPSBFcnJvcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE1lc3NhZ2UoYXJnMSwgYXJnMiwgYXJnMykge1xuICAgIGlmICh0eXBlb2YgbWVzc2FnZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbWVzc2FnZShhcmcxLCBhcmcyLCBhcmczKTtcbiAgICB9XG4gIH1cblxuICB2YXIgTm9kZUVycm9yID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoX0Jhc2UpIHtcbiAgICBfaW5oZXJpdHNMb29zZShOb2RlRXJyb3IsIF9CYXNlKTtcblxuICAgIGZ1bmN0aW9uIE5vZGVFcnJvcihhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgICByZXR1cm4gX0Jhc2UuY2FsbCh0aGlzLCBnZXRNZXNzYWdlKGFyZzEsIGFyZzIsIGFyZzMpKSB8fCB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiBOb2RlRXJyb3I7XG4gIH0oQmFzZSk7XG5cbiAgTm9kZUVycm9yLnByb3RvdHlwZS5uYW1lID0gQmFzZS5uYW1lO1xuICBOb2RlRXJyb3IucHJvdG90eXBlLmNvZGUgPSBjb2RlO1xuICBjb2Rlc1tjb2RlXSA9IE5vZGVFcnJvcjtcbn0gLy8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2Jsb2IvdjEwLjguMC9saWIvaW50ZXJuYWwvZXJyb3JzLmpzXG5cblxuZnVuY3Rpb24gb25lT2YoZXhwZWN0ZWQsIHRoaW5nKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGV4cGVjdGVkKSkge1xuICAgIHZhciBsZW4gPSBleHBlY3RlZC5sZW5ndGg7XG4gICAgZXhwZWN0ZWQgPSBleHBlY3RlZC5tYXAoZnVuY3Rpb24gKGkpIHtcbiAgICAgIHJldHVybiBTdHJpbmcoaSk7XG4gICAgfSk7XG5cbiAgICBpZiAobGVuID4gMikge1xuICAgICAgcmV0dXJuIFwib25lIG9mIFwiLmNvbmNhdCh0aGluZywgXCIgXCIpLmNvbmNhdChleHBlY3RlZC5zbGljZSgwLCBsZW4gLSAxKS5qb2luKCcsICcpLCBcIiwgb3IgXCIpICsgZXhwZWN0ZWRbbGVuIC0gMV07XG4gICAgfSBlbHNlIGlmIChsZW4gPT09IDIpIHtcbiAgICAgIHJldHVybiBcIm9uZSBvZiBcIi5jb25jYXQodGhpbmcsIFwiIFwiKS5jb25jYXQoZXhwZWN0ZWRbMF0sIFwiIG9yIFwiKS5jb25jYXQoZXhwZWN0ZWRbMV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJvZiBcIi5jb25jYXQodGhpbmcsIFwiIFwiKS5jb25jYXQoZXhwZWN0ZWRbMF0pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJvZiBcIi5jb25jYXQodGhpbmcsIFwiIFwiKS5jb25jYXQoU3RyaW5nKGV4cGVjdGVkKSk7XG4gIH1cbn0gLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL3N0YXJ0c1dpdGhcblxuXG5mdW5jdGlvbiBzdGFydHNXaXRoKHN0ciwgc2VhcmNoLCBwb3MpIHtcbiAgcmV0dXJuIHN0ci5zdWJzdHIoIXBvcyB8fCBwb3MgPCAwID8gMCA6ICtwb3MsIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7XG59IC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9lbmRzV2l0aFxuXG5cbmZ1bmN0aW9uIGVuZHNXaXRoKHN0ciwgc2VhcmNoLCB0aGlzX2xlbikge1xuICBpZiAodGhpc19sZW4gPT09IHVuZGVmaW5lZCB8fCB0aGlzX2xlbiA+IHN0ci5sZW5ndGgpIHtcbiAgICB0aGlzX2xlbiA9IHN0ci5sZW5ndGg7XG4gIH1cblxuICByZXR1cm4gc3RyLnN1YnN0cmluZyh0aGlzX2xlbiAtIHNlYXJjaC5sZW5ndGgsIHRoaXNfbGVuKSA9PT0gc2VhcmNoO1xufSAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvaW5jbHVkZXNcblxuXG5mdW5jdGlvbiBpbmNsdWRlcyhzdHIsIHNlYXJjaCwgc3RhcnQpIHtcbiAgaWYgKHR5cGVvZiBzdGFydCAhPT0gJ251bWJlcicpIHtcbiAgICBzdGFydCA9IDA7XG4gIH1cblxuICBpZiAoc3RhcnQgKyBzZWFyY2gubGVuZ3RoID4gc3RyLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc3RyLmluZGV4T2Yoc2VhcmNoLCBzdGFydCkgIT09IC0xO1xuICB9XG59XG5cbmNyZWF0ZUVycm9yVHlwZSgnRVJSX0lOVkFMSURfT1BUX1ZBTFVFJywgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiAnVGhlIHZhbHVlIFwiJyArIHZhbHVlICsgJ1wiIGlzIGludmFsaWQgZm9yIG9wdGlvbiBcIicgKyBuYW1lICsgJ1wiJztcbn0sIFR5cGVFcnJvcik7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9JTlZBTElEX0FSR19UWVBFJywgZnVuY3Rpb24gKG5hbWUsIGV4cGVjdGVkLCBhY3R1YWwpIHtcbiAgLy8gZGV0ZXJtaW5lcjogJ211c3QgYmUnIG9yICdtdXN0IG5vdCBiZSdcbiAgdmFyIGRldGVybWluZXI7XG5cbiAgaWYgKHR5cGVvZiBleHBlY3RlZCA9PT0gJ3N0cmluZycgJiYgc3RhcnRzV2l0aChleHBlY3RlZCwgJ25vdCAnKSkge1xuICAgIGRldGVybWluZXIgPSAnbXVzdCBub3QgYmUnO1xuICAgIGV4cGVjdGVkID0gZXhwZWN0ZWQucmVwbGFjZSgvXm5vdCAvLCAnJyk7XG4gIH0gZWxzZSB7XG4gICAgZGV0ZXJtaW5lciA9ICdtdXN0IGJlJztcbiAgfVxuXG4gIHZhciBtc2c7XG5cbiAgaWYgKGVuZHNXaXRoKG5hbWUsICcgYXJndW1lbnQnKSkge1xuICAgIC8vIEZvciBjYXNlcyBsaWtlICdmaXJzdCBhcmd1bWVudCdcbiAgICBtc2cgPSBcIlRoZSBcIi5jb25jYXQobmFtZSwgXCIgXCIpLmNvbmNhdChkZXRlcm1pbmVyLCBcIiBcIikuY29uY2F0KG9uZU9mKGV4cGVjdGVkLCAndHlwZScpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdHlwZSA9IGluY2x1ZGVzKG5hbWUsICcuJykgPyAncHJvcGVydHknIDogJ2FyZ3VtZW50JztcbiAgICBtc2cgPSBcIlRoZSBcXFwiXCIuY29uY2F0KG5hbWUsIFwiXFxcIiBcIikuY29uY2F0KHR5cGUsIFwiIFwiKS5jb25jYXQoZGV0ZXJtaW5lciwgXCIgXCIpLmNvbmNhdChvbmVPZihleHBlY3RlZCwgJ3R5cGUnKSk7XG4gIH1cblxuICBtc2cgKz0gXCIuIFJlY2VpdmVkIHR5cGUgXCIuY29uY2F0KHR5cGVvZiBhY3R1YWwpO1xuICByZXR1cm4gbXNnO1xufSwgVHlwZUVycm9yKTtcbmNyZWF0ZUVycm9yVHlwZSgnRVJSX1NUUkVBTV9QVVNIX0FGVEVSX0VPRicsICdzdHJlYW0ucHVzaCgpIGFmdGVyIEVPRicpO1xuY3JlYXRlRXJyb3JUeXBlKCdFUlJfTUVUSE9EX05PVF9JTVBMRU1FTlRFRCcsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiAnVGhlICcgKyBuYW1lICsgJyBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkJztcbn0pO1xuY3JlYXRlRXJyb3JUeXBlKCdFUlJfU1RSRUFNX1BSRU1BVFVSRV9DTE9TRScsICdQcmVtYXR1cmUgY2xvc2UnKTtcbmNyZWF0ZUVycm9yVHlwZSgnRVJSX1NUUkVBTV9ERVNUUk9ZRUQnLCBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gJ0Nhbm5vdCBjYWxsICcgKyBuYW1lICsgJyBhZnRlciBhIHN0cmVhbSB3YXMgZGVzdHJveWVkJztcbn0pO1xuY3JlYXRlRXJyb3JUeXBlKCdFUlJfTVVMVElQTEVfQ0FMTEJBQ0snLCAnQ2FsbGJhY2sgY2FsbGVkIG11bHRpcGxlIHRpbWVzJyk7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9TVFJFQU1fQ0FOTk9UX1BJUEUnLCAnQ2Fubm90IHBpcGUsIG5vdCByZWFkYWJsZScpO1xuY3JlYXRlRXJyb3JUeXBlKCdFUlJfU1RSRUFNX1dSSVRFX0FGVEVSX0VORCcsICd3cml0ZSBhZnRlciBlbmQnKTtcbmNyZWF0ZUVycm9yVHlwZSgnRVJSX1NUUkVBTV9OVUxMX1ZBTFVFUycsICdNYXkgbm90IHdyaXRlIG51bGwgdmFsdWVzIHRvIHN0cmVhbScsIFR5cGVFcnJvcik7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9VTktOT1dOX0VOQ09ESU5HJywgZnVuY3Rpb24gKGFyZykge1xuICByZXR1cm4gJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBhcmc7XG59LCBUeXBlRXJyb3IpO1xuY3JlYXRlRXJyb3JUeXBlKCdFUlJfU1RSRUFNX1VOU0hJRlRfQUZURVJfRU5EX0VWRU5UJywgJ3N0cmVhbS51bnNoaWZ0KCkgYWZ0ZXIgZW5kIGV2ZW50Jyk7XG5tb2R1bGUuZXhwb3J0cy5jb2RlcyA9IGNvZGVzO1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4vLyBhIGR1cGxleCBzdHJlYW0gaXMganVzdCBhIHN0cmVhbSB0aGF0IGlzIGJvdGggcmVhZGFibGUgYW5kIHdyaXRhYmxlLlxuLy8gU2luY2UgSlMgZG9lc24ndCBoYXZlIG11bHRpcGxlIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UsIHRoaXMgY2xhc3Ncbi8vIHByb3RvdHlwYWxseSBpbmhlcml0cyBmcm9tIFJlYWRhYmxlLCBhbmQgdGhlbiBwYXJhc2l0aWNhbGx5IGZyb21cbi8vIFdyaXRhYmxlLlxuJ3VzZSBzdHJpY3QnO1xuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiAob2JqKSB7XG4gIHZhciBrZXlzID0gW107XG5cbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGtleXMucHVzaChrZXkpO1xuICB9XG5cbiAgcmV0dXJuIGtleXM7XG59O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cblxubW9kdWxlLmV4cG9ydHMgPSBEdXBsZXg7XG5cbnZhciBSZWFkYWJsZSA9IHJlcXVpcmUoJy4vX3N0cmVhbV9yZWFkYWJsZScpO1xuXG52YXIgV3JpdGFibGUgPSByZXF1aXJlKCcuL19zdHJlYW1fd3JpdGFibGUnKTtcblxucmVxdWlyZSgnaW5oZXJpdHMnKShEdXBsZXgsIFJlYWRhYmxlKTtcblxue1xuICAvLyBBbGxvdyB0aGUga2V5cyBhcnJheSB0byBiZSBHQydlZC5cbiAgdmFyIGtleXMgPSBvYmplY3RLZXlzKFdyaXRhYmxlLnByb3RvdHlwZSk7XG5cbiAgZm9yICh2YXIgdiA9IDA7IHYgPCBrZXlzLmxlbmd0aDsgdisrKSB7XG4gICAgdmFyIG1ldGhvZCA9IGtleXNbdl07XG4gICAgaWYgKCFEdXBsZXgucHJvdG90eXBlW21ldGhvZF0pIER1cGxleC5wcm90b3R5cGVbbWV0aG9kXSA9IFdyaXRhYmxlLnByb3RvdHlwZVttZXRob2RdO1xuICB9XG59XG5cbmZ1bmN0aW9uIER1cGxleChvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBEdXBsZXgpKSByZXR1cm4gbmV3IER1cGxleChvcHRpb25zKTtcbiAgUmVhZGFibGUuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgV3JpdGFibGUuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgdGhpcy5hbGxvd0hhbGZPcGVuID0gdHJ1ZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLnJlYWRhYmxlID09PSBmYWxzZSkgdGhpcy5yZWFkYWJsZSA9IGZhbHNlO1xuICAgIGlmIChvcHRpb25zLndyaXRhYmxlID09PSBmYWxzZSkgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuXG4gICAgaWYgKG9wdGlvbnMuYWxsb3dIYWxmT3BlbiA9PT0gZmFsc2UpIHtcbiAgICAgIHRoaXMuYWxsb3dIYWxmT3BlbiA9IGZhbHNlO1xuICAgICAgdGhpcy5vbmNlKCdlbmQnLCBvbmVuZCk7XG4gICAgfVxuICB9XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShEdXBsZXgucHJvdG90eXBlLCAnd3JpdGFibGVIaWdoV2F0ZXJNYXJrJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShEdXBsZXgucHJvdG90eXBlLCAnd3JpdGFibGVCdWZmZXInLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlICYmIHRoaXMuX3dyaXRhYmxlU3RhdGUuZ2V0QnVmZmVyKCk7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KER1cGxleC5wcm90b3R5cGUsICd3cml0YWJsZUxlbmd0aCcsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUubGVuZ3RoO1xuICB9XG59KTsgLy8gdGhlIG5vLWhhbGYtb3BlbiBlbmZvcmNlclxuXG5mdW5jdGlvbiBvbmVuZCgpIHtcbiAgLy8gSWYgdGhlIHdyaXRhYmxlIHNpZGUgZW5kZWQsIHRoZW4gd2UncmUgb2suXG4gIGlmICh0aGlzLl93cml0YWJsZVN0YXRlLmVuZGVkKSByZXR1cm47IC8vIG5vIG1vcmUgZGF0YSBjYW4gYmUgd3JpdHRlbi5cbiAgLy8gQnV0IGFsbG93IG1vcmUgd3JpdGVzIHRvIGhhcHBlbiBpbiB0aGlzIHRpY2suXG5cbiAgcHJvY2Vzcy5uZXh0VGljayhvbkVuZE5ULCB0aGlzKTtcbn1cblxuZnVuY3Rpb24gb25FbmROVChzZWxmKSB7XG4gIHNlbGYuZW5kKCk7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShEdXBsZXgucHJvdG90eXBlLCAnZGVzdHJveWVkJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCAmJiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAvLyB3ZSBpZ25vcmUgdGhlIHZhbHVlIGlmIHRoZSBzdHJlYW1cbiAgICAvLyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0XG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCB8fCB0aGlzLl93cml0YWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRoZSB1c2VyIGlzIGV4cGxpY2l0bHlcbiAgICAvLyBtYW5hZ2luZyBkZXN0cm95ZWRcblxuXG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICB9XG59KTsiLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbi8vIGEgcGFzc3Rocm91Z2ggc3RyZWFtLlxuLy8gYmFzaWNhbGx5IGp1c3QgdGhlIG1vc3QgbWluaW1hbCBzb3J0IG9mIFRyYW5zZm9ybSBzdHJlYW0uXG4vLyBFdmVyeSB3cml0dGVuIGNodW5rIGdldHMgb3V0cHV0IGFzLWlzLlxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBhc3NUaHJvdWdoO1xuXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnLi9fc3RyZWFtX3RyYW5zZm9ybScpO1xuXG5yZXF1aXJlKCdpbmhlcml0cycpKFBhc3NUaHJvdWdoLCBUcmFuc2Zvcm0pO1xuXG5mdW5jdGlvbiBQYXNzVGhyb3VnaChvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBQYXNzVGhyb3VnaCkpIHJldHVybiBuZXcgUGFzc1Rocm91Z2gob3B0aW9ucyk7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xufVxuXG5QYXNzVGhyb3VnaC5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGNiKG51bGwsIGNodW5rKTtcbn07IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhZGFibGU7XG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgRHVwbGV4O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cblJlYWRhYmxlLlJlYWRhYmxlU3RhdGUgPSBSZWFkYWJsZVN0YXRlO1xuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIEVFID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuXG52YXIgRUVsaXN0ZW5lckNvdW50ID0gZnVuY3Rpb24gRUVsaXN0ZW5lckNvdW50KGVtaXR0ZXIsIHR5cGUpIHtcbiAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJzKHR5cGUpLmxlbmd0aDtcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxuXG52YXIgU3RyZWFtID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbScpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcblxudmFyIE91clVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheSB8fCBmdW5jdGlvbiAoKSB7fTtcblxuZnVuY3Rpb24gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuaykge1xuICByZXR1cm4gQnVmZmVyLmZyb20oY2h1bmspO1xufVxuXG5mdW5jdGlvbiBfaXNVaW50OEFycmF5KG9iaikge1xuICByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKG9iaikgfHwgb2JqIGluc3RhbmNlb2YgT3VyVWludDhBcnJheTtcbn1cbi8qPHJlcGxhY2VtZW50PiovXG5cblxudmFyIGRlYnVnVXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxudmFyIGRlYnVnO1xuXG5pZiAoZGVidWdVdGlsICYmIGRlYnVnVXRpbC5kZWJ1Z2xvZykge1xuICBkZWJ1ZyA9IGRlYnVnVXRpbC5kZWJ1Z2xvZygnc3RyZWFtJyk7XG59IGVsc2Uge1xuICBkZWJ1ZyA9IGZ1bmN0aW9uIGRlYnVnKCkge307XG59XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuXG52YXIgQnVmZmVyTGlzdCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9idWZmZXJfbGlzdCcpO1xuXG52YXIgZGVzdHJveUltcGwgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveScpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvc3RhdGUnKSxcbiAgICBnZXRIaWdoV2F0ZXJNYXJrID0gX3JlcXVpcmUuZ2V0SGlnaFdhdGVyTWFyaztcblxudmFyIF9yZXF1aXJlJGNvZGVzID0gcmVxdWlyZSgnLi4vZXJyb3JzJykuY29kZXMsXG4gICAgRVJSX0lOVkFMSURfQVJHX1RZUEUgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfSU5WQUxJRF9BUkdfVFlQRSxcbiAgICBFUlJfU1RSRUFNX1BVU0hfQUZURVJfRU9GID0gX3JlcXVpcmUkY29kZXMuRVJSX1NUUkVBTV9QVVNIX0FGVEVSX0VPRixcbiAgICBFUlJfTUVUSE9EX05PVF9JTVBMRU1FTlRFRCA9IF9yZXF1aXJlJGNvZGVzLkVSUl9NRVRIT0RfTk9UX0lNUExFTUVOVEVELFxuICAgIEVSUl9TVFJFQU1fVU5TSElGVF9BRlRFUl9FTkRfRVZFTlQgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfU1RSRUFNX1VOU0hJRlRfQUZURVJfRU5EX0VWRU5UOyAvLyBMYXp5IGxvYWRlZCB0byBpbXByb3ZlIHRoZSBzdGFydHVwIHBlcmZvcm1hbmNlLlxuXG5cbnZhciBTdHJpbmdEZWNvZGVyO1xudmFyIGNyZWF0ZVJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvcjtcbnZhciBmcm9tO1xuXG5yZXF1aXJlKCdpbmhlcml0cycpKFJlYWRhYmxlLCBTdHJlYW0pO1xuXG52YXIgZXJyb3JPckRlc3Ryb3kgPSBkZXN0cm95SW1wbC5lcnJvck9yRGVzdHJveTtcbnZhciBrUHJveHlFdmVudHMgPSBbJ2Vycm9yJywgJ2Nsb3NlJywgJ2Rlc3Ryb3knLCAncGF1c2UnLCAncmVzdW1lJ107XG5cbmZ1bmN0aW9uIHByZXBlbmRMaXN0ZW5lcihlbWl0dGVyLCBldmVudCwgZm4pIHtcbiAgLy8gU2FkbHkgdGhpcyBpcyBub3QgY2FjaGVhYmxlIGFzIHNvbWUgbGlicmFyaWVzIGJ1bmRsZSB0aGVpciBvd25cbiAgLy8gZXZlbnQgZW1pdHRlciBpbXBsZW1lbnRhdGlvbiB3aXRoIHRoZW0uXG4gIGlmICh0eXBlb2YgZW1pdHRlci5wcmVwZW5kTGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHJldHVybiBlbWl0dGVyLnByZXBlbmRMaXN0ZW5lcihldmVudCwgZm4pOyAvLyBUaGlzIGlzIGEgaGFjayB0byBtYWtlIHN1cmUgdGhhdCBvdXIgZXJyb3IgaGFuZGxlciBpcyBhdHRhY2hlZCBiZWZvcmUgYW55XG4gIC8vIHVzZXJsYW5kIG9uZXMuICBORVZFUiBETyBUSElTLiBUaGlzIGlzIGhlcmUgb25seSBiZWNhdXNlIHRoaXMgY29kZSBuZWVkc1xuICAvLyB0byBjb250aW51ZSB0byB3b3JrIHdpdGggb2xkZXIgdmVyc2lvbnMgb2YgTm9kZS5qcyB0aGF0IGRvIG5vdCBpbmNsdWRlXG4gIC8vIHRoZSBwcmVwZW5kTGlzdGVuZXIoKSBtZXRob2QuIFRoZSBnb2FsIGlzIHRvIGV2ZW50dWFsbHkgcmVtb3ZlIHRoaXMgaGFjay5cblxuICBpZiAoIWVtaXR0ZXIuX2V2ZW50cyB8fCAhZW1pdHRlci5fZXZlbnRzW2V2ZW50XSkgZW1pdHRlci5vbihldmVudCwgZm4pO2Vsc2UgaWYgKEFycmF5LmlzQXJyYXkoZW1pdHRlci5fZXZlbnRzW2V2ZW50XSkpIGVtaXR0ZXIuX2V2ZW50c1tldmVudF0udW5zaGlmdChmbik7ZWxzZSBlbWl0dGVyLl9ldmVudHNbZXZlbnRdID0gW2ZuLCBlbWl0dGVyLl9ldmVudHNbZXZlbnRdXTtcbn1cblxuZnVuY3Rpb24gUmVhZGFibGVTdGF0ZShvcHRpb25zLCBzdHJlYW0sIGlzRHVwbGV4KSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OyAvLyBEdXBsZXggc3RyZWFtcyBhcmUgYm90aCByZWFkYWJsZSBhbmQgd3JpdGFibGUsIGJ1dCBzaGFyZVxuICAvLyB0aGUgc2FtZSBvcHRpb25zIG9iamVjdC5cbiAgLy8gSG93ZXZlciwgc29tZSBjYXNlcyByZXF1aXJlIHNldHRpbmcgb3B0aW9ucyB0byBkaWZmZXJlbnRcbiAgLy8gdmFsdWVzIGZvciB0aGUgcmVhZGFibGUgYW5kIHRoZSB3cml0YWJsZSBzaWRlcyBvZiB0aGUgZHVwbGV4IHN0cmVhbS5cbiAgLy8gVGhlc2Ugb3B0aW9ucyBjYW4gYmUgcHJvdmlkZWQgc2VwYXJhdGVseSBhcyByZWFkYWJsZVhYWCBhbmQgd3JpdGFibGVYWFguXG5cbiAgaWYgKHR5cGVvZiBpc0R1cGxleCAhPT0gJ2Jvb2xlYW4nKSBpc0R1cGxleCA9IHN0cmVhbSBpbnN0YW5jZW9mIER1cGxleDsgLy8gb2JqZWN0IHN0cmVhbSBmbGFnLiBVc2VkIHRvIG1ha2UgcmVhZChuKSBpZ25vcmUgbiBhbmQgdG9cbiAgLy8gbWFrZSBhbGwgdGhlIGJ1ZmZlciBtZXJnaW5nIGFuZCBsZW5ndGggY2hlY2tzIGdvIGF3YXlcblxuICB0aGlzLm9iamVjdE1vZGUgPSAhIW9wdGlvbnMub2JqZWN0TW9kZTtcbiAgaWYgKGlzRHVwbGV4KSB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLm9iamVjdE1vZGUgfHwgISFvcHRpb25zLnJlYWRhYmxlT2JqZWN0TW9kZTsgLy8gdGhlIHBvaW50IGF0IHdoaWNoIGl0IHN0b3BzIGNhbGxpbmcgX3JlYWQoKSB0byBmaWxsIHRoZSBidWZmZXJcbiAgLy8gTm90ZTogMCBpcyBhIHZhbGlkIHZhbHVlLCBtZWFucyBcImRvbid0IGNhbGwgX3JlYWQgcHJlZW1wdGl2ZWx5IGV2ZXJcIlxuXG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IGdldEhpZ2hXYXRlck1hcmsodGhpcywgb3B0aW9ucywgJ3JlYWRhYmxlSGlnaFdhdGVyTWFyaycsIGlzRHVwbGV4KTsgLy8gQSBsaW5rZWQgbGlzdCBpcyB1c2VkIHRvIHN0b3JlIGRhdGEgY2h1bmtzIGluc3RlYWQgb2YgYW4gYXJyYXkgYmVjYXVzZSB0aGVcbiAgLy8gbGlua2VkIGxpc3QgY2FuIHJlbW92ZSBlbGVtZW50cyBmcm9tIHRoZSBiZWdpbm5pbmcgZmFzdGVyIHRoYW5cbiAgLy8gYXJyYXkuc2hpZnQoKVxuXG4gIHRoaXMuYnVmZmVyID0gbmV3IEJ1ZmZlckxpc3QoKTtcbiAgdGhpcy5sZW5ndGggPSAwO1xuICB0aGlzLnBpcGVzID0gbnVsbDtcbiAgdGhpcy5waXBlc0NvdW50ID0gMDtcbiAgdGhpcy5mbG93aW5nID0gbnVsbDtcbiAgdGhpcy5lbmRlZCA9IGZhbHNlO1xuICB0aGlzLmVuZEVtaXR0ZWQgPSBmYWxzZTtcbiAgdGhpcy5yZWFkaW5nID0gZmFsc2U7IC8vIGEgZmxhZyB0byBiZSBhYmxlIHRvIHRlbGwgaWYgdGhlIGV2ZW50ICdyZWFkYWJsZScvJ2RhdGEnIGlzIGVtaXR0ZWRcbiAgLy8gaW1tZWRpYXRlbHksIG9yIG9uIGEgbGF0ZXIgdGljay4gIFdlIHNldCB0aGlzIHRvIHRydWUgYXQgZmlyc3QsIGJlY2F1c2VcbiAgLy8gYW55IGFjdGlvbnMgdGhhdCBzaG91bGRuJ3QgaGFwcGVuIHVudGlsIFwibGF0ZXJcIiBzaG91bGQgZ2VuZXJhbGx5IGFsc29cbiAgLy8gbm90IGhhcHBlbiBiZWZvcmUgdGhlIGZpcnN0IHJlYWQgY2FsbC5cblxuICB0aGlzLnN5bmMgPSB0cnVlOyAvLyB3aGVuZXZlciB3ZSByZXR1cm4gbnVsbCwgdGhlbiB3ZSBzZXQgYSBmbGFnIHRvIHNheVxuICAvLyB0aGF0IHdlJ3JlIGF3YWl0aW5nIGEgJ3JlYWRhYmxlJyBldmVudCBlbWlzc2lvbi5cblxuICB0aGlzLm5lZWRSZWFkYWJsZSA9IGZhbHNlO1xuICB0aGlzLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICB0aGlzLnJlYWRhYmxlTGlzdGVuaW5nID0gZmFsc2U7XG4gIHRoaXMucmVzdW1lU2NoZWR1bGVkID0gZmFsc2U7XG4gIHRoaXMucGF1c2VkID0gdHJ1ZTsgLy8gU2hvdWxkIGNsb3NlIGJlIGVtaXR0ZWQgb24gZGVzdHJveS4gRGVmYXVsdHMgdG8gdHJ1ZS5cblxuICB0aGlzLmVtaXRDbG9zZSA9IG9wdGlvbnMuZW1pdENsb3NlICE9PSBmYWxzZTsgLy8gU2hvdWxkIC5kZXN0cm95KCkgYmUgY2FsbGVkIGFmdGVyICdlbmQnIChhbmQgcG90ZW50aWFsbHkgJ2ZpbmlzaCcpXG5cbiAgdGhpcy5hdXRvRGVzdHJveSA9ICEhb3B0aW9ucy5hdXRvRGVzdHJveTsgLy8gaGFzIGl0IGJlZW4gZGVzdHJveWVkXG5cbiAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTsgLy8gQ3J5cHRvIGlzIGtpbmQgb2Ygb2xkIGFuZCBjcnVzdHkuICBIaXN0b3JpY2FsbHksIGl0cyBkZWZhdWx0IHN0cmluZ1xuICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuXG4gIC8vIEV2ZXJ5dGhpbmcgZWxzZSBpbiB0aGUgdW5pdmVyc2UgdXNlcyAndXRmOCcsIHRob3VnaC5cblxuICB0aGlzLmRlZmF1bHRFbmNvZGluZyA9IG9wdGlvbnMuZGVmYXVsdEVuY29kaW5nIHx8ICd1dGY4JzsgLy8gdGhlIG51bWJlciBvZiB3cml0ZXJzIHRoYXQgYXJlIGF3YWl0aW5nIGEgZHJhaW4gZXZlbnQgaW4gLnBpcGUoKXNcblxuICB0aGlzLmF3YWl0RHJhaW4gPSAwOyAvLyBpZiB0cnVlLCBhIG1heWJlUmVhZE1vcmUgaGFzIGJlZW4gc2NoZWR1bGVkXG5cbiAgdGhpcy5yZWFkaW5nTW9yZSA9IGZhbHNlO1xuICB0aGlzLmRlY29kZXIgPSBudWxsO1xuICB0aGlzLmVuY29kaW5nID0gbnVsbDtcblxuICBpZiAob3B0aW9ucy5lbmNvZGluZykge1xuICAgIGlmICghU3RyaW5nRGVjb2RlcikgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyLycpLlN0cmluZ0RlY29kZXI7XG4gICAgdGhpcy5kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIob3B0aW9ucy5lbmNvZGluZyk7XG4gICAgdGhpcy5lbmNvZGluZyA9IG9wdGlvbnMuZW5jb2Rpbmc7XG4gIH1cbn1cblxuZnVuY3Rpb24gUmVhZGFibGUob3B0aW9ucykge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmVhZGFibGUpKSByZXR1cm4gbmV3IFJlYWRhYmxlKG9wdGlvbnMpOyAvLyBDaGVja2luZyBmb3IgYSBTdHJlYW0uRHVwbGV4IGluc3RhbmNlIGlzIGZhc3RlciBoZXJlIGluc3RlYWQgb2YgaW5zaWRlXG4gIC8vIHRoZSBSZWFkYWJsZVN0YXRlIGNvbnN0cnVjdG9yLCBhdCBsZWFzdCB3aXRoIFY4IDYuNVxuXG4gIHZhciBpc0R1cGxleCA9IHRoaXMgaW5zdGFuY2VvZiBEdXBsZXg7XG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUgPSBuZXcgUmVhZGFibGVTdGF0ZShvcHRpb25zLCB0aGlzLCBpc0R1cGxleCk7IC8vIGxlZ2FjeVxuXG4gIHRoaXMucmVhZGFibGUgPSB0cnVlO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnJlYWQgPT09ICdmdW5jdGlvbicpIHRoaXMuX3JlYWQgPSBvcHRpb25zLnJlYWQ7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIHRoaXMuX2Rlc3Ryb3kgPSBvcHRpb25zLmRlc3Ryb3k7XG4gIH1cblxuICBTdHJlYW0uY2FsbCh0aGlzKTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlLnByb3RvdHlwZSwgJ2Rlc3Ryb3llZCcsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAvLyB3ZSBpZ25vcmUgdGhlIHZhbHVlIGlmIHRoZSBzdHJlYW1cbiAgICAvLyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0XG4gICAgaWYgKCF0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0aGUgdXNlciBpcyBleHBsaWNpdGx5XG4gICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkXG5cblxuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gIH1cbn0pO1xuUmVhZGFibGUucHJvdG90eXBlLmRlc3Ryb3kgPSBkZXN0cm95SW1wbC5kZXN0cm95O1xuUmVhZGFibGUucHJvdG90eXBlLl91bmRlc3Ryb3kgPSBkZXN0cm95SW1wbC51bmRlc3Ryb3k7XG5cblJlYWRhYmxlLnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7XG4gIGNiKGVycik7XG59OyAvLyBNYW51YWxseSBzaG92ZSBzb21ldGhpbmcgaW50byB0aGUgcmVhZCgpIGJ1ZmZlci5cbi8vIFRoaXMgcmV0dXJucyB0cnVlIGlmIHRoZSBoaWdoV2F0ZXJNYXJrIGhhcyBub3QgYmVlbiBoaXQgeWV0LFxuLy8gc2ltaWxhciB0byBob3cgV3JpdGFibGUud3JpdGUoKSByZXR1cm5zIHRydWUgaWYgeW91IHNob3VsZFxuLy8gd3JpdGUoKSBzb21lIG1vcmUuXG5cblxuUmVhZGFibGUucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBza2lwQ2h1bmtDaGVjaztcblxuICBpZiAoIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBpZiAodHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmNvZGluZyB8fCBzdGF0ZS5kZWZhdWx0RW5jb2Rpbmc7XG5cbiAgICAgIGlmIChlbmNvZGluZyAhPT0gc3RhdGUuZW5jb2RpbmcpIHtcbiAgICAgICAgY2h1bmsgPSBCdWZmZXIuZnJvbShjaHVuaywgZW5jb2RpbmcpO1xuICAgICAgICBlbmNvZGluZyA9ICcnO1xuICAgICAgfVxuXG4gICAgICBza2lwQ2h1bmtDaGVjayA9IHRydWU7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHNraXBDaHVua0NoZWNrID0gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiByZWFkYWJsZUFkZENodW5rKHRoaXMsIGNodW5rLCBlbmNvZGluZywgZmFsc2UsIHNraXBDaHVua0NoZWNrKTtcbn07IC8vIFVuc2hpZnQgc2hvdWxkICphbHdheXMqIGJlIHNvbWV0aGluZyBkaXJlY3RseSBvdXQgb2YgcmVhZCgpXG5cblxuUmVhZGFibGUucHJvdG90eXBlLnVuc2hpZnQgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgY2h1bmssIG51bGwsIHRydWUsIGZhbHNlKTtcbn07XG5cbmZ1bmN0aW9uIHJlYWRhYmxlQWRkQ2h1bmsoc3RyZWFtLCBjaHVuaywgZW5jb2RpbmcsIGFkZFRvRnJvbnQsIHNraXBDaHVua0NoZWNrKSB7XG4gIGRlYnVnKCdyZWFkYWJsZUFkZENodW5rJywgY2h1bmspO1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG5cbiAgaWYgKGNodW5rID09PSBudWxsKSB7XG4gICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgIG9uRW9mQ2h1bmsoc3RyZWFtLCBzdGF0ZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGVyO1xuICAgIGlmICghc2tpcENodW5rQ2hlY2spIGVyID0gY2h1bmtJbnZhbGlkKHN0YXRlLCBjaHVuayk7XG5cbiAgICBpZiAoZXIpIHtcbiAgICAgIGVycm9yT3JEZXN0cm95KHN0cmVhbSwgZXIpO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUub2JqZWN0TW9kZSB8fCBjaHVuayAmJiBjaHVuay5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAodHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiAhc3RhdGUub2JqZWN0TW9kZSAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoY2h1bmspICE9PSBCdWZmZXIucHJvdG90eXBlKSB7XG4gICAgICAgIGNodW5rID0gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuayk7XG4gICAgICB9XG5cbiAgICAgIGlmIChhZGRUb0Zyb250KSB7XG4gICAgICAgIGlmIChzdGF0ZS5lbmRFbWl0dGVkKSBlcnJvck9yRGVzdHJveShzdHJlYW0sIG5ldyBFUlJfU1RSRUFNX1VOU0hJRlRfQUZURVJfRU5EX0VWRU5UKCkpO2Vsc2UgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIHRydWUpO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5lbmRlZCkge1xuICAgICAgICBlcnJvck9yRGVzdHJveShzdHJlYW0sIG5ldyBFUlJfU1RSRUFNX1BVU0hfQUZURVJfRU9GKCkpO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5kZXN0cm95ZWQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChzdGF0ZS5kZWNvZGVyICYmICFlbmNvZGluZykge1xuICAgICAgICAgIGNodW5rID0gc3RhdGUuZGVjb2Rlci53cml0ZShjaHVuayk7XG4gICAgICAgICAgaWYgKHN0YXRlLm9iamVjdE1vZGUgfHwgY2h1bmsubGVuZ3RoICE9PSAwKSBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgZmFsc2UpO2Vsc2UgbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghYWRkVG9Gcm9udCkge1xuICAgICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgICAgbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKTtcbiAgICB9XG4gIH0gLy8gV2UgY2FuIHB1c2ggbW9yZSBkYXRhIGlmIHdlIGFyZSBiZWxvdyB0aGUgaGlnaFdhdGVyTWFyay5cbiAgLy8gQWxzbywgaWYgd2UgaGF2ZSBubyBkYXRhIHlldCwgd2UgY2FuIHN0YW5kIHNvbWUgbW9yZSBieXRlcy5cbiAgLy8gVGhpcyBpcyB0byB3b3JrIGFyb3VuZCBjYXNlcyB3aGVyZSBod209MCwgc3VjaCBhcyB0aGUgcmVwbC5cblxuXG4gIHJldHVybiAhc3RhdGUuZW5kZWQgJiYgKHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcmsgfHwgc3RhdGUubGVuZ3RoID09PSAwKTtcbn1cblxuZnVuY3Rpb24gYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGFkZFRvRnJvbnQpIHtcbiAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgc3RhdGUubGVuZ3RoID09PSAwICYmICFzdGF0ZS5zeW5jKSB7XG4gICAgc3RhdGUuYXdhaXREcmFpbiA9IDA7XG4gICAgc3RyZWFtLmVtaXQoJ2RhdGEnLCBjaHVuayk7XG4gIH0gZWxzZSB7XG4gICAgLy8gdXBkYXRlIHRoZSBidWZmZXIgaW5mby5cbiAgICBzdGF0ZS5sZW5ndGggKz0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG4gICAgaWYgKGFkZFRvRnJvbnQpIHN0YXRlLmJ1ZmZlci51bnNoaWZ0KGNodW5rKTtlbHNlIHN0YXRlLmJ1ZmZlci5wdXNoKGNodW5rKTtcbiAgICBpZiAoc3RhdGUubmVlZFJlYWRhYmxlKSBlbWl0UmVhZGFibGUoc3RyZWFtKTtcbiAgfVxuXG4gIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNodW5rSW52YWxpZChzdGF0ZSwgY2h1bmspIHtcbiAgdmFyIGVyO1xuXG4gIGlmICghX2lzVWludDhBcnJheShjaHVuaykgJiYgdHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiBjaHVuayAhPT0gdW5kZWZpbmVkICYmICFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgZXIgPSBuZXcgRVJSX0lOVkFMSURfQVJHX1RZUEUoJ2NodW5rJywgWydzdHJpbmcnLCAnQnVmZmVyJywgJ1VpbnQ4QXJyYXknXSwgY2h1bmspO1xuICB9XG5cbiAgcmV0dXJuIGVyO1xufVxuXG5SZWFkYWJsZS5wcm90b3R5cGUuaXNQYXVzZWQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgPT09IGZhbHNlO1xufTsgLy8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG5cblxuUmVhZGFibGUucHJvdG90eXBlLnNldEVuY29kaW5nID0gZnVuY3Rpb24gKGVuYykge1xuICBpZiAoIVN0cmluZ0RlY29kZXIpIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2Rlci8nKS5TdHJpbmdEZWNvZGVyO1xuICB2YXIgZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKGVuYyk7XG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVjb2RlciA9IGRlY29kZXI7IC8vIElmIHNldEVuY29kaW5nKG51bGwpLCBkZWNvZGVyLmVuY29kaW5nIGVxdWFscyB1dGY4XG5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmNvZGluZyA9IHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVjb2Rlci5lbmNvZGluZzsgLy8gSXRlcmF0ZSBvdmVyIGN1cnJlbnQgYnVmZmVyIHRvIGNvbnZlcnQgYWxyZWFkeSBzdG9yZWQgQnVmZmVyczpcblxuICB2YXIgcCA9IHRoaXMuX3JlYWRhYmxlU3RhdGUuYnVmZmVyLmhlYWQ7XG4gIHZhciBjb250ZW50ID0gJyc7XG5cbiAgd2hpbGUgKHAgIT09IG51bGwpIHtcbiAgICBjb250ZW50ICs9IGRlY29kZXIud3JpdGUocC5kYXRhKTtcbiAgICBwID0gcC5uZXh0O1xuICB9XG5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5idWZmZXIuY2xlYXIoKTtcblxuICBpZiAoY29udGVudCAhPT0gJycpIHRoaXMuX3JlYWRhYmxlU3RhdGUuYnVmZmVyLnB1c2goY29udGVudCk7XG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUubGVuZ3RoID0gY29udGVudC5sZW5ndGg7XG4gIHJldHVybiB0aGlzO1xufTsgLy8gRG9uJ3QgcmFpc2UgdGhlIGh3bSA+IDFHQlxuXG5cbnZhciBNQVhfSFdNID0gMHg0MDAwMDAwMDtcblxuZnVuY3Rpb24gY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsobikge1xuICBpZiAobiA+PSBNQVhfSFdNKSB7XG4gICAgLy8gVE9ETyhyb25hZyk6IFRocm93IEVSUl9WQUxVRV9PVVRfT0ZfUkFOR0UuXG4gICAgbiA9IE1BWF9IV007XG4gIH0gZWxzZSB7XG4gICAgLy8gR2V0IHRoZSBuZXh0IGhpZ2hlc3QgcG93ZXIgb2YgMiB0byBwcmV2ZW50IGluY3JlYXNpbmcgaHdtIGV4Y2Vzc2l2ZWx5IGluXG4gICAgLy8gdGlueSBhbW91bnRzXG4gICAgbi0tO1xuICAgIG4gfD0gbiA+Pj4gMTtcbiAgICBuIHw9IG4gPj4+IDI7XG4gICAgbiB8PSBuID4+PiA0O1xuICAgIG4gfD0gbiA+Pj4gODtcbiAgICBuIHw9IG4gPj4+IDE2O1xuICAgIG4rKztcbiAgfVxuXG4gIHJldHVybiBuO1xufSAvLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cblxuXG5mdW5jdGlvbiBob3dNdWNoVG9SZWFkKG4sIHN0YXRlKSB7XG4gIGlmIChuIDw9IDAgfHwgc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmVuZGVkKSByZXR1cm4gMDtcbiAgaWYgKHN0YXRlLm9iamVjdE1vZGUpIHJldHVybiAxO1xuXG4gIGlmIChuICE9PSBuKSB7XG4gICAgLy8gT25seSBmbG93IG9uZSBidWZmZXIgYXQgYSB0aW1lXG4gICAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgc3RhdGUubGVuZ3RoKSByZXR1cm4gc3RhdGUuYnVmZmVyLmhlYWQuZGF0YS5sZW5ndGg7ZWxzZSByZXR1cm4gc3RhdGUubGVuZ3RoO1xuICB9IC8vIElmIHdlJ3JlIGFza2luZyBmb3IgbW9yZSB0aGFuIHRoZSBjdXJyZW50IGh3bSwgdGhlbiByYWlzZSB0aGUgaHdtLlxuXG5cbiAgaWYgKG4gPiBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSBzdGF0ZS5oaWdoV2F0ZXJNYXJrID0gY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsobik7XG4gIGlmIChuIDw9IHN0YXRlLmxlbmd0aCkgcmV0dXJuIG47IC8vIERvbid0IGhhdmUgZW5vdWdoXG5cbiAgaWYgKCFzdGF0ZS5lbmRlZCkge1xuICAgIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICByZXR1cm4gc3RhdGUubGVuZ3RoO1xufSAvLyB5b3UgY2FuIG92ZXJyaWRlIGVpdGhlciB0aGlzIG1ldGhvZCwgb3IgdGhlIGFzeW5jIF9yZWFkKG4pIGJlbG93LlxuXG5cblJlYWRhYmxlLnByb3RvdHlwZS5yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgZGVidWcoJ3JlYWQnLCBuKTtcbiAgbiA9IHBhcnNlSW50KG4sIDEwKTtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIG5PcmlnID0gbjtcbiAgaWYgKG4gIT09IDApIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlOyAvLyBpZiB3ZSdyZSBkb2luZyByZWFkKDApIHRvIHRyaWdnZXIgYSByZWFkYWJsZSBldmVudCwgYnV0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhIGJ1bmNoIG9mIGRhdGEgaW4gdGhlIGJ1ZmZlciwgdGhlbiBqdXN0IHRyaWdnZXJcbiAgLy8gdGhlICdyZWFkYWJsZScgZXZlbnQgYW5kIG1vdmUgb24uXG5cbiAgaWYgKG4gPT09IDAgJiYgc3RhdGUubmVlZFJlYWRhYmxlICYmICgoc3RhdGUuaGlnaFdhdGVyTWFyayAhPT0gMCA/IHN0YXRlLmxlbmd0aCA+PSBzdGF0ZS5oaWdoV2F0ZXJNYXJrIDogc3RhdGUubGVuZ3RoID4gMCkgfHwgc3RhdGUuZW5kZWQpKSB7XG4gICAgZGVidWcoJ3JlYWQ6IGVtaXRSZWFkYWJsZScsIHN0YXRlLmxlbmd0aCwgc3RhdGUuZW5kZWQpO1xuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuZW5kZWQpIGVuZFJlYWRhYmxlKHRoaXMpO2Vsc2UgZW1pdFJlYWRhYmxlKHRoaXMpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbiA9IGhvd011Y2hUb1JlYWQobiwgc3RhdGUpOyAvLyBpZiB3ZSd2ZSBlbmRlZCwgYW5kIHdlJ3JlIG5vdyBjbGVhciwgdGhlbiBmaW5pc2ggaXQgdXAuXG5cbiAgaWYgKG4gPT09IDAgJiYgc3RhdGUuZW5kZWQpIHtcbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSBlbmRSZWFkYWJsZSh0aGlzKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSAvLyBBbGwgdGhlIGFjdHVhbCBjaHVuayBnZW5lcmF0aW9uIGxvZ2ljIG5lZWRzIHRvIGJlXG4gIC8vICpiZWxvdyogdGhlIGNhbGwgdG8gX3JlYWQuICBUaGUgcmVhc29uIGlzIHRoYXQgaW4gY2VydGFpblxuICAvLyBzeW50aGV0aWMgc3RyZWFtIGNhc2VzLCBzdWNoIGFzIHBhc3N0aHJvdWdoIHN0cmVhbXMsIF9yZWFkXG4gIC8vIG1heSBiZSBhIGNvbXBsZXRlbHkgc3luY2hyb25vdXMgb3BlcmF0aW9uIHdoaWNoIG1heSBjaGFuZ2VcbiAgLy8gdGhlIHN0YXRlIG9mIHRoZSByZWFkIGJ1ZmZlciwgcHJvdmlkaW5nIGVub3VnaCBkYXRhIHdoZW5cbiAgLy8gYmVmb3JlIHRoZXJlIHdhcyAqbm90KiBlbm91Z2guXG4gIC8vXG4gIC8vIFNvLCB0aGUgc3RlcHMgYXJlOlxuICAvLyAxLiBGaWd1cmUgb3V0IHdoYXQgdGhlIHN0YXRlIG9mIHRoaW5ncyB3aWxsIGJlIGFmdGVyIHdlIGRvXG4gIC8vIGEgcmVhZCBmcm9tIHRoZSBidWZmZXIuXG4gIC8vXG4gIC8vIDIuIElmIHRoYXQgcmVzdWx0aW5nIHN0YXRlIHdpbGwgdHJpZ2dlciBhIF9yZWFkLCB0aGVuIGNhbGwgX3JlYWQuXG4gIC8vIE5vdGUgdGhhdCB0aGlzIG1heSBiZSBhc3luY2hyb25vdXMsIG9yIHN5bmNocm9ub3VzLiAgWWVzLCBpdCBpc1xuICAvLyBkZWVwbHkgdWdseSB0byB3cml0ZSBBUElzIHRoaXMgd2F5LCBidXQgdGhhdCBzdGlsbCBkb2Vzbid0IG1lYW5cbiAgLy8gdGhhdCB0aGUgUmVhZGFibGUgY2xhc3Mgc2hvdWxkIGJlaGF2ZSBpbXByb3Blcmx5LCBhcyBzdHJlYW1zIGFyZVxuICAvLyBkZXNpZ25lZCB0byBiZSBzeW5jL2FzeW5jIGFnbm9zdGljLlxuICAvLyBUYWtlIG5vdGUgaWYgdGhlIF9yZWFkIGNhbGwgaXMgc3luYyBvciBhc3luYyAoaWUsIGlmIHRoZSByZWFkIGNhbGxcbiAgLy8gaGFzIHJldHVybmVkIHlldCksIHNvIHRoYXQgd2Uga25vdyB3aGV0aGVyIG9yIG5vdCBpdCdzIHNhZmUgdG8gZW1pdFxuICAvLyAncmVhZGFibGUnIGV0Yy5cbiAgLy9cbiAgLy8gMy4gQWN0dWFsbHkgcHVsbCB0aGUgcmVxdWVzdGVkIGNodW5rcyBvdXQgb2YgdGhlIGJ1ZmZlciBhbmQgcmV0dXJuLlxuICAvLyBpZiB3ZSBuZWVkIGEgcmVhZGFibGUgZXZlbnQsIHRoZW4gd2UgbmVlZCB0byBkbyBzb21lIHJlYWRpbmcuXG5cblxuICB2YXIgZG9SZWFkID0gc3RhdGUubmVlZFJlYWRhYmxlO1xuICBkZWJ1ZygnbmVlZCByZWFkYWJsZScsIGRvUmVhZCk7IC8vIGlmIHdlIGN1cnJlbnRseSBoYXZlIGxlc3MgdGhhbiB0aGUgaGlnaFdhdGVyTWFyaywgdGhlbiBhbHNvIHJlYWQgc29tZVxuXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgfHwgc3RhdGUubGVuZ3RoIC0gbiA8IHN0YXRlLmhpZ2hXYXRlck1hcmspIHtcbiAgICBkb1JlYWQgPSB0cnVlO1xuICAgIGRlYnVnKCdsZW5ndGggbGVzcyB0aGFuIHdhdGVybWFyaycsIGRvUmVhZCk7XG4gIH0gLy8gaG93ZXZlciwgaWYgd2UndmUgZW5kZWQsIHRoZW4gdGhlcmUncyBubyBwb2ludCwgYW5kIGlmIHdlJ3JlIGFscmVhZHlcbiAgLy8gcmVhZGluZywgdGhlbiBpdCdzIHVubmVjZXNzYXJ5LlxuXG5cbiAgaWYgKHN0YXRlLmVuZGVkIHx8IHN0YXRlLnJlYWRpbmcpIHtcbiAgICBkb1JlYWQgPSBmYWxzZTtcbiAgICBkZWJ1ZygncmVhZGluZyBvciBlbmRlZCcsIGRvUmVhZCk7XG4gIH0gZWxzZSBpZiAoZG9SZWFkKSB7XG4gICAgZGVidWcoJ2RvIHJlYWQnKTtcbiAgICBzdGF0ZS5yZWFkaW5nID0gdHJ1ZTtcbiAgICBzdGF0ZS5zeW5jID0gdHJ1ZTsgLy8gaWYgdGhlIGxlbmd0aCBpcyBjdXJyZW50bHkgemVybywgdGhlbiB3ZSAqbmVlZCogYSByZWFkYWJsZSBldmVudC5cblxuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7IC8vIGNhbGwgaW50ZXJuYWwgcmVhZCBtZXRob2RcblxuICAgIHRoaXMuX3JlYWQoc3RhdGUuaGlnaFdhdGVyTWFyayk7XG5cbiAgICBzdGF0ZS5zeW5jID0gZmFsc2U7IC8vIElmIF9yZWFkIHB1c2hlZCBkYXRhIHN5bmNocm9ub3VzbHksIHRoZW4gYHJlYWRpbmdgIHdpbGwgYmUgZmFsc2UsXG4gICAgLy8gYW5kIHdlIG5lZWQgdG8gcmUtZXZhbHVhdGUgaG93IG11Y2ggZGF0YSB3ZSBjYW4gcmV0dXJuIHRvIHRoZSB1c2VyLlxuXG4gICAgaWYgKCFzdGF0ZS5yZWFkaW5nKSBuID0gaG93TXVjaFRvUmVhZChuT3JpZywgc3RhdGUpO1xuICB9XG5cbiAgdmFyIHJldDtcbiAgaWYgKG4gPiAwKSByZXQgPSBmcm9tTGlzdChuLCBzdGF0ZSk7ZWxzZSByZXQgPSBudWxsO1xuXG4gIGlmIChyZXQgPT09IG51bGwpIHtcbiAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSBzdGF0ZS5sZW5ndGggPD0gc3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgICBuID0gMDtcbiAgfSBlbHNlIHtcbiAgICBzdGF0ZS5sZW5ndGggLT0gbjtcbiAgICBzdGF0ZS5hd2FpdERyYWluID0gMDtcbiAgfVxuXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHtcbiAgICAvLyBJZiB3ZSBoYXZlIG5vdGhpbmcgaW4gdGhlIGJ1ZmZlciwgdGhlbiB3ZSB3YW50IHRvIGtub3dcbiAgICAvLyBhcyBzb29uIGFzIHdlICpkbyogZ2V0IHNvbWV0aGluZyBpbnRvIHRoZSBidWZmZXIuXG4gICAgaWYgKCFzdGF0ZS5lbmRlZCkgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTsgLy8gSWYgd2UgdHJpZWQgdG8gcmVhZCgpIHBhc3QgdGhlIEVPRiwgdGhlbiBlbWl0IGVuZCBvbiB0aGUgbmV4dCB0aWNrLlxuXG4gICAgaWYgKG5PcmlnICE9PSBuICYmIHN0YXRlLmVuZGVkKSBlbmRSZWFkYWJsZSh0aGlzKTtcbiAgfVxuXG4gIGlmIChyZXQgIT09IG51bGwpIHRoaXMuZW1pdCgnZGF0YScsIHJldCk7XG4gIHJldHVybiByZXQ7XG59O1xuXG5mdW5jdGlvbiBvbkVvZkNodW5rKHN0cmVhbSwgc3RhdGUpIHtcbiAgZGVidWcoJ29uRW9mQ2h1bmsnKTtcbiAgaWYgKHN0YXRlLmVuZGVkKSByZXR1cm47XG5cbiAgaWYgKHN0YXRlLmRlY29kZXIpIHtcbiAgICB2YXIgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLmVuZCgpO1xuXG4gICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkge1xuICAgICAgc3RhdGUuYnVmZmVyLnB1c2goY2h1bmspO1xuICAgICAgc3RhdGUubGVuZ3RoICs9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRlLmVuZGVkID0gdHJ1ZTtcblxuICBpZiAoc3RhdGUuc3luYykge1xuICAgIC8vIGlmIHdlIGFyZSBzeW5jLCB3YWl0IHVudGlsIG5leHQgdGljayB0byBlbWl0IHRoZSBkYXRhLlxuICAgIC8vIE90aGVyd2lzZSB3ZSByaXNrIGVtaXR0aW5nIGRhdGEgaW4gdGhlIGZsb3coKVxuICAgIC8vIHRoZSByZWFkYWJsZSBjb2RlIHRyaWdnZXJzIGR1cmluZyBhIHJlYWQoKSBjYWxsXG4gICAgZW1pdFJlYWRhYmxlKHN0cmVhbSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gZW1pdCAncmVhZGFibGUnIG5vdyB0byBtYWtlIHN1cmUgaXQgZ2V0cyBwaWNrZWQgdXAuXG4gICAgc3RhdGUubmVlZFJlYWRhYmxlID0gZmFsc2U7XG5cbiAgICBpZiAoIXN0YXRlLmVtaXR0ZWRSZWFkYWJsZSkge1xuICAgICAgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICAgIGVtaXRSZWFkYWJsZV8oc3RyZWFtKTtcbiAgICB9XG4gIH1cbn0gLy8gRG9uJ3QgZW1pdCByZWFkYWJsZSByaWdodCBhd2F5IGluIHN5bmMgbW9kZSwgYmVjYXVzZSB0aGlzIGNhbiB0cmlnZ2VyXG4vLyBhbm90aGVyIHJlYWQoKSBjYWxsID0+IHN0YWNrIG92ZXJmbG93LiAgVGhpcyB3YXksIGl0IG1pZ2h0IHRyaWdnZXJcbi8vIGEgbmV4dFRpY2sgcmVjdXJzaW9uIHdhcm5pbmcsIGJ1dCB0aGF0J3Mgbm90IHNvIGJhZC5cblxuXG5mdW5jdGlvbiBlbWl0UmVhZGFibGUoc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgZGVidWcoJ2VtaXRSZWFkYWJsZScsIHN0YXRlLm5lZWRSZWFkYWJsZSwgc3RhdGUuZW1pdHRlZFJlYWRhYmxlKTtcbiAgc3RhdGUubmVlZFJlYWRhYmxlID0gZmFsc2U7XG5cbiAgaWYgKCFzdGF0ZS5lbWl0dGVkUmVhZGFibGUpIHtcbiAgICBkZWJ1ZygnZW1pdFJlYWRhYmxlJywgc3RhdGUuZmxvd2luZyk7XG4gICAgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICBwcm9jZXNzLm5leHRUaWNrKGVtaXRSZWFkYWJsZV8sIHN0cmVhbSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW1pdFJlYWRhYmxlXyhzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBkZWJ1ZygnZW1pdFJlYWRhYmxlXycsIHN0YXRlLmRlc3Ryb3llZCwgc3RhdGUubGVuZ3RoLCBzdGF0ZS5lbmRlZCk7XG5cbiAgaWYgKCFzdGF0ZS5kZXN0cm95ZWQgJiYgKHN0YXRlLmxlbmd0aCB8fCBzdGF0ZS5lbmRlZCkpIHtcbiAgICBzdHJlYW0uZW1pdCgncmVhZGFibGUnKTtcbiAgICBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcbiAgfSAvLyBUaGUgc3RyZWFtIG5lZWRzIGFub3RoZXIgcmVhZGFibGUgZXZlbnQgaWZcbiAgLy8gMS4gSXQgaXMgbm90IGZsb3dpbmcsIGFzIHRoZSBmbG93IG1lY2hhbmlzbSB3aWxsIHRha2VcbiAgLy8gICAgY2FyZSBvZiBpdC5cbiAgLy8gMi4gSXQgaXMgbm90IGVuZGVkLlxuICAvLyAzLiBJdCBpcyBiZWxvdyB0aGUgaGlnaFdhdGVyTWFyaywgc28gd2UgY2FuIHNjaGVkdWxlXG4gIC8vICAgIGFub3RoZXIgcmVhZGFibGUgbGF0ZXIuXG5cblxuICBzdGF0ZS5uZWVkUmVhZGFibGUgPSAhc3RhdGUuZmxvd2luZyAmJiAhc3RhdGUuZW5kZWQgJiYgc3RhdGUubGVuZ3RoIDw9IHN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIGZsb3coc3RyZWFtKTtcbn0gLy8gYXQgdGhpcyBwb2ludCwgdGhlIHVzZXIgaGFzIHByZXN1bWFibHkgc2VlbiB0aGUgJ3JlYWRhYmxlJyBldmVudCxcbi8vIGFuZCBjYWxsZWQgcmVhZCgpIHRvIGNvbnN1bWUgc29tZSBkYXRhLiAgdGhhdCBtYXkgaGF2ZSB0cmlnZ2VyZWRcbi8vIGluIHR1cm4gYW5vdGhlciBfcmVhZChuKSBjYWxsLCBpbiB3aGljaCBjYXNlIHJlYWRpbmcgPSB0cnVlIGlmXG4vLyBpdCdzIGluIHByb2dyZXNzLlxuLy8gSG93ZXZlciwgaWYgd2UncmUgbm90IGVuZGVkLCBvciByZWFkaW5nLCBhbmQgdGhlIGxlbmd0aCA8IGh3bSxcbi8vIHRoZW4gZ28gYWhlYWQgYW5kIHRyeSB0byByZWFkIHNvbWUgbW9yZSBwcmVlbXB0aXZlbHkuXG5cblxuZnVuY3Rpb24gbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVhZGluZ01vcmUpIHtcbiAgICBzdGF0ZS5yZWFkaW5nTW9yZSA9IHRydWU7XG4gICAgcHJvY2Vzcy5uZXh0VGljayhtYXliZVJlYWRNb3JlXywgc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWF5YmVSZWFkTW9yZV8oc3RyZWFtLCBzdGF0ZSkge1xuICAvLyBBdHRlbXB0IHRvIHJlYWQgbW9yZSBkYXRhIGlmIHdlIHNob3VsZC5cbiAgLy9cbiAgLy8gVGhlIGNvbmRpdGlvbnMgZm9yIHJlYWRpbmcgbW9yZSBkYXRhIGFyZSAob25lIG9mKTpcbiAgLy8gLSBOb3QgZW5vdWdoIGRhdGEgYnVmZmVyZWQgKHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcmspLiBUaGUgbG9vcFxuICAvLyAgIGlzIHJlc3BvbnNpYmxlIGZvciBmaWxsaW5nIHRoZSBidWZmZXIgd2l0aCBlbm91Z2ggZGF0YSBpZiBzdWNoIGRhdGFcbiAgLy8gICBpcyBhdmFpbGFibGUuIElmIGhpZ2hXYXRlck1hcmsgaXMgMCBhbmQgd2UgYXJlIG5vdCBpbiB0aGUgZmxvd2luZyBtb2RlXG4gIC8vICAgd2Ugc2hvdWxkIF9ub3RfIGF0dGVtcHQgdG8gYnVmZmVyIGFueSBleHRyYSBkYXRhLiBXZSdsbCBnZXQgbW9yZSBkYXRhXG4gIC8vICAgd2hlbiB0aGUgc3RyZWFtIGNvbnN1bWVyIGNhbGxzIHJlYWQoKSBpbnN0ZWFkLlxuICAvLyAtIE5vIGRhdGEgaW4gdGhlIGJ1ZmZlciwgYW5kIHRoZSBzdHJlYW0gaXMgaW4gZmxvd2luZyBtb2RlLiBJbiB0aGlzIG1vZGVcbiAgLy8gICB0aGUgbG9vcCBiZWxvdyBpcyByZXNwb25zaWJsZSBmb3IgZW5zdXJpbmcgcmVhZCgpIGlzIGNhbGxlZC4gRmFpbGluZyB0b1xuICAvLyAgIGNhbGwgcmVhZCBoZXJlIHdvdWxkIGFib3J0IHRoZSBmbG93IGFuZCB0aGVyZSdzIG5vIG90aGVyIG1lY2hhbmlzbSBmb3JcbiAgLy8gICBjb250aW51aW5nIHRoZSBmbG93IGlmIHRoZSBzdHJlYW0gY29uc3VtZXIgaGFzIGp1c3Qgc3Vic2NyaWJlZCB0byB0aGVcbiAgLy8gICAnZGF0YScgZXZlbnQuXG4gIC8vXG4gIC8vIEluIGFkZGl0aW9uIHRvIHRoZSBhYm92ZSBjb25kaXRpb25zIHRvIGtlZXAgcmVhZGluZyBkYXRhLCB0aGUgZm9sbG93aW5nXG4gIC8vIGNvbmRpdGlvbnMgcHJldmVudCB0aGUgZGF0YSBmcm9tIGJlaW5nIHJlYWQ6XG4gIC8vIC0gVGhlIHN0cmVhbSBoYXMgZW5kZWQgKHN0YXRlLmVuZGVkKS5cbiAgLy8gLSBUaGVyZSBpcyBhbHJlYWR5IGEgcGVuZGluZyAncmVhZCcgb3BlcmF0aW9uIChzdGF0ZS5yZWFkaW5nKS4gVGhpcyBpcyBhXG4gIC8vICAgY2FzZSB3aGVyZSB0aGUgdGhlIHN0cmVhbSBoYXMgY2FsbGVkIHRoZSBpbXBsZW1lbnRhdGlvbiBkZWZpbmVkIF9yZWFkKClcbiAgLy8gICBtZXRob2QsIGJ1dCB0aGV5IGFyZSBwcm9jZXNzaW5nIHRoZSBjYWxsIGFzeW5jaHJvbm91c2x5IGFuZCBoYXZlIF9ub3RfXG4gIC8vICAgY2FsbGVkIHB1c2goKSB3aXRoIG5ldyBkYXRhLiBJbiB0aGlzIGNhc2Ugd2Ugc2tpcCBwZXJmb3JtaW5nIG1vcmVcbiAgLy8gICByZWFkKClzLiBUaGUgZXhlY3V0aW9uIGVuZHMgaW4gdGhpcyBtZXRob2QgYWdhaW4gYWZ0ZXIgdGhlIF9yZWFkKCkgZW5kc1xuICAvLyAgIHVwIGNhbGxpbmcgcHVzaCgpIHdpdGggbW9yZSBkYXRhLlxuICB3aGlsZSAoIXN0YXRlLnJlYWRpbmcgJiYgIXN0YXRlLmVuZGVkICYmIChzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrIHx8IHN0YXRlLmZsb3dpbmcgJiYgc3RhdGUubGVuZ3RoID09PSAwKSkge1xuICAgIHZhciBsZW4gPSBzdGF0ZS5sZW5ndGg7XG4gICAgZGVidWcoJ21heWJlUmVhZE1vcmUgcmVhZCAwJyk7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gICAgaWYgKGxlbiA9PT0gc3RhdGUubGVuZ3RoKSAvLyBkaWRuJ3QgZ2V0IGFueSBkYXRhLCBzdG9wIHNwaW5uaW5nLlxuICAgICAgYnJlYWs7XG4gIH1cblxuICBzdGF0ZS5yZWFkaW5nTW9yZSA9IGZhbHNlO1xufSAvLyBhYnN0cmFjdCBtZXRob2QuICB0byBiZSBvdmVycmlkZGVuIGluIHNwZWNpZmljIGltcGxlbWVudGF0aW9uIGNsYXNzZXMuXG4vLyBjYWxsIGNiKGVyLCBkYXRhKSB3aGVyZSBkYXRhIGlzIDw9IG4gaW4gbGVuZ3RoLlxuLy8gZm9yIHZpcnR1YWwgKG5vbi1zdHJpbmcsIG5vbi1idWZmZXIpIHN0cmVhbXMsIFwibGVuZ3RoXCIgaXMgc29tZXdoYXRcbi8vIGFyYml0cmFyeSwgYW5kIHBlcmhhcHMgbm90IHZlcnkgbWVhbmluZ2Z1bC5cblxuXG5SZWFkYWJsZS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICBlcnJvck9yRGVzdHJveSh0aGlzLCBuZXcgRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQoJ19yZWFkKCknKSk7XG59O1xuXG5SZWFkYWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uIChkZXN0LCBwaXBlT3B0cykge1xuICB2YXIgc3JjID0gdGhpcztcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcblxuICBzd2l0Y2ggKHN0YXRlLnBpcGVzQ291bnQpIHtcbiAgICBjYXNlIDA6XG4gICAgICBzdGF0ZS5waXBlcyA9IGRlc3Q7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgMTpcbiAgICAgIHN0YXRlLnBpcGVzID0gW3N0YXRlLnBpcGVzLCBkZXN0XTtcbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHN0YXRlLnBpcGVzLnB1c2goZGVzdCk7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHN0YXRlLnBpcGVzQ291bnQgKz0gMTtcbiAgZGVidWcoJ3BpcGUgY291bnQ9JWQgb3B0cz0laicsIHN0YXRlLnBpcGVzQ291bnQsIHBpcGVPcHRzKTtcbiAgdmFyIGRvRW5kID0gKCFwaXBlT3B0cyB8fCBwaXBlT3B0cy5lbmQgIT09IGZhbHNlKSAmJiBkZXN0ICE9PSBwcm9jZXNzLnN0ZG91dCAmJiBkZXN0ICE9PSBwcm9jZXNzLnN0ZGVycjtcbiAgdmFyIGVuZEZuID0gZG9FbmQgPyBvbmVuZCA6IHVucGlwZTtcbiAgaWYgKHN0YXRlLmVuZEVtaXR0ZWQpIHByb2Nlc3MubmV4dFRpY2soZW5kRm4pO2Vsc2Ugc3JjLm9uY2UoJ2VuZCcsIGVuZEZuKTtcbiAgZGVzdC5vbigndW5waXBlJywgb251bnBpcGUpO1xuXG4gIGZ1bmN0aW9uIG9udW5waXBlKHJlYWRhYmxlLCB1bnBpcGVJbmZvKSB7XG4gICAgZGVidWcoJ29udW5waXBlJyk7XG5cbiAgICBpZiAocmVhZGFibGUgPT09IHNyYykge1xuICAgICAgaWYgKHVucGlwZUluZm8gJiYgdW5waXBlSW5mby5oYXNVbnBpcGVkID09PSBmYWxzZSkge1xuICAgICAgICB1bnBpcGVJbmZvLmhhc1VucGlwZWQgPSB0cnVlO1xuICAgICAgICBjbGVhbnVwKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25lbmQoKSB7XG4gICAgZGVidWcoJ29uZW5kJyk7XG4gICAgZGVzdC5lbmQoKTtcbiAgfSAvLyB3aGVuIHRoZSBkZXN0IGRyYWlucywgaXQgcmVkdWNlcyB0aGUgYXdhaXREcmFpbiBjb3VudGVyXG4gIC8vIG9uIHRoZSBzb3VyY2UuICBUaGlzIHdvdWxkIGJlIG1vcmUgZWxlZ2FudCB3aXRoIGEgLm9uY2UoKVxuICAvLyBoYW5kbGVyIGluIGZsb3coKSwgYnV0IGFkZGluZyBhbmQgcmVtb3ZpbmcgcmVwZWF0ZWRseSBpc1xuICAvLyB0b28gc2xvdy5cblxuXG4gIHZhciBvbmRyYWluID0gcGlwZU9uRHJhaW4oc3JjKTtcbiAgZGVzdC5vbignZHJhaW4nLCBvbmRyYWluKTtcbiAgdmFyIGNsZWFuZWRVcCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgZGVidWcoJ2NsZWFudXAnKTsgLy8gY2xlYW51cCBldmVudCBoYW5kbGVycyBvbmNlIHRoZSBwaXBlIGlzIGJyb2tlblxuXG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZHJhaW4nLCBvbmRyYWluKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ3VucGlwZScsIG9udW5waXBlKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIHVucGlwZSk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgb25kYXRhKTtcbiAgICBjbGVhbmVkVXAgPSB0cnVlOyAvLyBpZiB0aGUgcmVhZGVyIGlzIHdhaXRpbmcgZm9yIGEgZHJhaW4gZXZlbnQgZnJvbSB0aGlzXG4gICAgLy8gc3BlY2lmaWMgd3JpdGVyLCB0aGVuIGl0IHdvdWxkIGNhdXNlIGl0IHRvIG5ldmVyIHN0YXJ0XG4gICAgLy8gZmxvd2luZyBhZ2Fpbi5cbiAgICAvLyBTbywgaWYgdGhpcyBpcyBhd2FpdGluZyBhIGRyYWluLCB0aGVuIHdlIGp1c3QgY2FsbCBpdCBub3cuXG4gICAgLy8gSWYgd2UgZG9uJ3Qga25vdywgdGhlbiBhc3N1bWUgdGhhdCB3ZSBhcmUgd2FpdGluZyBmb3Igb25lLlxuXG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4gJiYgKCFkZXN0Ll93cml0YWJsZVN0YXRlIHx8IGRlc3QuX3dyaXRhYmxlU3RhdGUubmVlZERyYWluKSkgb25kcmFpbigpO1xuICB9XG5cbiAgc3JjLm9uKCdkYXRhJywgb25kYXRhKTtcblxuICBmdW5jdGlvbiBvbmRhdGEoY2h1bmspIHtcbiAgICBkZWJ1Zygnb25kYXRhJyk7XG4gICAgdmFyIHJldCA9IGRlc3Qud3JpdGUoY2h1bmspO1xuICAgIGRlYnVnKCdkZXN0LndyaXRlJywgcmV0KTtcblxuICAgIGlmIChyZXQgPT09IGZhbHNlKSB7XG4gICAgICAvLyBJZiB0aGUgdXNlciB1bnBpcGVkIGR1cmluZyBgZGVzdC53cml0ZSgpYCwgaXQgaXMgcG9zc2libGVcbiAgICAgIC8vIHRvIGdldCBzdHVjayBpbiBhIHBlcm1hbmVudGx5IHBhdXNlZCBzdGF0ZSBpZiB0aGF0IHdyaXRlXG4gICAgICAvLyBhbHNvIHJldHVybmVkIGZhbHNlLlxuICAgICAgLy8gPT4gQ2hlY2sgd2hldGhlciBgZGVzdGAgaXMgc3RpbGwgYSBwaXBpbmcgZGVzdGluYXRpb24uXG4gICAgICBpZiAoKHN0YXRlLnBpcGVzQ291bnQgPT09IDEgJiYgc3RhdGUucGlwZXMgPT09IGRlc3QgfHwgc3RhdGUucGlwZXNDb3VudCA+IDEgJiYgaW5kZXhPZihzdGF0ZS5waXBlcywgZGVzdCkgIT09IC0xKSAmJiAhY2xlYW5lZFVwKSB7XG4gICAgICAgIGRlYnVnKCdmYWxzZSB3cml0ZSByZXNwb25zZSwgcGF1c2UnLCBzdGF0ZS5hd2FpdERyYWluKTtcbiAgICAgICAgc3RhdGUuYXdhaXREcmFpbisrO1xuICAgICAgfVxuXG4gICAgICBzcmMucGF1c2UoKTtcbiAgICB9XG4gIH0gLy8gaWYgdGhlIGRlc3QgaGFzIGFuIGVycm9yLCB0aGVuIHN0b3AgcGlwaW5nIGludG8gaXQuXG4gIC8vIGhvd2V2ZXIsIGRvbid0IHN1cHByZXNzIHRoZSB0aHJvd2luZyBiZWhhdmlvciBmb3IgdGhpcy5cblxuXG4gIGZ1bmN0aW9uIG9uZXJyb3IoZXIpIHtcbiAgICBkZWJ1Zygnb25lcnJvcicsIGVyKTtcbiAgICB1bnBpcGUoKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGlmIChFRWxpc3RlbmVyQ291bnQoZGVzdCwgJ2Vycm9yJykgPT09IDApIGVycm9yT3JEZXN0cm95KGRlc3QsIGVyKTtcbiAgfSAvLyBNYWtlIHN1cmUgb3VyIGVycm9yIGhhbmRsZXIgaXMgYXR0YWNoZWQgYmVmb3JlIHVzZXJsYW5kIG9uZXMuXG5cblxuICBwcmVwZW5kTGlzdGVuZXIoZGVzdCwgJ2Vycm9yJywgb25lcnJvcik7IC8vIEJvdGggY2xvc2UgYW5kIGZpbmlzaCBzaG91bGQgdHJpZ2dlciB1bnBpcGUsIGJ1dCBvbmx5IG9uY2UuXG5cbiAgZnVuY3Rpb24gb25jbG9zZSgpIHtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gICAgdW5waXBlKCk7XG4gIH1cblxuICBkZXN0Lm9uY2UoJ2Nsb3NlJywgb25jbG9zZSk7XG5cbiAgZnVuY3Rpb24gb25maW5pc2goKSB7XG4gICAgZGVidWcoJ29uZmluaXNoJyk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgICB1bnBpcGUoKTtcbiAgfVxuXG4gIGRlc3Qub25jZSgnZmluaXNoJywgb25maW5pc2gpO1xuXG4gIGZ1bmN0aW9uIHVucGlwZSgpIHtcbiAgICBkZWJ1ZygndW5waXBlJyk7XG4gICAgc3JjLnVucGlwZShkZXN0KTtcbiAgfSAvLyB0ZWxsIHRoZSBkZXN0IHRoYXQgaXQncyBiZWluZyBwaXBlZCB0b1xuXG5cbiAgZGVzdC5lbWl0KCdwaXBlJywgc3JjKTsgLy8gc3RhcnQgdGhlIGZsb3cgaWYgaXQgaGFzbid0IGJlZW4gc3RhcnRlZCBhbHJlYWR5LlxuXG4gIGlmICghc3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdwaXBlIHJlc3VtZScpO1xuICAgIHNyYy5yZXN1bWUoKTtcbiAgfVxuXG4gIHJldHVybiBkZXN0O1xufTtcblxuZnVuY3Rpb24gcGlwZU9uRHJhaW4oc3JjKSB7XG4gIHJldHVybiBmdW5jdGlvbiBwaXBlT25EcmFpbkZ1bmN0aW9uUmVzdWx0KCkge1xuICAgIHZhciBzdGF0ZSA9IHNyYy5fcmVhZGFibGVTdGF0ZTtcbiAgICBkZWJ1ZygncGlwZU9uRHJhaW4nLCBzdGF0ZS5hd2FpdERyYWluKTtcbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbikgc3RhdGUuYXdhaXREcmFpbi0tO1xuXG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4gPT09IDAgJiYgRUVsaXN0ZW5lckNvdW50KHNyYywgJ2RhdGEnKSkge1xuICAgICAgc3RhdGUuZmxvd2luZyA9IHRydWU7XG4gICAgICBmbG93KHNyYyk7XG4gICAgfVxuICB9O1xufVxuXG5SZWFkYWJsZS5wcm90b3R5cGUudW5waXBlID0gZnVuY3Rpb24gKGRlc3QpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHVucGlwZUluZm8gPSB7XG4gICAgaGFzVW5waXBlZDogZmFsc2VcbiAgfTsgLy8gaWYgd2UncmUgbm90IHBpcGluZyBhbnl3aGVyZSwgdGhlbiBkbyBub3RoaW5nLlxuXG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAwKSByZXR1cm4gdGhpczsgLy8ganVzdCBvbmUgZGVzdGluYXRpb24uICBtb3N0IGNvbW1vbiBjYXNlLlxuXG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAxKSB7XG4gICAgLy8gcGFzc2VkIGluIG9uZSwgYnV0IGl0J3Mgbm90IHRoZSByaWdodCBvbmUuXG4gICAgaWYgKGRlc3QgJiYgZGVzdCAhPT0gc3RhdGUucGlwZXMpIHJldHVybiB0aGlzO1xuICAgIGlmICghZGVzdCkgZGVzdCA9IHN0YXRlLnBpcGVzOyAvLyBnb3QgYSBtYXRjaC5cblxuICAgIHN0YXRlLnBpcGVzID0gbnVsbDtcbiAgICBzdGF0ZS5waXBlc0NvdW50ID0gMDtcbiAgICBzdGF0ZS5mbG93aW5nID0gZmFsc2U7XG4gICAgaWYgKGRlc3QpIGRlc3QuZW1pdCgndW5waXBlJywgdGhpcywgdW5waXBlSW5mbyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0gLy8gc2xvdyBjYXNlLiBtdWx0aXBsZSBwaXBlIGRlc3RpbmF0aW9ucy5cblxuXG4gIGlmICghZGVzdCkge1xuICAgIC8vIHJlbW92ZSBhbGwuXG4gICAgdmFyIGRlc3RzID0gc3RhdGUucGlwZXM7XG4gICAgdmFyIGxlbiA9IHN0YXRlLnBpcGVzQ291bnQ7XG4gICAgc3RhdGUucGlwZXMgPSBudWxsO1xuICAgIHN0YXRlLnBpcGVzQ291bnQgPSAwO1xuICAgIHN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGRlc3RzW2ldLmVtaXQoJ3VucGlwZScsIHRoaXMsIHtcbiAgICAgICAgaGFzVW5waXBlZDogZmFsc2VcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9IC8vIHRyeSB0byBmaW5kIHRoZSByaWdodCBvbmUuXG5cblxuICB2YXIgaW5kZXggPSBpbmRleE9mKHN0YXRlLnBpcGVzLCBkZXN0KTtcbiAgaWYgKGluZGV4ID09PSAtMSkgcmV0dXJuIHRoaXM7XG4gIHN0YXRlLnBpcGVzLnNwbGljZShpbmRleCwgMSk7XG4gIHN0YXRlLnBpcGVzQ291bnQgLT0gMTtcbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDEpIHN0YXRlLnBpcGVzID0gc3RhdGUucGlwZXNbMF07XG4gIGRlc3QuZW1pdCgndW5waXBlJywgdGhpcywgdW5waXBlSW5mbyk7XG4gIHJldHVybiB0aGlzO1xufTsgLy8gc2V0IHVwIGRhdGEgZXZlbnRzIGlmIHRoZXkgYXJlIGFza2VkIGZvclxuLy8gRW5zdXJlIHJlYWRhYmxlIGxpc3RlbmVycyBldmVudHVhbGx5IGdldCBzb21ldGhpbmdcblxuXG5SZWFkYWJsZS5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAoZXYsIGZuKSB7XG4gIHZhciByZXMgPSBTdHJlYW0ucHJvdG90eXBlLm9uLmNhbGwodGhpcywgZXYsIGZuKTtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcblxuICBpZiAoZXYgPT09ICdkYXRhJykge1xuICAgIC8vIHVwZGF0ZSByZWFkYWJsZUxpc3RlbmluZyBzbyB0aGF0IHJlc3VtZSgpIG1heSBiZSBhIG5vLW9wXG4gICAgLy8gYSBmZXcgbGluZXMgZG93bi4gVGhpcyBpcyBuZWVkZWQgdG8gc3VwcG9ydCBvbmNlKCdyZWFkYWJsZScpLlxuICAgIHN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nID0gdGhpcy5saXN0ZW5lckNvdW50KCdyZWFkYWJsZScpID4gMDsgLy8gVHJ5IHN0YXJ0IGZsb3dpbmcgb24gbmV4dCB0aWNrIGlmIHN0cmVhbSBpc24ndCBleHBsaWNpdGx5IHBhdXNlZFxuXG4gICAgaWYgKHN0YXRlLmZsb3dpbmcgIT09IGZhbHNlKSB0aGlzLnJlc3VtZSgpO1xuICB9IGVsc2UgaWYgKGV2ID09PSAncmVhZGFibGUnKSB7XG4gICAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkICYmICFzdGF0ZS5yZWFkYWJsZUxpc3RlbmluZykge1xuICAgICAgc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcgPSBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgICAgc3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuICAgICAgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG4gICAgICBkZWJ1Zygnb24gcmVhZGFibGUnLCBzdGF0ZS5sZW5ndGgsIHN0YXRlLnJlYWRpbmcpO1xuXG4gICAgICBpZiAoc3RhdGUubGVuZ3RoKSB7XG4gICAgICAgIGVtaXRSZWFkYWJsZSh0aGlzKTtcbiAgICAgIH0gZWxzZSBpZiAoIXN0YXRlLnJlYWRpbmcpIHtcbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhuUmVhZGluZ05leHRUaWNrLCB0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzO1xufTtcblxuUmVhZGFibGUucHJvdG90eXBlLmFkZExpc3RlbmVyID0gUmVhZGFibGUucHJvdG90eXBlLm9uO1xuXG5SZWFkYWJsZS5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbiAoZXYsIGZuKSB7XG4gIHZhciByZXMgPSBTdHJlYW0ucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyLmNhbGwodGhpcywgZXYsIGZuKTtcblxuICBpZiAoZXYgPT09ICdyZWFkYWJsZScpIHtcbiAgICAvLyBXZSBuZWVkIHRvIGNoZWNrIGlmIHRoZXJlIGlzIHNvbWVvbmUgc3RpbGwgbGlzdGVuaW5nIHRvXG4gICAgLy8gcmVhZGFibGUgYW5kIHJlc2V0IHRoZSBzdGF0ZS4gSG93ZXZlciB0aGlzIG5lZWRzIHRvIGhhcHBlblxuICAgIC8vIGFmdGVyIHJlYWRhYmxlIGhhcyBiZWVuIGVtaXR0ZWQgYnV0IGJlZm9yZSBJL08gKG5leHRUaWNrKSB0b1xuICAgIC8vIHN1cHBvcnQgb25jZSgncmVhZGFibGUnLCBmbikgY3ljbGVzLiBUaGlzIG1lYW5zIHRoYXQgY2FsbGluZ1xuICAgIC8vIHJlc3VtZSB3aXRoaW4gdGhlIHNhbWUgdGljayB3aWxsIGhhdmUgbm9cbiAgICAvLyBlZmZlY3QuXG4gICAgcHJvY2Vzcy5uZXh0VGljayh1cGRhdGVSZWFkYWJsZUxpc3RlbmluZywgdGhpcyk7XG4gIH1cblxuICByZXR1cm4gcmVzO1xufTtcblxuUmVhZGFibGUucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uIChldikge1xuICB2YXIgcmVzID0gU3RyZWFtLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICBpZiAoZXYgPT09ICdyZWFkYWJsZScgfHwgZXYgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIFdlIG5lZWQgdG8gY2hlY2sgaWYgdGhlcmUgaXMgc29tZW9uZSBzdGlsbCBsaXN0ZW5pbmcgdG9cbiAgICAvLyByZWFkYWJsZSBhbmQgcmVzZXQgdGhlIHN0YXRlLiBIb3dldmVyIHRoaXMgbmVlZHMgdG8gaGFwcGVuXG4gICAgLy8gYWZ0ZXIgcmVhZGFibGUgaGFzIGJlZW4gZW1pdHRlZCBidXQgYmVmb3JlIEkvTyAobmV4dFRpY2spIHRvXG4gICAgLy8gc3VwcG9ydCBvbmNlKCdyZWFkYWJsZScsIGZuKSBjeWNsZXMuIFRoaXMgbWVhbnMgdGhhdCBjYWxsaW5nXG4gICAgLy8gcmVzdW1lIHdpdGhpbiB0aGUgc2FtZSB0aWNrIHdpbGwgaGF2ZSBub1xuICAgIC8vIGVmZmVjdC5cbiAgICBwcm9jZXNzLm5leHRUaWNrKHVwZGF0ZVJlYWRhYmxlTGlzdGVuaW5nLCB0aGlzKTtcbiAgfVxuXG4gIHJldHVybiByZXM7XG59O1xuXG5mdW5jdGlvbiB1cGRhdGVSZWFkYWJsZUxpc3RlbmluZyhzZWxmKSB7XG4gIHZhciBzdGF0ZSA9IHNlbGYuX3JlYWRhYmxlU3RhdGU7XG4gIHN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nID0gc2VsZi5saXN0ZW5lckNvdW50KCdyZWFkYWJsZScpID4gMDtcblxuICBpZiAoc3RhdGUucmVzdW1lU2NoZWR1bGVkICYmICFzdGF0ZS5wYXVzZWQpIHtcbiAgICAvLyBmbG93aW5nIG5lZWRzIHRvIGJlIHNldCB0byB0cnVlIG5vdywgb3RoZXJ3aXNlXG4gICAgLy8gdGhlIHVwY29taW5nIHJlc3VtZSB3aWxsIG5vdCBmbG93LlxuICAgIHN0YXRlLmZsb3dpbmcgPSB0cnVlOyAvLyBjcnVkZSB3YXkgdG8gY2hlY2sgaWYgd2Ugc2hvdWxkIHJlc3VtZVxuICB9IGVsc2UgaWYgKHNlbGYubGlzdGVuZXJDb3VudCgnZGF0YScpID4gMCkge1xuICAgIHNlbGYucmVzdW1lKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gblJlYWRpbmdOZXh0VGljayhzZWxmKSB7XG4gIGRlYnVnKCdyZWFkYWJsZSBuZXh0dGljayByZWFkIDAnKTtcbiAgc2VsZi5yZWFkKDApO1xufSAvLyBwYXVzZSgpIGFuZCByZXN1bWUoKSBhcmUgcmVtbmFudHMgb2YgdGhlIGxlZ2FjeSByZWFkYWJsZSBzdHJlYW0gQVBJXG4vLyBJZiB0aGUgdXNlciB1c2VzIHRoZW0sIHRoZW4gc3dpdGNoIGludG8gb2xkIG1vZGUuXG5cblxuUmVhZGFibGUucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcblxuICBpZiAoIXN0YXRlLmZsb3dpbmcpIHtcbiAgICBkZWJ1ZygncmVzdW1lJyk7IC8vIHdlIGZsb3cgb25seSBpZiB0aGVyZSBpcyBubyBvbmUgbGlzdGVuaW5nXG4gICAgLy8gZm9yIHJlYWRhYmxlLCBidXQgd2Ugc3RpbGwgaGF2ZSB0byBjYWxsXG4gICAgLy8gcmVzdW1lKClcblxuICAgIHN0YXRlLmZsb3dpbmcgPSAhc3RhdGUucmVhZGFibGVMaXN0ZW5pbmc7XG4gICAgcmVzdW1lKHRoaXMsIHN0YXRlKTtcbiAgfVxuXG4gIHN0YXRlLnBhdXNlZCA9IGZhbHNlO1xuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIHJlc3VtZShzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVzdW1lU2NoZWR1bGVkKSB7XG4gICAgc3RhdGUucmVzdW1lU2NoZWR1bGVkID0gdHJ1ZTtcbiAgICBwcm9jZXNzLm5leHRUaWNrKHJlc3VtZV8sIHN0cmVhbSwgc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc3VtZV8oc3RyZWFtLCBzdGF0ZSkge1xuICBkZWJ1ZygncmVzdW1lJywgc3RhdGUucmVhZGluZyk7XG5cbiAgaWYgKCFzdGF0ZS5yZWFkaW5nKSB7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gIH1cblxuICBzdGF0ZS5yZXN1bWVTY2hlZHVsZWQgPSBmYWxzZTtcbiAgc3RyZWFtLmVtaXQoJ3Jlc3VtZScpO1xuICBmbG93KHN0cmVhbSk7XG4gIGlmIChzdGF0ZS5mbG93aW5nICYmICFzdGF0ZS5yZWFkaW5nKSBzdHJlYW0ucmVhZCgwKTtcbn1cblxuUmVhZGFibGUucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygnY2FsbCBwYXVzZSBmbG93aW5nPSVqJywgdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nKTtcblxuICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nICE9PSBmYWxzZSkge1xuICAgIGRlYnVnKCdwYXVzZScpO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuICAgIHRoaXMuZW1pdCgncGF1c2UnKTtcbiAgfVxuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUucGF1c2VkID0gdHJ1ZTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBmbG93KHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIGRlYnVnKCdmbG93Jywgc3RhdGUuZmxvd2luZyk7XG5cbiAgd2hpbGUgKHN0YXRlLmZsb3dpbmcgJiYgc3RyZWFtLnJlYWQoKSAhPT0gbnVsbCkge1xuICAgIDtcbiAgfVxufSAvLyB3cmFwIGFuIG9sZC1zdHlsZSBzdHJlYW0gYXMgdGhlIGFzeW5jIGRhdGEgc291cmNlLlxuLy8gVGhpcyBpcyAqbm90KiBwYXJ0IG9mIHRoZSByZWFkYWJsZSBzdHJlYW0gaW50ZXJmYWNlLlxuLy8gSXQgaXMgYW4gdWdseSB1bmZvcnR1bmF0ZSBtZXNzIG9mIGhpc3RvcnkuXG5cblxuUmVhZGFibGUucHJvdG90eXBlLndyYXAgPSBmdW5jdGlvbiAoc3RyZWFtKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHBhdXNlZCA9IGZhbHNlO1xuICBzdHJlYW0ub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBkZWJ1Zygnd3JhcHBlZCBlbmQnKTtcblxuICAgIGlmIChzdGF0ZS5kZWNvZGVyICYmICFzdGF0ZS5lbmRlZCkge1xuICAgICAgdmFyIGNodW5rID0gc3RhdGUuZGVjb2Rlci5lbmQoKTtcbiAgICAgIGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpIF90aGlzLnB1c2goY2h1bmspO1xuICAgIH1cblxuICAgIF90aGlzLnB1c2gobnVsbCk7XG4gIH0pO1xuICBzdHJlYW0ub24oJ2RhdGEnLCBmdW5jdGlvbiAoY2h1bmspIHtcbiAgICBkZWJ1Zygnd3JhcHBlZCBkYXRhJyk7XG4gICAgaWYgKHN0YXRlLmRlY29kZXIpIGNodW5rID0gc3RhdGUuZGVjb2Rlci53cml0ZShjaHVuayk7IC8vIGRvbid0IHNraXAgb3ZlciBmYWxzeSB2YWx1ZXMgaW4gb2JqZWN0TW9kZVxuXG4gICAgaWYgKHN0YXRlLm9iamVjdE1vZGUgJiYgKGNodW5rID09PSBudWxsIHx8IGNodW5rID09PSB1bmRlZmluZWQpKSByZXR1cm47ZWxzZSBpZiAoIXN0YXRlLm9iamVjdE1vZGUgJiYgKCFjaHVuayB8fCAhY2h1bmsubGVuZ3RoKSkgcmV0dXJuO1xuXG4gICAgdmFyIHJldCA9IF90aGlzLnB1c2goY2h1bmspO1xuXG4gICAgaWYgKCFyZXQpIHtcbiAgICAgIHBhdXNlZCA9IHRydWU7XG4gICAgICBzdHJlYW0ucGF1c2UoKTtcbiAgICB9XG4gIH0pOyAvLyBwcm94eSBhbGwgdGhlIG90aGVyIG1ldGhvZHMuXG4gIC8vIGltcG9ydGFudCB3aGVuIHdyYXBwaW5nIGZpbHRlcnMgYW5kIGR1cGxleGVzLlxuXG4gIGZvciAodmFyIGkgaW4gc3RyZWFtKSB7XG4gICAgaWYgKHRoaXNbaV0gPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygc3RyZWFtW2ldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzW2ldID0gZnVuY3Rpb24gbWV0aG9kV3JhcChtZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG1ldGhvZFdyYXBSZXR1cm5GdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gc3RyZWFtW21ldGhvZF0uYXBwbHkoc3RyZWFtLCBhcmd1bWVudHMpO1xuICAgICAgICB9O1xuICAgICAgfShpKTtcbiAgICB9XG4gIH0gLy8gcHJveHkgY2VydGFpbiBpbXBvcnRhbnQgZXZlbnRzLlxuXG5cbiAgZm9yICh2YXIgbiA9IDA7IG4gPCBrUHJveHlFdmVudHMubGVuZ3RoOyBuKyspIHtcbiAgICBzdHJlYW0ub24oa1Byb3h5RXZlbnRzW25dLCB0aGlzLmVtaXQuYmluZCh0aGlzLCBrUHJveHlFdmVudHNbbl0pKTtcbiAgfSAvLyB3aGVuIHdlIHRyeSB0byBjb25zdW1lIHNvbWUgbW9yZSBieXRlcywgc2ltcGx5IHVucGF1c2UgdGhlXG4gIC8vIHVuZGVybHlpbmcgc3RyZWFtLlxuXG5cbiAgdGhpcy5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgX3JlYWQnLCBuKTtcblxuICAgIGlmIChwYXVzZWQpIHtcbiAgICAgIHBhdXNlZCA9IGZhbHNlO1xuICAgICAgc3RyZWFtLnJlc3VtZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbmlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nKSB7XG4gIFJlYWRhYmxlLnByb3RvdHlwZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNyZWF0ZVJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjcmVhdGVSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3IgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvYXN5bmNfaXRlcmF0b3InKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3JlYXRlUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yKHRoaXMpO1xuICB9O1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGUucHJvdG90eXBlLCAncmVhZGFibGVIaWdoV2F0ZXJNYXJrJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZS5wcm90b3R5cGUsICdyZWFkYWJsZUJ1ZmZlcicsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUgJiYgdGhpcy5fcmVhZGFibGVTdGF0ZS5idWZmZXI7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlLnByb3RvdHlwZSwgJ3JlYWRhYmxlRmxvd2luZycsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZztcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiBzZXQoc3RhdGUpIHtcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nID0gc3RhdGU7XG4gICAgfVxuICB9XG59KTsgLy8gZXhwb3NlZCBmb3IgdGVzdGluZyBwdXJwb3NlcyBvbmx5LlxuXG5SZWFkYWJsZS5fZnJvbUxpc3QgPSBmcm9tTGlzdDtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZS5wcm90b3R5cGUsICdyZWFkYWJsZUxlbmd0aCcsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUubGVuZ3RoO1xuICB9XG59KTsgLy8gUGx1Y2sgb2ZmIG4gYnl0ZXMgZnJvbSBhbiBhcnJheSBvZiBidWZmZXJzLlxuLy8gTGVuZ3RoIGlzIHRoZSBjb21iaW5lZCBsZW5ndGhzIG9mIGFsbCB0aGUgYnVmZmVycyBpbiB0aGUgbGlzdC5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuXG5mdW5jdGlvbiBmcm9tTGlzdChuLCBzdGF0ZSkge1xuICAvLyBub3RoaW5nIGJ1ZmZlcmVkXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHJldHVybiBudWxsO1xuICB2YXIgcmV0O1xuICBpZiAoc3RhdGUub2JqZWN0TW9kZSkgcmV0ID0gc3RhdGUuYnVmZmVyLnNoaWZ0KCk7ZWxzZSBpZiAoIW4gfHwgbiA+PSBzdGF0ZS5sZW5ndGgpIHtcbiAgICAvLyByZWFkIGl0IGFsbCwgdHJ1bmNhdGUgdGhlIGxpc3RcbiAgICBpZiAoc3RhdGUuZGVjb2RlcikgcmV0ID0gc3RhdGUuYnVmZmVyLmpvaW4oJycpO2Vsc2UgaWYgKHN0YXRlLmJ1ZmZlci5sZW5ndGggPT09IDEpIHJldCA9IHN0YXRlLmJ1ZmZlci5maXJzdCgpO2Vsc2UgcmV0ID0gc3RhdGUuYnVmZmVyLmNvbmNhdChzdGF0ZS5sZW5ndGgpO1xuICAgIHN0YXRlLmJ1ZmZlci5jbGVhcigpO1xuICB9IGVsc2Uge1xuICAgIC8vIHJlYWQgcGFydCBvZiBsaXN0XG4gICAgcmV0ID0gc3RhdGUuYnVmZmVyLmNvbnN1bWUobiwgc3RhdGUuZGVjb2Rlcik7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gZW5kUmVhZGFibGUoc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgZGVidWcoJ2VuZFJlYWRhYmxlJywgc3RhdGUuZW5kRW1pdHRlZCk7XG5cbiAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkKSB7XG4gICAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuICAgIHByb2Nlc3MubmV4dFRpY2soZW5kUmVhZGFibGVOVCwgc3RhdGUsIHN0cmVhbSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW5kUmVhZGFibGVOVChzdGF0ZSwgc3RyZWFtKSB7XG4gIGRlYnVnKCdlbmRSZWFkYWJsZU5UJywgc3RhdGUuZW5kRW1pdHRlZCwgc3RhdGUubGVuZ3RoKTsgLy8gQ2hlY2sgdGhhdCB3ZSBkaWRuJ3QgZ2V0IG9uZSBsYXN0IHVuc2hpZnQuXG5cbiAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkICYmIHN0YXRlLmxlbmd0aCA9PT0gMCkge1xuICAgIHN0YXRlLmVuZEVtaXR0ZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5yZWFkYWJsZSA9IGZhbHNlO1xuICAgIHN0cmVhbS5lbWl0KCdlbmQnKTtcblxuICAgIGlmIChzdGF0ZS5hdXRvRGVzdHJveSkge1xuICAgICAgLy8gSW4gY2FzZSBvZiBkdXBsZXggc3RyZWFtcyB3ZSBuZWVkIGEgd2F5IHRvIGRldGVjdFxuICAgICAgLy8gaWYgdGhlIHdyaXRhYmxlIHNpZGUgaXMgcmVhZHkgZm9yIGF1dG9EZXN0cm95IGFzIHdlbGxcbiAgICAgIHZhciB3U3RhdGUgPSBzdHJlYW0uX3dyaXRhYmxlU3RhdGU7XG5cbiAgICAgIGlmICghd1N0YXRlIHx8IHdTdGF0ZS5hdXRvRGVzdHJveSAmJiB3U3RhdGUuZmluaXNoZWQpIHtcbiAgICAgICAgc3RyZWFtLmRlc3Ryb3koKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcbiAgUmVhZGFibGUuZnJvbSA9IGZ1bmN0aW9uIChpdGVyYWJsZSwgb3B0cykge1xuICAgIGlmIChmcm9tID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGZyb20gPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvZnJvbScpO1xuICAgIH1cblxuICAgIHJldHVybiBmcm9tKFJlYWRhYmxlLCBpdGVyYWJsZSwgb3B0cyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGluZGV4T2YoeHMsIHgpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB4cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoeHNbaV0gPT09IHgpIHJldHVybiBpO1xuICB9XG5cbiAgcmV0dXJuIC0xO1xufSIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuLy8gYSB0cmFuc2Zvcm0gc3RyZWFtIGlzIGEgcmVhZGFibGUvd3JpdGFibGUgc3RyZWFtIHdoZXJlIHlvdSBkb1xuLy8gc29tZXRoaW5nIHdpdGggdGhlIGRhdGEuICBTb21ldGltZXMgaXQncyBjYWxsZWQgYSBcImZpbHRlclwiLFxuLy8gYnV0IHRoYXQncyBub3QgYSBncmVhdCBuYW1lIGZvciBpdCwgc2luY2UgdGhhdCBpbXBsaWVzIGEgdGhpbmcgd2hlcmVcbi8vIHNvbWUgYml0cyBwYXNzIHRocm91Z2gsIGFuZCBvdGhlcnMgYXJlIHNpbXBseSBpZ25vcmVkLiAgKFRoYXQgd291bGRcbi8vIGJlIGEgdmFsaWQgZXhhbXBsZSBvZiBhIHRyYW5zZm9ybSwgb2YgY291cnNlLilcbi8vXG4vLyBXaGlsZSB0aGUgb3V0cHV0IGlzIGNhdXNhbGx5IHJlbGF0ZWQgdG8gdGhlIGlucHV0LCBpdCdzIG5vdCBhXG4vLyBuZWNlc3NhcmlseSBzeW1tZXRyaWMgb3Igc3luY2hyb25vdXMgdHJhbnNmb3JtYXRpb24uICBGb3IgZXhhbXBsZSxcbi8vIGEgemxpYiBzdHJlYW0gbWlnaHQgdGFrZSBtdWx0aXBsZSBwbGFpbi10ZXh0IHdyaXRlcygpLCBhbmQgdGhlblxuLy8gZW1pdCBhIHNpbmdsZSBjb21wcmVzc2VkIGNodW5rIHNvbWUgdGltZSBpbiB0aGUgZnV0dXJlLlxuLy9cbi8vIEhlcmUncyBob3cgdGhpcyB3b3Jrczpcbi8vXG4vLyBUaGUgVHJhbnNmb3JtIHN0cmVhbSBoYXMgYWxsIHRoZSBhc3BlY3RzIG9mIHRoZSByZWFkYWJsZSBhbmQgd3JpdGFibGVcbi8vIHN0cmVhbSBjbGFzc2VzLiAgV2hlbiB5b3Ugd3JpdGUoY2h1bmspLCB0aGF0IGNhbGxzIF93cml0ZShjaHVuayxjYilcbi8vIGludGVybmFsbHksIGFuZCByZXR1cm5zIGZhbHNlIGlmIHRoZXJlJ3MgYSBsb3Qgb2YgcGVuZGluZyB3cml0ZXNcbi8vIGJ1ZmZlcmVkIHVwLiAgV2hlbiB5b3UgY2FsbCByZWFkKCksIHRoYXQgY2FsbHMgX3JlYWQobikgdW50aWxcbi8vIHRoZXJlJ3MgZW5vdWdoIHBlbmRpbmcgcmVhZGFibGUgZGF0YSBidWZmZXJlZCB1cC5cbi8vXG4vLyBJbiBhIHRyYW5zZm9ybSBzdHJlYW0sIHRoZSB3cml0dGVuIGRhdGEgaXMgcGxhY2VkIGluIGEgYnVmZmVyLiAgV2hlblxuLy8gX3JlYWQobikgaXMgY2FsbGVkLCBpdCB0cmFuc2Zvcm1zIHRoZSBxdWV1ZWQgdXAgZGF0YSwgY2FsbGluZyB0aGVcbi8vIGJ1ZmZlcmVkIF93cml0ZSBjYidzIGFzIGl0IGNvbnN1bWVzIGNodW5rcy4gIElmIGNvbnN1bWluZyBhIHNpbmdsZVxuLy8gd3JpdHRlbiBjaHVuayB3b3VsZCByZXN1bHQgaW4gbXVsdGlwbGUgb3V0cHV0IGNodW5rcywgdGhlbiB0aGUgZmlyc3Rcbi8vIG91dHB1dHRlZCBiaXQgY2FsbHMgdGhlIHJlYWRjYiwgYW5kIHN1YnNlcXVlbnQgY2h1bmtzIGp1c3QgZ28gaW50b1xuLy8gdGhlIHJlYWQgYnVmZmVyLCBhbmQgd2lsbCBjYXVzZSBpdCB0byBlbWl0ICdyZWFkYWJsZScgaWYgbmVjZXNzYXJ5LlxuLy9cbi8vIFRoaXMgd2F5LCBiYWNrLXByZXNzdXJlIGlzIGFjdHVhbGx5IGRldGVybWluZWQgYnkgdGhlIHJlYWRpbmcgc2lkZSxcbi8vIHNpbmNlIF9yZWFkIGhhcyB0byBiZSBjYWxsZWQgdG8gc3RhcnQgcHJvY2Vzc2luZyBhIG5ldyBjaHVuay4gIEhvd2V2ZXIsXG4vLyBhIHBhdGhvbG9naWNhbCBpbmZsYXRlIHR5cGUgb2YgdHJhbnNmb3JtIGNhbiBjYXVzZSBleGNlc3NpdmUgYnVmZmVyaW5nXG4vLyBoZXJlLiAgRm9yIGV4YW1wbGUsIGltYWdpbmUgYSBzdHJlYW0gd2hlcmUgZXZlcnkgYnl0ZSBvZiBpbnB1dCBpc1xuLy8gaW50ZXJwcmV0ZWQgYXMgYW4gaW50ZWdlciBmcm9tIDAtMjU1LCBhbmQgdGhlbiByZXN1bHRzIGluIHRoYXQgbWFueVxuLy8gYnl0ZXMgb2Ygb3V0cHV0LiAgV3JpdGluZyB0aGUgNCBieXRlcyB7ZmYsZmYsZmYsZmZ9IHdvdWxkIHJlc3VsdCBpblxuLy8gMWtiIG9mIGRhdGEgYmVpbmcgb3V0cHV0LiAgSW4gdGhpcyBjYXNlLCB5b3UgY291bGQgd3JpdGUgYSB2ZXJ5IHNtYWxsXG4vLyBhbW91bnQgb2YgaW5wdXQsIGFuZCBlbmQgdXAgd2l0aCBhIHZlcnkgbGFyZ2UgYW1vdW50IG9mIG91dHB1dC4gIEluXG4vLyBzdWNoIGEgcGF0aG9sb2dpY2FsIGluZmxhdGluZyBtZWNoYW5pc20sIHRoZXJlJ2QgYmUgbm8gd2F5IHRvIHRlbGxcbi8vIHRoZSBzeXN0ZW0gdG8gc3RvcCBkb2luZyB0aGUgdHJhbnNmb3JtLiAgQSBzaW5nbGUgNE1CIHdyaXRlIGNvdWxkXG4vLyBjYXVzZSB0aGUgc3lzdGVtIHRvIHJ1biBvdXQgb2YgbWVtb3J5LlxuLy9cbi8vIEhvd2V2ZXIsIGV2ZW4gaW4gc3VjaCBhIHBhdGhvbG9naWNhbCBjYXNlLCBvbmx5IGEgc2luZ2xlIHdyaXR0ZW4gY2h1bmtcbi8vIHdvdWxkIGJlIGNvbnN1bWVkLCBhbmQgdGhlbiB0aGUgcmVzdCB3b3VsZCB3YWl0ICh1bi10cmFuc2Zvcm1lZCkgdW50aWxcbi8vIHRoZSByZXN1bHRzIG9mIHRoZSBwcmV2aW91cyB0cmFuc2Zvcm1lZCBjaHVuayB3ZXJlIGNvbnN1bWVkLlxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRyYW5zZm9ybTtcblxudmFyIF9yZXF1aXJlJGNvZGVzID0gcmVxdWlyZSgnLi4vZXJyb3JzJykuY29kZXMsXG4gICAgRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfTUVUSE9EX05PVF9JTVBMRU1FTlRFRCxcbiAgICBFUlJfTVVMVElQTEVfQ0FMTEJBQ0sgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfTVVMVElQTEVfQ0FMTEJBQ0ssXG4gICAgRVJSX1RSQU5TRk9STV9BTFJFQURZX1RSQU5TRk9STUlORyA9IF9yZXF1aXJlJGNvZGVzLkVSUl9UUkFOU0ZPUk1fQUxSRUFEWV9UUkFOU0ZPUk1JTkcsXG4gICAgRVJSX1RSQU5TRk9STV9XSVRIX0xFTkdUSF8wID0gX3JlcXVpcmUkY29kZXMuRVJSX1RSQU5TRk9STV9XSVRIX0xFTkdUSF8wO1xuXG52YXIgRHVwbGV4ID0gcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG5yZXF1aXJlKCdpbmhlcml0cycpKFRyYW5zZm9ybSwgRHVwbGV4KTtcblxuZnVuY3Rpb24gYWZ0ZXJUcmFuc2Zvcm0oZXIsIGRhdGEpIHtcbiAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGU7XG4gIHRzLnRyYW5zZm9ybWluZyA9IGZhbHNlO1xuICB2YXIgY2IgPSB0cy53cml0ZWNiO1xuXG4gIGlmIChjYiA9PT0gbnVsbCkge1xuICAgIHJldHVybiB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVSUl9NVUxUSVBMRV9DQUxMQkFDSygpKTtcbiAgfVxuXG4gIHRzLndyaXRlY2h1bmsgPSBudWxsO1xuICB0cy53cml0ZWNiID0gbnVsbDtcbiAgaWYgKGRhdGEgIT0gbnVsbCkgLy8gc2luZ2xlIGVxdWFscyBjaGVjayBmb3IgYm90aCBgbnVsbGAgYW5kIGB1bmRlZmluZWRgXG4gICAgdGhpcy5wdXNoKGRhdGEpO1xuICBjYihlcik7XG4gIHZhciBycyA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHJzLnJlYWRpbmcgPSBmYWxzZTtcblxuICBpZiAocnMubmVlZFJlYWRhYmxlIHx8IHJzLmxlbmd0aCA8IHJzLmhpZ2hXYXRlck1hcmspIHtcbiAgICB0aGlzLl9yZWFkKHJzLmhpZ2hXYXRlck1hcmspO1xuICB9XG59XG5cbmZ1bmN0aW9uIFRyYW5zZm9ybShvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBUcmFuc2Zvcm0pKSByZXR1cm4gbmV3IFRyYW5zZm9ybShvcHRpb25zKTtcbiAgRHVwbGV4LmNhbGwodGhpcywgb3B0aW9ucyk7XG4gIHRoaXMuX3RyYW5zZm9ybVN0YXRlID0ge1xuICAgIGFmdGVyVHJhbnNmb3JtOiBhZnRlclRyYW5zZm9ybS5iaW5kKHRoaXMpLFxuICAgIG5lZWRUcmFuc2Zvcm06IGZhbHNlLFxuICAgIHRyYW5zZm9ybWluZzogZmFsc2UsXG4gICAgd3JpdGVjYjogbnVsbCxcbiAgICB3cml0ZWNodW5rOiBudWxsLFxuICAgIHdyaXRlZW5jb2Rpbmc6IG51bGxcbiAgfTsgLy8gc3RhcnQgb3V0IGFza2luZyBmb3IgYSByZWFkYWJsZSBldmVudCBvbmNlIGRhdGEgaXMgdHJhbnNmb3JtZWQuXG5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlOyAvLyB3ZSBoYXZlIGltcGxlbWVudGVkIHRoZSBfcmVhZCBtZXRob2QsIGFuZCBkb25lIHRoZSBvdGhlciB0aGluZ3NcbiAgLy8gdGhhdCBSZWFkYWJsZSB3YW50cyBiZWZvcmUgdGhlIGZpcnN0IF9yZWFkIGNhbGwsIHNvIHVuc2V0IHRoZVxuICAvLyBzeW5jIGd1YXJkIGZsYWcuXG5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5zeW5jID0gZmFsc2U7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMudHJhbnNmb3JtID09PSAnZnVuY3Rpb24nKSB0aGlzLl90cmFuc2Zvcm0gPSBvcHRpb25zLnRyYW5zZm9ybTtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZmx1c2ggPT09ICdmdW5jdGlvbicpIHRoaXMuX2ZsdXNoID0gb3B0aW9ucy5mbHVzaDtcbiAgfSAvLyBXaGVuIHRoZSB3cml0YWJsZSBzaWRlIGZpbmlzaGVzLCB0aGVuIGZsdXNoIG91dCBhbnl0aGluZyByZW1haW5pbmcuXG5cblxuICB0aGlzLm9uKCdwcmVmaW5pc2gnLCBwcmVmaW5pc2gpO1xufVxuXG5mdW5jdGlvbiBwcmVmaW5pc2goKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgaWYgKHR5cGVvZiB0aGlzLl9mbHVzaCA9PT0gJ2Z1bmN0aW9uJyAmJiAhdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQpIHtcbiAgICB0aGlzLl9mbHVzaChmdW5jdGlvbiAoZXIsIGRhdGEpIHtcbiAgICAgIGRvbmUoX3RoaXMsIGVyLCBkYXRhKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBkb25lKHRoaXMsIG51bGwsIG51bGwpO1xuICB9XG59XG5cblRyYW5zZm9ybS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcpIHtcbiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUubmVlZFRyYW5zZm9ybSA9IGZhbHNlO1xuICByZXR1cm4gRHVwbGV4LnByb3RvdHlwZS5wdXNoLmNhbGwodGhpcywgY2h1bmssIGVuY29kaW5nKTtcbn07IC8vIFRoaXMgaXMgdGhlIHBhcnQgd2hlcmUgeW91IGRvIHN0dWZmIVxuLy8gb3ZlcnJpZGUgdGhpcyBmdW5jdGlvbiBpbiBpbXBsZW1lbnRhdGlvbiBjbGFzc2VzLlxuLy8gJ2NodW5rJyBpcyBhbiBpbnB1dCBjaHVuay5cbi8vXG4vLyBDYWxsIGBwdXNoKG5ld0NodW5rKWAgdG8gcGFzcyBhbG9uZyB0cmFuc2Zvcm1lZCBvdXRwdXRcbi8vIHRvIHRoZSByZWFkYWJsZSBzaWRlLiAgWW91IG1heSBjYWxsICdwdXNoJyB6ZXJvIG9yIG1vcmUgdGltZXMuXG4vL1xuLy8gQ2FsbCBgY2IoZXJyKWAgd2hlbiB5b3UgYXJlIGRvbmUgd2l0aCB0aGlzIGNodW5rLiAgSWYgeW91IHBhc3Ncbi8vIGFuIGVycm9yLCB0aGVuIHRoYXQnbGwgcHV0IHRoZSBodXJ0IG9uIHRoZSB3aG9sZSBvcGVyYXRpb24uICBJZiB5b3Vcbi8vIG5ldmVyIGNhbGwgY2IoKSwgdGhlbiB5b3UnbGwgbmV2ZXIgZ2V0IGFub3RoZXIgY2h1bmsuXG5cblxuVHJhbnNmb3JtLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgY2IobmV3IEVSUl9NRVRIT0RfTk9UX0lNUExFTUVOVEVEKCdfdHJhbnNmb3JtKCknKSk7XG59O1xuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuICB0cy53cml0ZWNiID0gY2I7XG4gIHRzLndyaXRlY2h1bmsgPSBjaHVuaztcbiAgdHMud3JpdGVlbmNvZGluZyA9IGVuY29kaW5nO1xuXG4gIGlmICghdHMudHJhbnNmb3JtaW5nKSB7XG4gICAgdmFyIHJzID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgICBpZiAodHMubmVlZFRyYW5zZm9ybSB8fCBycy5uZWVkUmVhZGFibGUgfHwgcnMubGVuZ3RoIDwgcnMuaGlnaFdhdGVyTWFyaykgdGhpcy5fcmVhZChycy5oaWdoV2F0ZXJNYXJrKTtcbiAgfVxufTsgLy8gRG9lc24ndCBtYXR0ZXIgd2hhdCB0aGUgYXJncyBhcmUgaGVyZS5cbi8vIF90cmFuc2Zvcm0gZG9lcyBhbGwgdGhlIHdvcmsuXG4vLyBUaGF0IHdlIGdvdCBoZXJlIG1lYW5zIHRoYXQgdGhlIHJlYWRhYmxlIHNpZGUgd2FudHMgbW9yZSBkYXRhLlxuXG5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcblxuICBpZiAodHMud3JpdGVjaHVuayAhPT0gbnVsbCAmJiAhdHMudHJhbnNmb3JtaW5nKSB7XG4gICAgdHMudHJhbnNmb3JtaW5nID0gdHJ1ZTtcblxuICAgIHRoaXMuX3RyYW5zZm9ybSh0cy53cml0ZWNodW5rLCB0cy53cml0ZWVuY29kaW5nLCB0cy5hZnRlclRyYW5zZm9ybSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gbWFyayB0aGF0IHdlIG5lZWQgYSB0cmFuc2Zvcm0sIHNvIHRoYXQgYW55IGRhdGEgdGhhdCBjb21lcyBpblxuICAgIC8vIHdpbGwgZ2V0IHByb2Nlc3NlZCwgbm93IHRoYXQgd2UndmUgYXNrZWQgZm9yIGl0LlxuICAgIHRzLm5lZWRUcmFuc2Zvcm0gPSB0cnVlO1xuICB9XG59O1xuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgRHVwbGV4LnByb3RvdHlwZS5fZGVzdHJveS5jYWxsKHRoaXMsIGVyciwgZnVuY3Rpb24gKGVycjIpIHtcbiAgICBjYihlcnIyKTtcbiAgfSk7XG59O1xuXG5mdW5jdGlvbiBkb25lKHN0cmVhbSwgZXIsIGRhdGEpIHtcbiAgaWYgKGVyKSByZXR1cm4gc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICBpZiAoZGF0YSAhPSBudWxsKSAvLyBzaW5nbGUgZXF1YWxzIGNoZWNrIGZvciBib3RoIGBudWxsYCBhbmQgYHVuZGVmaW5lZGBcbiAgICBzdHJlYW0ucHVzaChkYXRhKTsgLy8gVE9ETyhCcmlkZ2VBUik6IFdyaXRlIGEgdGVzdCBmb3IgdGhlc2UgdHdvIGVycm9yIGNhc2VzXG4gIC8vIGlmIHRoZXJlJ3Mgbm90aGluZyBpbiB0aGUgd3JpdGUgYnVmZmVyLCB0aGVuIHRoYXQgbWVhbnNcbiAgLy8gdGhhdCBub3RoaW5nIG1vcmUgd2lsbCBldmVyIGJlIHByb3ZpZGVkXG5cbiAgaWYgKHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5sZW5ndGgpIHRocm93IG5ldyBFUlJfVFJBTlNGT1JNX1dJVEhfTEVOR1RIXzAoKTtcbiAgaWYgKHN0cmVhbS5fdHJhbnNmb3JtU3RhdGUudHJhbnNmb3JtaW5nKSB0aHJvdyBuZXcgRVJSX1RSQU5TRk9STV9BTFJFQURZX1RSQU5TRk9STUlORygpO1xuICByZXR1cm4gc3RyZWFtLnB1c2gobnVsbCk7XG59IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4vLyBBIGJpdCBzaW1wbGVyIHRoYW4gcmVhZGFibGUgc3RyZWFtcy5cbi8vIEltcGxlbWVudCBhbiBhc3luYyAuX3dyaXRlKGNodW5rLCBlbmNvZGluZywgY2IpLCBhbmQgaXQnbGwgaGFuZGxlIGFsbFxuLy8gdGhlIGRyYWluIGV2ZW50IGVtaXNzaW9uIGFuZCBidWZmZXJpbmcuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gV3JpdGFibGU7XG4vKiA8cmVwbGFjZW1lbnQ+ICovXG5cbmZ1bmN0aW9uIFdyaXRlUmVxKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdGhpcy5jaHVuayA9IGNodW5rO1xuICB0aGlzLmVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIHRoaXMuY2FsbGJhY2sgPSBjYjtcbiAgdGhpcy5uZXh0ID0gbnVsbDtcbn0gLy8gSXQgc2VlbXMgYSBsaW5rZWQgbGlzdCBidXQgaXQgaXMgbm90XG4vLyB0aGVyZSB3aWxsIGJlIG9ubHkgMiBvZiB0aGVzZSBmb3IgZWFjaCBzdHJlYW1cblxuXG5mdW5jdGlvbiBDb3JrZWRSZXF1ZXN0KHN0YXRlKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdGhpcy5uZXh0ID0gbnVsbDtcbiAgdGhpcy5lbnRyeSA9IG51bGw7XG5cbiAgdGhpcy5maW5pc2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgb25Db3JrZWRGaW5pc2goX3RoaXMsIHN0YXRlKTtcbiAgfTtcbn1cbi8qIDwvcmVwbGFjZW1lbnQ+ICovXG5cbi8qPHJlcGxhY2VtZW50PiovXG5cblxudmFyIER1cGxleDtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5Xcml0YWJsZS5Xcml0YWJsZVN0YXRlID0gV3JpdGFibGVTdGF0ZTtcbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBpbnRlcm5hbFV0aWwgPSB7XG4gIGRlcHJlY2F0ZTogcmVxdWlyZSgndXRpbC1kZXByZWNhdGUnKVxufTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgU3RyZWFtID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbScpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcblxudmFyIE91clVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheSB8fCBmdW5jdGlvbiAoKSB7fTtcblxuZnVuY3Rpb24gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuaykge1xuICByZXR1cm4gQnVmZmVyLmZyb20oY2h1bmspO1xufVxuXG5mdW5jdGlvbiBfaXNVaW50OEFycmF5KG9iaikge1xuICByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKG9iaikgfHwgb2JqIGluc3RhbmNlb2YgT3VyVWludDhBcnJheTtcbn1cblxudmFyIGRlc3Ryb3lJbXBsID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL2Rlc3Ryb3knKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL3N0YXRlJyksXG4gICAgZ2V0SGlnaFdhdGVyTWFyayA9IF9yZXF1aXJlLmdldEhpZ2hXYXRlck1hcms7XG5cbnZhciBfcmVxdWlyZSRjb2RlcyA9IHJlcXVpcmUoJy4uL2Vycm9ycycpLmNvZGVzLFxuICAgIEVSUl9JTlZBTElEX0FSR19UWVBFID0gX3JlcXVpcmUkY29kZXMuRVJSX0lOVkFMSURfQVJHX1RZUEUsXG4gICAgRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfTUVUSE9EX05PVF9JTVBMRU1FTlRFRCxcbiAgICBFUlJfTVVMVElQTEVfQ0FMTEJBQ0sgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfTVVMVElQTEVfQ0FMTEJBQ0ssXG4gICAgRVJSX1NUUkVBTV9DQU5OT1RfUElQRSA9IF9yZXF1aXJlJGNvZGVzLkVSUl9TVFJFQU1fQ0FOTk9UX1BJUEUsXG4gICAgRVJSX1NUUkVBTV9ERVNUUk9ZRUQgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfU1RSRUFNX0RFU1RST1lFRCxcbiAgICBFUlJfU1RSRUFNX05VTExfVkFMVUVTID0gX3JlcXVpcmUkY29kZXMuRVJSX1NUUkVBTV9OVUxMX1ZBTFVFUyxcbiAgICBFUlJfU1RSRUFNX1dSSVRFX0FGVEVSX0VORCA9IF9yZXF1aXJlJGNvZGVzLkVSUl9TVFJFQU1fV1JJVEVfQUZURVJfRU5ELFxuICAgIEVSUl9VTktOT1dOX0VOQ09ESU5HID0gX3JlcXVpcmUkY29kZXMuRVJSX1VOS05PV05fRU5DT0RJTkc7XG5cbnZhciBlcnJvck9yRGVzdHJveSA9IGRlc3Ryb3lJbXBsLmVycm9yT3JEZXN0cm95O1xuXG5yZXF1aXJlKCdpbmhlcml0cycpKFdyaXRhYmxlLCBTdHJlYW0pO1xuXG5mdW5jdGlvbiBub3AoKSB7fVxuXG5mdW5jdGlvbiBXcml0YWJsZVN0YXRlKG9wdGlvbnMsIHN0cmVhbSwgaXNEdXBsZXgpIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIER1cGxleCBzdHJlYW1zIGFyZSBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZSwgYnV0IHNoYXJlXG4gIC8vIHRoZSBzYW1lIG9wdGlvbnMgb2JqZWN0LlxuICAvLyBIb3dldmVyLCBzb21lIGNhc2VzIHJlcXVpcmUgc2V0dGluZyBvcHRpb25zIHRvIGRpZmZlcmVudFxuICAvLyB2YWx1ZXMgZm9yIHRoZSByZWFkYWJsZSBhbmQgdGhlIHdyaXRhYmxlIHNpZGVzIG9mIHRoZSBkdXBsZXggc3RyZWFtLFxuICAvLyBlLmcuIG9wdGlvbnMucmVhZGFibGVPYmplY3RNb2RlIHZzLiBvcHRpb25zLndyaXRhYmxlT2JqZWN0TW9kZSwgZXRjLlxuXG4gIGlmICh0eXBlb2YgaXNEdXBsZXggIT09ICdib29sZWFuJykgaXNEdXBsZXggPSBzdHJlYW0gaW5zdGFuY2VvZiBEdXBsZXg7IC8vIG9iamVjdCBzdHJlYW0gZmxhZyB0byBpbmRpY2F0ZSB3aGV0aGVyIG9yIG5vdCB0aGlzIHN0cmVhbVxuICAvLyBjb250YWlucyBidWZmZXJzIG9yIG9iamVjdHMuXG5cbiAgdGhpcy5vYmplY3RNb2RlID0gISFvcHRpb25zLm9iamVjdE1vZGU7XG4gIGlmIChpc0R1cGxleCkgdGhpcy5vYmplY3RNb2RlID0gdGhpcy5vYmplY3RNb2RlIHx8ICEhb3B0aW9ucy53cml0YWJsZU9iamVjdE1vZGU7IC8vIHRoZSBwb2ludCBhdCB3aGljaCB3cml0ZSgpIHN0YXJ0cyByZXR1cm5pbmcgZmFsc2VcbiAgLy8gTm90ZTogMCBpcyBhIHZhbGlkIHZhbHVlLCBtZWFucyB0aGF0IHdlIGFsd2F5cyByZXR1cm4gZmFsc2UgaWZcbiAgLy8gdGhlIGVudGlyZSBidWZmZXIgaXMgbm90IGZsdXNoZWQgaW1tZWRpYXRlbHkgb24gd3JpdGUoKVxuXG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IGdldEhpZ2hXYXRlck1hcmsodGhpcywgb3B0aW9ucywgJ3dyaXRhYmxlSGlnaFdhdGVyTWFyaycsIGlzRHVwbGV4KTsgLy8gaWYgX2ZpbmFsIGhhcyBiZWVuIGNhbGxlZFxuXG4gIHRoaXMuZmluYWxDYWxsZWQgPSBmYWxzZTsgLy8gZHJhaW4gZXZlbnQgZmxhZy5cblxuICB0aGlzLm5lZWREcmFpbiA9IGZhbHNlOyAvLyBhdCB0aGUgc3RhcnQgb2YgY2FsbGluZyBlbmQoKVxuXG4gIHRoaXMuZW5kaW5nID0gZmFsc2U7IC8vIHdoZW4gZW5kKCkgaGFzIGJlZW4gY2FsbGVkLCBhbmQgcmV0dXJuZWRcblxuICB0aGlzLmVuZGVkID0gZmFsc2U7IC8vIHdoZW4gJ2ZpbmlzaCcgaXMgZW1pdHRlZFxuXG4gIHRoaXMuZmluaXNoZWQgPSBmYWxzZTsgLy8gaGFzIGl0IGJlZW4gZGVzdHJveWVkXG5cbiAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTsgLy8gc2hvdWxkIHdlIGRlY29kZSBzdHJpbmdzIGludG8gYnVmZmVycyBiZWZvcmUgcGFzc2luZyB0byBfd3JpdGU/XG4gIC8vIHRoaXMgaXMgaGVyZSBzbyB0aGF0IHNvbWUgbm9kZS1jb3JlIHN0cmVhbXMgY2FuIG9wdGltaXplIHN0cmluZ1xuICAvLyBoYW5kbGluZyBhdCBhIGxvd2VyIGxldmVsLlxuXG4gIHZhciBub0RlY29kZSA9IG9wdGlvbnMuZGVjb2RlU3RyaW5ncyA9PT0gZmFsc2U7XG4gIHRoaXMuZGVjb2RlU3RyaW5ncyA9ICFub0RlY29kZTsgLy8gQ3J5cHRvIGlzIGtpbmQgb2Ygb2xkIGFuZCBjcnVzdHkuICBIaXN0b3JpY2FsbHksIGl0cyBkZWZhdWx0IHN0cmluZ1xuICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuXG4gIC8vIEV2ZXJ5dGhpbmcgZWxzZSBpbiB0aGUgdW5pdmVyc2UgdXNlcyAndXRmOCcsIHRob3VnaC5cblxuICB0aGlzLmRlZmF1bHRFbmNvZGluZyA9IG9wdGlvbnMuZGVmYXVsdEVuY29kaW5nIHx8ICd1dGY4JzsgLy8gbm90IGFuIGFjdHVhbCBidWZmZXIgd2Uga2VlcCB0cmFjayBvZiwgYnV0IGEgbWVhc3VyZW1lbnRcbiAgLy8gb2YgaG93IG11Y2ggd2UncmUgd2FpdGluZyB0byBnZXQgcHVzaGVkIHRvIHNvbWUgdW5kZXJseWluZ1xuICAvLyBzb2NrZXQgb3IgZmlsZS5cblxuICB0aGlzLmxlbmd0aCA9IDA7IC8vIGEgZmxhZyB0byBzZWUgd2hlbiB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIGEgd3JpdGUuXG5cbiAgdGhpcy53cml0aW5nID0gZmFsc2U7IC8vIHdoZW4gdHJ1ZSBhbGwgd3JpdGVzIHdpbGwgYmUgYnVmZmVyZWQgdW50aWwgLnVuY29yaygpIGNhbGxcblxuICB0aGlzLmNvcmtlZCA9IDA7IC8vIGEgZmxhZyB0byBiZSBhYmxlIHRvIHRlbGwgaWYgdGhlIG9ud3JpdGUgY2IgaXMgY2FsbGVkIGltbWVkaWF0ZWx5LFxuICAvLyBvciBvbiBhIGxhdGVyIHRpY2suICBXZSBzZXQgdGhpcyB0byB0cnVlIGF0IGZpcnN0LCBiZWNhdXNlIGFueVxuICAvLyBhY3Rpb25zIHRoYXQgc2hvdWxkbid0IGhhcHBlbiB1bnRpbCBcImxhdGVyXCIgc2hvdWxkIGdlbmVyYWxseSBhbHNvXG4gIC8vIG5vdCBoYXBwZW4gYmVmb3JlIHRoZSBmaXJzdCB3cml0ZSBjYWxsLlxuXG4gIHRoaXMuc3luYyA9IHRydWU7IC8vIGEgZmxhZyB0byBrbm93IGlmIHdlJ3JlIHByb2Nlc3NpbmcgcHJldmlvdXNseSBidWZmZXJlZCBpdGVtcywgd2hpY2hcbiAgLy8gbWF5IGNhbGwgdGhlIF93cml0ZSgpIGNhbGxiYWNrIGluIHRoZSBzYW1lIHRpY2ssIHNvIHRoYXQgd2UgZG9uJ3RcbiAgLy8gZW5kIHVwIGluIGFuIG92ZXJsYXBwZWQgb253cml0ZSBzaXR1YXRpb24uXG5cbiAgdGhpcy5idWZmZXJQcm9jZXNzaW5nID0gZmFsc2U7IC8vIHRoZSBjYWxsYmFjayB0aGF0J3MgcGFzc2VkIHRvIF93cml0ZShjaHVuayxjYilcblxuICB0aGlzLm9ud3JpdGUgPSBmdW5jdGlvbiAoZXIpIHtcbiAgICBvbndyaXRlKHN0cmVhbSwgZXIpO1xuICB9OyAvLyB0aGUgY2FsbGJhY2sgdGhhdCB0aGUgdXNlciBzdXBwbGllcyB0byB3cml0ZShjaHVuayxlbmNvZGluZyxjYilcblxuXG4gIHRoaXMud3JpdGVjYiA9IG51bGw7IC8vIHRoZSBhbW91bnQgdGhhdCBpcyBiZWluZyB3cml0dGVuIHdoZW4gX3dyaXRlIGlzIGNhbGxlZC5cblxuICB0aGlzLndyaXRlbGVuID0gMDtcbiAgdGhpcy5idWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuICB0aGlzLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsOyAvLyBudW1iZXIgb2YgcGVuZGluZyB1c2VyLXN1cHBsaWVkIHdyaXRlIGNhbGxiYWNrc1xuICAvLyB0aGlzIG11c3QgYmUgMCBiZWZvcmUgJ2ZpbmlzaCcgY2FuIGJlIGVtaXR0ZWRcblxuICB0aGlzLnBlbmRpbmdjYiA9IDA7IC8vIGVtaXQgcHJlZmluaXNoIGlmIHRoZSBvbmx5IHRoaW5nIHdlJ3JlIHdhaXRpbmcgZm9yIGlzIF93cml0ZSBjYnNcbiAgLy8gVGhpcyBpcyByZWxldmFudCBmb3Igc3luY2hyb25vdXMgVHJhbnNmb3JtIHN0cmVhbXNcblxuICB0aGlzLnByZWZpbmlzaGVkID0gZmFsc2U7IC8vIFRydWUgaWYgdGhlIGVycm9yIHdhcyBhbHJlYWR5IGVtaXR0ZWQgYW5kIHNob3VsZCBub3QgYmUgdGhyb3duIGFnYWluXG5cbiAgdGhpcy5lcnJvckVtaXR0ZWQgPSBmYWxzZTsgLy8gU2hvdWxkIGNsb3NlIGJlIGVtaXR0ZWQgb24gZGVzdHJveS4gRGVmYXVsdHMgdG8gdHJ1ZS5cblxuICB0aGlzLmVtaXRDbG9zZSA9IG9wdGlvbnMuZW1pdENsb3NlICE9PSBmYWxzZTsgLy8gU2hvdWxkIC5kZXN0cm95KCkgYmUgY2FsbGVkIGFmdGVyICdmaW5pc2gnIChhbmQgcG90ZW50aWFsbHkgJ2VuZCcpXG5cbiAgdGhpcy5hdXRvRGVzdHJveSA9ICEhb3B0aW9ucy5hdXRvRGVzdHJveTsgLy8gY291bnQgYnVmZmVyZWQgcmVxdWVzdHNcblxuICB0aGlzLmJ1ZmZlcmVkUmVxdWVzdENvdW50ID0gMDsgLy8gYWxsb2NhdGUgdGhlIGZpcnN0IENvcmtlZFJlcXVlc3QsIHRoZXJlIGlzIGFsd2F5c1xuICAvLyBvbmUgYWxsb2NhdGVkIGFuZCBmcmVlIHRvIHVzZSwgYW5kIHdlIG1haW50YWluIGF0IG1vc3QgdHdvXG5cbiAgdGhpcy5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBuZXcgQ29ya2VkUmVxdWVzdCh0aGlzKTtcbn1cblxuV3JpdGFibGVTdGF0ZS5wcm90b3R5cGUuZ2V0QnVmZmVyID0gZnVuY3Rpb24gZ2V0QnVmZmVyKCkge1xuICB2YXIgY3VycmVudCA9IHRoaXMuYnVmZmVyZWRSZXF1ZXN0O1xuICB2YXIgb3V0ID0gW107XG5cbiAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICBvdXQucHVzaChjdXJyZW50KTtcbiAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0O1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn07XG5cbihmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlU3RhdGUucHJvdG90eXBlLCAnYnVmZmVyJywge1xuICAgICAgZ2V0OiBpbnRlcm5hbFV0aWwuZGVwcmVjYXRlKGZ1bmN0aW9uIHdyaXRhYmxlU3RhdGVCdWZmZXJHZXR0ZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEJ1ZmZlcigpO1xuICAgICAgfSwgJ193cml0YWJsZVN0YXRlLmJ1ZmZlciBpcyBkZXByZWNhdGVkLiBVc2UgX3dyaXRhYmxlU3RhdGUuZ2V0QnVmZmVyICcgKyAnaW5zdGVhZC4nLCAnREVQMDAwMycpXG4gICAgfSk7XG4gIH0gY2F0Y2ggKF8pIHt9XG59KSgpOyAvLyBUZXN0IF93cml0YWJsZVN0YXRlIGZvciBpbmhlcml0YW5jZSB0byBhY2NvdW50IGZvciBEdXBsZXggc3RyZWFtcyxcbi8vIHdob3NlIHByb3RvdHlwZSBjaGFpbiBvbmx5IHBvaW50cyB0byBSZWFkYWJsZS5cblxuXG52YXIgcmVhbEhhc0luc3RhbmNlO1xuXG5pZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaGFzSW5zdGFuY2UgJiYgdHlwZW9mIEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdID09PSAnZnVuY3Rpb24nKSB7XG4gIHJlYWxIYXNJbnN0YW5jZSA9IEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUsIFN5bWJvbC5oYXNJbnN0YW5jZSwge1xuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShvYmplY3QpIHtcbiAgICAgIGlmIChyZWFsSGFzSW5zdGFuY2UuY2FsbCh0aGlzLCBvYmplY3QpKSByZXR1cm4gdHJ1ZTtcbiAgICAgIGlmICh0aGlzICE9PSBXcml0YWJsZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBvYmplY3QuX3dyaXRhYmxlU3RhdGUgaW5zdGFuY2VvZiBXcml0YWJsZVN0YXRlO1xuICAgIH1cbiAgfSk7XG59IGVsc2Uge1xuICByZWFsSGFzSW5zdGFuY2UgPSBmdW5jdGlvbiByZWFsSGFzSW5zdGFuY2Uob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdCBpbnN0YW5jZW9mIHRoaXM7XG4gIH07XG59XG5cbmZ1bmN0aW9uIFdyaXRhYmxlKG9wdGlvbnMpIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTsgLy8gV3JpdGFibGUgY3RvciBpcyBhcHBsaWVkIHRvIER1cGxleGVzLCB0b28uXG4gIC8vIGByZWFsSGFzSW5zdGFuY2VgIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHVzaW5nIHBsYWluIGBpbnN0YW5jZW9mYFxuICAvLyB3b3VsZCByZXR1cm4gZmFsc2UsIGFzIG5vIGBfd3JpdGFibGVTdGF0ZWAgcHJvcGVydHkgaXMgYXR0YWNoZWQuXG4gIC8vIFRyeWluZyB0byB1c2UgdGhlIGN1c3RvbSBgaW5zdGFuY2VvZmAgZm9yIFdyaXRhYmxlIGhlcmUgd2lsbCBhbHNvIGJyZWFrIHRoZVxuICAvLyBOb2RlLmpzIExhenlUcmFuc2Zvcm0gaW1wbGVtZW50YXRpb24sIHdoaWNoIGhhcyBhIG5vbi10cml2aWFsIGdldHRlciBmb3JcbiAgLy8gYF93cml0YWJsZVN0YXRlYCB0aGF0IHdvdWxkIGxlYWQgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICAvLyBDaGVja2luZyBmb3IgYSBTdHJlYW0uRHVwbGV4IGluc3RhbmNlIGlzIGZhc3RlciBoZXJlIGluc3RlYWQgb2YgaW5zaWRlXG4gIC8vIHRoZSBXcml0YWJsZVN0YXRlIGNvbnN0cnVjdG9yLCBhdCBsZWFzdCB3aXRoIFY4IDYuNVxuXG4gIHZhciBpc0R1cGxleCA9IHRoaXMgaW5zdGFuY2VvZiBEdXBsZXg7XG4gIGlmICghaXNEdXBsZXggJiYgIXJlYWxIYXNJbnN0YW5jZS5jYWxsKFdyaXRhYmxlLCB0aGlzKSkgcmV0dXJuIG5ldyBXcml0YWJsZShvcHRpb25zKTtcbiAgdGhpcy5fd3JpdGFibGVTdGF0ZSA9IG5ldyBXcml0YWJsZVN0YXRlKG9wdGlvbnMsIHRoaXMsIGlzRHVwbGV4KTsgLy8gbGVnYWN5LlxuXG4gIHRoaXMud3JpdGFibGUgPSB0cnVlO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLndyaXRlID09PSAnZnVuY3Rpb24nKSB0aGlzLl93cml0ZSA9IG9wdGlvbnMud3JpdGU7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLndyaXRldiA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fd3JpdGV2ID0gb3B0aW9ucy53cml0ZXY7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIHRoaXMuX2Rlc3Ryb3kgPSBvcHRpb25zLmRlc3Ryb3k7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmZpbmFsID09PSAnZnVuY3Rpb24nKSB0aGlzLl9maW5hbCA9IG9wdGlvbnMuZmluYWw7XG4gIH1cblxuICBTdHJlYW0uY2FsbCh0aGlzKTtcbn0gLy8gT3RoZXJ3aXNlIHBlb3BsZSBjYW4gcGlwZSBXcml0YWJsZSBzdHJlYW1zLCB3aGljaCBpcyBqdXN0IHdyb25nLlxuXG5cbldyaXRhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKCkge1xuICBlcnJvck9yRGVzdHJveSh0aGlzLCBuZXcgRVJSX1NUUkVBTV9DQU5OT1RfUElQRSgpKTtcbn07XG5cbmZ1bmN0aW9uIHdyaXRlQWZ0ZXJFbmQoc3RyZWFtLCBjYikge1xuICB2YXIgZXIgPSBuZXcgRVJSX1NUUkVBTV9XUklURV9BRlRFUl9FTkQoKTsgLy8gVE9ETzogZGVmZXIgZXJyb3IgZXZlbnRzIGNvbnNpc3RlbnRseSBldmVyeXdoZXJlLCBub3QganVzdCB0aGUgY2JcblxuICBlcnJvck9yRGVzdHJveShzdHJlYW0sIGVyKTtcbiAgcHJvY2Vzcy5uZXh0VGljayhjYiwgZXIpO1xufSAvLyBDaGVja3MgdGhhdCBhIHVzZXItc3VwcGxpZWQgY2h1bmsgaXMgdmFsaWQsIGVzcGVjaWFsbHkgZm9yIHRoZSBwYXJ0aWN1bGFyXG4vLyBtb2RlIHRoZSBzdHJlYW0gaXMgaW4uIEN1cnJlbnRseSB0aGlzIG1lYW5zIHRoYXQgYG51bGxgIGlzIG5ldmVyIGFjY2VwdGVkXG4vLyBhbmQgdW5kZWZpbmVkL25vbi1zdHJpbmcgdmFsdWVzIGFyZSBvbmx5IGFsbG93ZWQgaW4gb2JqZWN0IG1vZGUuXG5cblxuZnVuY3Rpb24gdmFsaWRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgY2IpIHtcbiAgdmFyIGVyO1xuXG4gIGlmIChjaHVuayA9PT0gbnVsbCkge1xuICAgIGVyID0gbmV3IEVSUl9TVFJFQU1fTlVMTF9WQUxVRVMoKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmICFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgZXIgPSBuZXcgRVJSX0lOVkFMSURfQVJHX1RZUEUoJ2NodW5rJywgWydzdHJpbmcnLCAnQnVmZmVyJ10sIGNodW5rKTtcbiAgfVxuXG4gIGlmIChlcikge1xuICAgIGVycm9yT3JEZXN0cm95KHN0cmVhbSwgZXIpO1xuICAgIHByb2Nlc3MubmV4dFRpY2soY2IsIGVyKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuV3JpdGFibGUucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcbiAgdmFyIHJldCA9IGZhbHNlO1xuXG4gIHZhciBpc0J1ZiA9ICFzdGF0ZS5vYmplY3RNb2RlICYmIF9pc1VpbnQ4QXJyYXkoY2h1bmspO1xuXG4gIGlmIChpc0J1ZiAmJiAhQnVmZmVyLmlzQnVmZmVyKGNodW5rKSkge1xuICAgIGNodW5rID0gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuayk7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBlbmNvZGluZztcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH1cblxuICBpZiAoaXNCdWYpIGVuY29kaW5nID0gJ2J1ZmZlcic7ZWxzZSBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9IHN0YXRlLmRlZmF1bHRFbmNvZGluZztcbiAgaWYgKHR5cGVvZiBjYiAhPT0gJ2Z1bmN0aW9uJykgY2IgPSBub3A7XG4gIGlmIChzdGF0ZS5lbmRpbmcpIHdyaXRlQWZ0ZXJFbmQodGhpcywgY2IpO2Vsc2UgaWYgKGlzQnVmIHx8IHZhbGlkQ2h1bmsodGhpcywgc3RhdGUsIGNodW5rLCBjYikpIHtcbiAgICBzdGF0ZS5wZW5kaW5nY2IrKztcbiAgICByZXQgPSB3cml0ZU9yQnVmZmVyKHRoaXMsIHN0YXRlLCBpc0J1ZiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5jb3JrID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl93cml0YWJsZVN0YXRlLmNvcmtlZCsrO1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLnVuY29yayA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBpZiAoc3RhdGUuY29ya2VkKSB7XG4gICAgc3RhdGUuY29ya2VkLS07XG4gICAgaWYgKCFzdGF0ZS53cml0aW5nICYmICFzdGF0ZS5jb3JrZWQgJiYgIXN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0KSBjbGVhckJ1ZmZlcih0aGlzLCBzdGF0ZSk7XG4gIH1cbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5zZXREZWZhdWx0RW5jb2RpbmcgPSBmdW5jdGlvbiBzZXREZWZhdWx0RW5jb2RpbmcoZW5jb2RpbmcpIHtcbiAgLy8gbm9kZTo6UGFyc2VFbmNvZGluZygpIHJlcXVpcmVzIGxvd2VyIGNhc2UuXG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnKSBlbmNvZGluZyA9IGVuY29kaW5nLnRvTG93ZXJDYXNlKCk7XG4gIGlmICghKFsnaGV4JywgJ3V0ZjgnLCAndXRmLTgnLCAnYXNjaWknLCAnYmluYXJ5JywgJ2Jhc2U2NCcsICd1Y3MyJywgJ3Vjcy0yJywgJ3V0ZjE2bGUnLCAndXRmLTE2bGUnLCAncmF3J10uaW5kZXhPZigoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKSkgPiAtMSkpIHRocm93IG5ldyBFUlJfVU5LTk9XTl9FTkNPRElORyhlbmNvZGluZyk7XG4gIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVmYXVsdEVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIHJldHVybiB0aGlzO1xufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLnByb3RvdHlwZSwgJ3dyaXRhYmxlQnVmZmVyJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZSAmJiB0aGlzLl93cml0YWJsZVN0YXRlLmdldEJ1ZmZlcigpO1xuICB9XG59KTtcblxuZnVuY3Rpb24gZGVjb2RlQ2h1bmsoc3RhdGUsIGNodW5rLCBlbmNvZGluZykge1xuICBpZiAoIXN0YXRlLm9iamVjdE1vZGUgJiYgc3RhdGUuZGVjb2RlU3RyaW5ncyAhPT0gZmFsc2UgJiYgdHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykge1xuICAgIGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmssIGVuY29kaW5nKTtcbiAgfVxuXG4gIHJldHVybiBjaHVuaztcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLnByb3RvdHlwZSwgJ3dyaXRhYmxlSGlnaFdhdGVyTWFyaycsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgfVxufSk7IC8vIGlmIHdlJ3JlIGFscmVhZHkgd3JpdGluZyBzb21ldGhpbmcsIHRoZW4ganVzdCBwdXQgdGhpc1xuLy8gaW4gdGhlIHF1ZXVlLCBhbmQgd2FpdCBvdXIgdHVybi4gIE90aGVyd2lzZSwgY2FsbCBfd3JpdGVcbi8vIElmIHdlIHJldHVybiBmYWxzZSwgdGhlbiB3ZSBuZWVkIGEgZHJhaW4gZXZlbnQsIHNvIHNldCB0aGF0IGZsYWcuXG5cbmZ1bmN0aW9uIHdyaXRlT3JCdWZmZXIoc3RyZWFtLCBzdGF0ZSwgaXNCdWYsIGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgaWYgKCFpc0J1Zikge1xuICAgIHZhciBuZXdDaHVuayA9IGRlY29kZUNodW5rKHN0YXRlLCBjaHVuaywgZW5jb2RpbmcpO1xuXG4gICAgaWYgKGNodW5rICE9PSBuZXdDaHVuaykge1xuICAgICAgaXNCdWYgPSB0cnVlO1xuICAgICAgZW5jb2RpbmcgPSAnYnVmZmVyJztcbiAgICAgIGNodW5rID0gbmV3Q2h1bms7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxlbiA9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuICBzdGF0ZS5sZW5ndGggKz0gbGVuO1xuICB2YXIgcmV0ID0gc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyazsgLy8gd2UgbXVzdCBlbnN1cmUgdGhhdCBwcmV2aW91cyBuZWVkRHJhaW4gd2lsbCBub3QgYmUgcmVzZXQgdG8gZmFsc2UuXG5cbiAgaWYgKCFyZXQpIHN0YXRlLm5lZWREcmFpbiA9IHRydWU7XG5cbiAgaWYgKHN0YXRlLndyaXRpbmcgfHwgc3RhdGUuY29ya2VkKSB7XG4gICAgdmFyIGxhc3QgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSB7XG4gICAgICBjaHVuazogY2h1bmssXG4gICAgICBlbmNvZGluZzogZW5jb2RpbmcsXG4gICAgICBpc0J1ZjogaXNCdWYsXG4gICAgICBjYWxsYmFjazogY2IsXG4gICAgICBuZXh0OiBudWxsXG4gICAgfTtcblxuICAgIGlmIChsYXN0KSB7XG4gICAgICBsYXN0Lm5leHQgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIH1cblxuICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50ICs9IDE7XG4gIH0gZWxzZSB7XG4gICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCBmYWxzZSwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgd3JpdGV2LCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgc3RhdGUud3JpdGVsZW4gPSBsZW47XG4gIHN0YXRlLndyaXRlY2IgPSBjYjtcbiAgc3RhdGUud3JpdGluZyA9IHRydWU7XG4gIHN0YXRlLnN5bmMgPSB0cnVlO1xuICBpZiAoc3RhdGUuZGVzdHJveWVkKSBzdGF0ZS5vbndyaXRlKG5ldyBFUlJfU1RSRUFNX0RFU1RST1lFRCgnd3JpdGUnKSk7ZWxzZSBpZiAod3JpdGV2KSBzdHJlYW0uX3dyaXRldihjaHVuaywgc3RhdGUub253cml0ZSk7ZWxzZSBzdHJlYW0uX3dyaXRlKGNodW5rLCBlbmNvZGluZywgc3RhdGUub253cml0ZSk7XG4gIHN0YXRlLnN5bmMgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gb253cml0ZUVycm9yKHN0cmVhbSwgc3RhdGUsIHN5bmMsIGVyLCBjYikge1xuICAtLXN0YXRlLnBlbmRpbmdjYjtcblxuICBpZiAoc3luYykge1xuICAgIC8vIGRlZmVyIHRoZSBjYWxsYmFjayBpZiB3ZSBhcmUgYmVpbmcgY2FsbGVkIHN5bmNocm9ub3VzbHlcbiAgICAvLyB0byBhdm9pZCBwaWxpbmcgdXAgdGhpbmdzIG9uIHRoZSBzdGFja1xuICAgIHByb2Nlc3MubmV4dFRpY2soY2IsIGVyKTsgLy8gdGhpcyBjYW4gZW1pdCBmaW5pc2gsIGFuZCBpdCB3aWxsIGFsd2F5cyBoYXBwZW5cbiAgICAvLyBhZnRlciBlcnJvclxuXG4gICAgcHJvY2Vzcy5uZXh0VGljayhmaW5pc2hNYXliZSwgc3RyZWFtLCBzdGF0ZSk7XG4gICAgc3RyZWFtLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgZXJyb3JPckRlc3Ryb3koc3RyZWFtLCBlcik7XG4gIH0gZWxzZSB7XG4gICAgLy8gdGhlIGNhbGxlciBleHBlY3QgdGhpcyB0byBoYXBwZW4gYmVmb3JlIGlmXG4gICAgLy8gaXQgaXMgYXN5bmNcbiAgICBjYihlcik7XG4gICAgc3RyZWFtLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgZXJyb3JPckRlc3Ryb3koc3RyZWFtLCBlcik7IC8vIHRoaXMgY2FuIGVtaXQgZmluaXNoLCBidXQgZmluaXNoIG11c3RcbiAgICAvLyBhbHdheXMgZm9sbG93IGVycm9yXG5cbiAgICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpIHtcbiAgc3RhdGUud3JpdGluZyA9IGZhbHNlO1xuICBzdGF0ZS53cml0ZWNiID0gbnVsbDtcbiAgc3RhdGUubGVuZ3RoIC09IHN0YXRlLndyaXRlbGVuO1xuICBzdGF0ZS53cml0ZWxlbiA9IDA7XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGUoc3RyZWFtLCBlcikge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3dyaXRhYmxlU3RhdGU7XG4gIHZhciBzeW5jID0gc3RhdGUuc3luYztcbiAgdmFyIGNiID0gc3RhdGUud3JpdGVjYjtcbiAgaWYgKHR5cGVvZiBjYiAhPT0gJ2Z1bmN0aW9uJykgdGhyb3cgbmV3IEVSUl9NVUxUSVBMRV9DQUxMQkFDSygpO1xuICBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpO1xuICBpZiAoZXIpIG9ud3JpdGVFcnJvcihzdHJlYW0sIHN0YXRlLCBzeW5jLCBlciwgY2IpO2Vsc2Uge1xuICAgIC8vIENoZWNrIGlmIHdlJ3JlIGFjdHVhbGx5IHJlYWR5IHRvIGZpbmlzaCwgYnV0IGRvbid0IGVtaXQgeWV0XG4gICAgdmFyIGZpbmlzaGVkID0gbmVlZEZpbmlzaChzdGF0ZSkgfHwgc3RyZWFtLmRlc3Ryb3llZDtcblxuICAgIGlmICghZmluaXNoZWQgJiYgIXN0YXRlLmNvcmtlZCAmJiAhc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QpIHtcbiAgICAgIGNsZWFyQnVmZmVyKHN0cmVhbSwgc3RhdGUpO1xuICAgIH1cblxuICAgIGlmIChzeW5jKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGFmdGVyV3JpdGUsIHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFmdGVyV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpIHtcbiAgaWYgKCFmaW5pc2hlZCkgb253cml0ZURyYWluKHN0cmVhbSwgc3RhdGUpO1xuICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgY2IoKTtcbiAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG59IC8vIE11c3QgZm9yY2UgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIG9uIG5leHRUaWNrLCBzbyB0aGF0IHdlIGRvbid0XG4vLyBlbWl0ICdkcmFpbicgYmVmb3JlIHRoZSB3cml0ZSgpIGNvbnN1bWVyIGdldHMgdGhlICdmYWxzZScgcmV0dXJuXG4vLyB2YWx1ZSwgYW5kIGhhcyBhIGNoYW5jZSB0byBhdHRhY2ggYSAnZHJhaW4nIGxpc3RlbmVyLlxuXG5cbmZ1bmN0aW9uIG9ud3JpdGVEcmFpbihzdHJlYW0sIHN0YXRlKSB7XG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUubmVlZERyYWluKSB7XG4gICAgc3RhdGUubmVlZERyYWluID0gZmFsc2U7XG4gICAgc3RyZWFtLmVtaXQoJ2RyYWluJyk7XG4gIH1cbn0gLy8gaWYgdGhlcmUncyBzb21ldGhpbmcgaW4gdGhlIGJ1ZmZlciB3YWl0aW5nLCB0aGVuIHByb2Nlc3MgaXRcblxuXG5mdW5jdGlvbiBjbGVhckJ1ZmZlcihzdHJlYW0sIHN0YXRlKSB7XG4gIHN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgPSB0cnVlO1xuICB2YXIgZW50cnkgPSBzdGF0ZS5idWZmZXJlZFJlcXVlc3Q7XG5cbiAgaWYgKHN0cmVhbS5fd3JpdGV2ICYmIGVudHJ5ICYmIGVudHJ5Lm5leHQpIHtcbiAgICAvLyBGYXN0IGNhc2UsIHdyaXRlIGV2ZXJ5dGhpbmcgdXNpbmcgX3dyaXRldigpXG4gICAgdmFyIGwgPSBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudDtcbiAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5KGwpO1xuICAgIHZhciBob2xkZXIgPSBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWU7XG4gICAgaG9sZGVyLmVudHJ5ID0gZW50cnk7XG4gICAgdmFyIGNvdW50ID0gMDtcbiAgICB2YXIgYWxsQnVmZmVycyA9IHRydWU7XG5cbiAgICB3aGlsZSAoZW50cnkpIHtcbiAgICAgIGJ1ZmZlcltjb3VudF0gPSBlbnRyeTtcbiAgICAgIGlmICghZW50cnkuaXNCdWYpIGFsbEJ1ZmZlcnMgPSBmYWxzZTtcbiAgICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgICAgIGNvdW50ICs9IDE7XG4gICAgfVxuXG4gICAgYnVmZmVyLmFsbEJ1ZmZlcnMgPSBhbGxCdWZmZXJzO1xuICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgdHJ1ZSwgc3RhdGUubGVuZ3RoLCBidWZmZXIsICcnLCBob2xkZXIuZmluaXNoKTsgLy8gZG9Xcml0ZSBpcyBhbG1vc3QgYWx3YXlzIGFzeW5jLCBkZWZlciB0aGVzZSB0byBzYXZlIGEgYml0IG9mIHRpbWVcbiAgICAvLyBhcyB0aGUgaG90IHBhdGggZW5kcyB3aXRoIGRvV3JpdGVcblxuICAgIHN0YXRlLnBlbmRpbmdjYisrO1xuICAgIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuXG4gICAgaWYgKGhvbGRlci5uZXh0KSB7XG4gICAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBob2xkZXIubmV4dDtcbiAgICAgIGhvbGRlci5uZXh0ID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gbmV3IENvcmtlZFJlcXVlc3Qoc3RhdGUpO1xuICAgIH1cblxuICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50ID0gMDtcbiAgfSBlbHNlIHtcbiAgICAvLyBTbG93IGNhc2UsIHdyaXRlIGNodW5rcyBvbmUtYnktb25lXG4gICAgd2hpbGUgKGVudHJ5KSB7XG4gICAgICB2YXIgY2h1bmsgPSBlbnRyeS5jaHVuaztcbiAgICAgIHZhciBlbmNvZGluZyA9IGVudHJ5LmVuY29kaW5nO1xuICAgICAgdmFyIGNiID0gZW50cnkuY2FsbGJhY2s7XG4gICAgICB2YXIgbGVuID0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG4gICAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIGZhbHNlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICAgICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICAgICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQtLTsgLy8gaWYgd2UgZGlkbid0IGNhbGwgdGhlIG9ud3JpdGUgaW1tZWRpYXRlbHksIHRoZW5cbiAgICAgIC8vIGl0IG1lYW5zIHRoYXQgd2UgbmVlZCB0byB3YWl0IHVudGlsIGl0IGRvZXMuXG4gICAgICAvLyBhbHNvLCB0aGF0IG1lYW5zIHRoYXQgdGhlIGNodW5rIGFuZCBjYiBhcmUgY3VycmVudGx5XG4gICAgICAvLyBiZWluZyBwcm9jZXNzZWQsIHNvIG1vdmUgdGhlIGJ1ZmZlciBjb3VudGVyIHBhc3QgdGhlbS5cblxuICAgICAgaWYgKHN0YXRlLndyaXRpbmcpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGVudHJ5ID09PSBudWxsKSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgfVxuXG4gIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9IGVudHJ5O1xuICBzdGF0ZS5idWZmZXJQcm9jZXNzaW5nID0gZmFsc2U7XG59XG5cbldyaXRhYmxlLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBjYihuZXcgRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQoJ193cml0ZSgpJykpO1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLl93cml0ZXYgPSBudWxsO1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBpZiAodHlwZW9mIGNodW5rID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBjaHVuaztcbiAgICBjaHVuayA9IG51bGw7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gZW5jb2Rpbmc7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9XG5cbiAgaWYgKGNodW5rICE9PSBudWxsICYmIGNodW5rICE9PSB1bmRlZmluZWQpIHRoaXMud3JpdGUoY2h1bmssIGVuY29kaW5nKTsgLy8gLmVuZCgpIGZ1bGx5IHVuY29ya3NcblxuICBpZiAoc3RhdGUuY29ya2VkKSB7XG4gICAgc3RhdGUuY29ya2VkID0gMTtcbiAgICB0aGlzLnVuY29yaygpO1xuICB9IC8vIGlnbm9yZSB1bm5lY2Vzc2FyeSBlbmQoKSBjYWxscy5cblxuXG4gIGlmICghc3RhdGUuZW5kaW5nKSBlbmRXcml0YWJsZSh0aGlzLCBzdGF0ZSwgY2IpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZS5wcm90b3R5cGUsICd3cml0YWJsZUxlbmd0aCcsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUubGVuZ3RoO1xuICB9XG59KTtcblxuZnVuY3Rpb24gbmVlZEZpbmlzaChzdGF0ZSkge1xuICByZXR1cm4gc3RhdGUuZW5kaW5nICYmIHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPT09IG51bGwgJiYgIXN0YXRlLmZpbmlzaGVkICYmICFzdGF0ZS53cml0aW5nO1xufVxuXG5mdW5jdGlvbiBjYWxsRmluYWwoc3RyZWFtLCBzdGF0ZSkge1xuICBzdHJlYW0uX2ZpbmFsKGZ1bmN0aW9uIChlcnIpIHtcbiAgICBzdGF0ZS5wZW5kaW5nY2ItLTtcblxuICAgIGlmIChlcnIpIHtcbiAgICAgIGVycm9yT3JEZXN0cm95KHN0cmVhbSwgZXJyKTtcbiAgICB9XG5cbiAgICBzdGF0ZS5wcmVmaW5pc2hlZCA9IHRydWU7XG4gICAgc3RyZWFtLmVtaXQoJ3ByZWZpbmlzaCcpO1xuICAgIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcHJlZmluaXNoKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5wcmVmaW5pc2hlZCAmJiAhc3RhdGUuZmluYWxDYWxsZWQpIHtcbiAgICBpZiAodHlwZW9mIHN0cmVhbS5fZmluYWwgPT09ICdmdW5jdGlvbicgJiYgIXN0YXRlLmRlc3Ryb3llZCkge1xuICAgICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgICBzdGF0ZS5maW5hbENhbGxlZCA9IHRydWU7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGNhbGxGaW5hbCwgc3RyZWFtLCBzdGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLnByZWZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5lbWl0KCdwcmVmaW5pc2gnKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSkge1xuICB2YXIgbmVlZCA9IG5lZWRGaW5pc2goc3RhdGUpO1xuXG4gIGlmIChuZWVkKSB7XG4gICAgcHJlZmluaXNoKHN0cmVhbSwgc3RhdGUpO1xuXG4gICAgaWYgKHN0YXRlLnBlbmRpbmdjYiA9PT0gMCkge1xuICAgICAgc3RhdGUuZmluaXNoZWQgPSB0cnVlO1xuICAgICAgc3RyZWFtLmVtaXQoJ2ZpbmlzaCcpO1xuXG4gICAgICBpZiAoc3RhdGUuYXV0b0Rlc3Ryb3kpIHtcbiAgICAgICAgLy8gSW4gY2FzZSBvZiBkdXBsZXggc3RyZWFtcyB3ZSBuZWVkIGEgd2F5IHRvIGRldGVjdFxuICAgICAgICAvLyBpZiB0aGUgcmVhZGFibGUgc2lkZSBpcyByZWFkeSBmb3IgYXV0b0Rlc3Ryb3kgYXMgd2VsbFxuICAgICAgICB2YXIgclN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuXG4gICAgICAgIGlmICghclN0YXRlIHx8IHJTdGF0ZS5hdXRvRGVzdHJveSAmJiByU3RhdGUuZW5kRW1pdHRlZCkge1xuICAgICAgICAgIHN0cmVhbS5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmVlZDtcbn1cblxuZnVuY3Rpb24gZW5kV3JpdGFibGUoc3RyZWFtLCBzdGF0ZSwgY2IpIHtcbiAgc3RhdGUuZW5kaW5nID0gdHJ1ZTtcbiAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG5cbiAgaWYgKGNiKSB7XG4gICAgaWYgKHN0YXRlLmZpbmlzaGVkKSBwcm9jZXNzLm5leHRUaWNrKGNiKTtlbHNlIHN0cmVhbS5vbmNlKCdmaW5pc2gnLCBjYik7XG4gIH1cblxuICBzdGF0ZS5lbmRlZCA9IHRydWU7XG4gIHN0cmVhbS53cml0YWJsZSA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBvbkNvcmtlZEZpbmlzaChjb3JrUmVxLCBzdGF0ZSwgZXJyKSB7XG4gIHZhciBlbnRyeSA9IGNvcmtSZXEuZW50cnk7XG4gIGNvcmtSZXEuZW50cnkgPSBudWxsO1xuXG4gIHdoaWxlIChlbnRyeSkge1xuICAgIHZhciBjYiA9IGVudHJ5LmNhbGxiYWNrO1xuICAgIHN0YXRlLnBlbmRpbmdjYi0tO1xuICAgIGNiKGVycik7XG4gICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICB9IC8vIHJldXNlIHRoZSBmcmVlIGNvcmtSZXEuXG5cblxuICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUubmV4dCA9IGNvcmtSZXE7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZS5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIGlmICh0aGlzLl93cml0YWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgLy8gd2UgaWdub3JlIHRoZSB2YWx1ZSBpZiB0aGUgc3RyZWFtXG4gICAgLy8gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldFxuICAgIGlmICghdGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxuICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZFxuXG5cbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICB9XG59KTtcbldyaXRhYmxlLnByb3RvdHlwZS5kZXN0cm95ID0gZGVzdHJveUltcGwuZGVzdHJveTtcbldyaXRhYmxlLnByb3RvdHlwZS5fdW5kZXN0cm95ID0gZGVzdHJveUltcGwudW5kZXN0cm95O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICBjYihlcnIpO1xufTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfT2JqZWN0JHNldFByb3RvdHlwZU87XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbnZhciBmaW5pc2hlZCA9IHJlcXVpcmUoJy4vZW5kLW9mLXN0cmVhbScpO1xuXG52YXIga0xhc3RSZXNvbHZlID0gU3ltYm9sKCdsYXN0UmVzb2x2ZScpO1xudmFyIGtMYXN0UmVqZWN0ID0gU3ltYm9sKCdsYXN0UmVqZWN0Jyk7XG52YXIga0Vycm9yID0gU3ltYm9sKCdlcnJvcicpO1xudmFyIGtFbmRlZCA9IFN5bWJvbCgnZW5kZWQnKTtcbnZhciBrTGFzdFByb21pc2UgPSBTeW1ib2woJ2xhc3RQcm9taXNlJyk7XG52YXIga0hhbmRsZVByb21pc2UgPSBTeW1ib2woJ2hhbmRsZVByb21pc2UnKTtcbnZhciBrU3RyZWFtID0gU3ltYm9sKCdzdHJlYW0nKTtcblxuZnVuY3Rpb24gY3JlYXRlSXRlclJlc3VsdCh2YWx1ZSwgZG9uZSkge1xuICByZXR1cm4ge1xuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICBkb25lOiBkb25lXG4gIH07XG59XG5cbmZ1bmN0aW9uIHJlYWRBbmRSZXNvbHZlKGl0ZXIpIHtcbiAgdmFyIHJlc29sdmUgPSBpdGVyW2tMYXN0UmVzb2x2ZV07XG5cbiAgaWYgKHJlc29sdmUgIT09IG51bGwpIHtcbiAgICB2YXIgZGF0YSA9IGl0ZXJba1N0cmVhbV0ucmVhZCgpOyAvLyB3ZSBkZWZlciBpZiBkYXRhIGlzIG51bGxcbiAgICAvLyB3ZSBjYW4gYmUgZXhwZWN0aW5nIGVpdGhlciAnZW5kJyBvclxuICAgIC8vICdlcnJvcidcblxuICAgIGlmIChkYXRhICE9PSBudWxsKSB7XG4gICAgICBpdGVyW2tMYXN0UHJvbWlzZV0gPSBudWxsO1xuICAgICAgaXRlcltrTGFzdFJlc29sdmVdID0gbnVsbDtcbiAgICAgIGl0ZXJba0xhc3RSZWplY3RdID0gbnVsbDtcbiAgICAgIHJlc29sdmUoY3JlYXRlSXRlclJlc3VsdChkYXRhLCBmYWxzZSkpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBvblJlYWRhYmxlKGl0ZXIpIHtcbiAgLy8gd2Ugd2FpdCBmb3IgdGhlIG5leHQgdGljaywgYmVjYXVzZSBpdCBtaWdodFxuICAvLyBlbWl0IGFuIGVycm9yIHdpdGggcHJvY2Vzcy5uZXh0VGlja1xuICBwcm9jZXNzLm5leHRUaWNrKHJlYWRBbmRSZXNvbHZlLCBpdGVyKTtcbn1cblxuZnVuY3Rpb24gd3JhcEZvck5leHQobGFzdFByb21pc2UsIGl0ZXIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBsYXN0UHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpdGVyW2tFbmRlZF0pIHtcbiAgICAgICAgcmVzb2x2ZShjcmVhdGVJdGVyUmVzdWx0KHVuZGVmaW5lZCwgdHJ1ZSkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGl0ZXJba0hhbmRsZVByb21pc2VdKHJlc29sdmUsIHJlamVjdCk7XG4gICAgfSwgcmVqZWN0KTtcbiAgfTtcbn1cblxudmFyIEFzeW5jSXRlcmF0b3JQcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZnVuY3Rpb24gKCkge30pO1xudmFyIFJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvclByb3RvdHlwZSA9IE9iamVjdC5zZXRQcm90b3R5cGVPZigoX09iamVjdCRzZXRQcm90b3R5cGVPID0ge1xuICBnZXQgc3RyZWFtKCkge1xuICAgIHJldHVybiB0aGlzW2tTdHJlYW1dO1xuICB9LFxuXG4gIG5leHQ6IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIC8vIGlmIHdlIGhhdmUgZGV0ZWN0ZWQgYW4gZXJyb3IgaW4gdGhlIG1lYW53aGlsZVxuICAgIC8vIHJlamVjdCBzdHJhaWdodCBhd2F5XG4gICAgdmFyIGVycm9yID0gdGhpc1trRXJyb3JdO1xuXG4gICAgaWYgKGVycm9yICE9PSBudWxsKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH1cblxuICAgIGlmICh0aGlzW2tFbmRlZF0pIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoY3JlYXRlSXRlclJlc3VsdCh1bmRlZmluZWQsIHRydWUpKTtcbiAgICB9XG5cbiAgICBpZiAodGhpc1trU3RyZWFtXS5kZXN0cm95ZWQpIHtcbiAgICAgIC8vIFdlIG5lZWQgdG8gZGVmZXIgdmlhIG5leHRUaWNrIGJlY2F1c2UgaWYgLmRlc3Ryb3koZXJyKSBpc1xuICAgICAgLy8gY2FsbGVkLCB0aGUgZXJyb3Igd2lsbCBiZSBlbWl0dGVkIHZpYSBuZXh0VGljaywgYW5kXG4gICAgICAvLyB3ZSBjYW5ub3QgZ3VhcmFudGVlIHRoYXQgdGhlcmUgaXMgbm8gZXJyb3IgbGluZ2VyaW5nIGFyb3VuZFxuICAgICAgLy8gd2FpdGluZyB0byBiZSBlbWl0dGVkLlxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKF90aGlzW2tFcnJvcl0pIHtcbiAgICAgICAgICAgIHJlamVjdChfdGhpc1trRXJyb3JdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZShjcmVhdGVJdGVyUmVzdWx0KHVuZGVmaW5lZCwgdHJ1ZSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9IC8vIGlmIHdlIGhhdmUgbXVsdGlwbGUgbmV4dCgpIGNhbGxzXG4gICAgLy8gd2Ugd2lsbCB3YWl0IGZvciB0aGUgcHJldmlvdXMgUHJvbWlzZSB0byBmaW5pc2hcbiAgICAvLyB0aGlzIGxvZ2ljIGlzIG9wdGltaXplZCB0byBzdXBwb3J0IGZvciBhd2FpdCBsb29wcyxcbiAgICAvLyB3aGVyZSBuZXh0KCkgaXMgb25seSBjYWxsZWQgb25jZSBhdCBhIHRpbWVcblxuXG4gICAgdmFyIGxhc3RQcm9taXNlID0gdGhpc1trTGFzdFByb21pc2VdO1xuICAgIHZhciBwcm9taXNlO1xuXG4gICAgaWYgKGxhc3RQcm9taXNlKSB7XG4gICAgICBwcm9taXNlID0gbmV3IFByb21pc2Uod3JhcEZvck5leHQobGFzdFByb21pc2UsIHRoaXMpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZmFzdCBwYXRoIG5lZWRlZCB0byBzdXBwb3J0IG11bHRpcGxlIHRoaXMucHVzaCgpXG4gICAgICAvLyB3aXRob3V0IHRyaWdnZXJpbmcgdGhlIG5leHQoKSBxdWV1ZVxuICAgICAgdmFyIGRhdGEgPSB0aGlzW2tTdHJlYW1dLnJlYWQoKTtcblxuICAgICAgaWYgKGRhdGEgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShjcmVhdGVJdGVyUmVzdWx0KGRhdGEsIGZhbHNlKSk7XG4gICAgICB9XG5cbiAgICAgIHByb21pc2UgPSBuZXcgUHJvbWlzZSh0aGlzW2tIYW5kbGVQcm9taXNlXSk7XG4gICAgfVxuXG4gICAgdGhpc1trTGFzdFByb21pc2VdID0gcHJvbWlzZTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxufSwgX2RlZmluZVByb3BlcnR5KF9PYmplY3Qkc2V0UHJvdG90eXBlTywgU3ltYm9sLmFzeW5jSXRlcmF0b3IsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXM7XG59KSwgX2RlZmluZVByb3BlcnR5KF9PYmplY3Qkc2V0UHJvdG90eXBlTywgXCJyZXR1cm5cIiwgZnVuY3Rpb24gX3JldHVybigpIHtcbiAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgLy8gZGVzdHJveShlcnIsIGNiKSBpcyBhIHByaXZhdGUgQVBJXG4gIC8vIHdlIGNhbiBndWFyYW50ZWUgd2UgaGF2ZSB0aGF0IGhlcmUsIGJlY2F1c2Ugd2UgY29udHJvbCB0aGVcbiAgLy8gUmVhZGFibGUgY2xhc3MgdGhpcyBpcyBhdHRhY2hlZCB0b1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIF90aGlzMltrU3RyZWFtXS5kZXN0cm95KG51bGwsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVzb2x2ZShjcmVhdGVJdGVyUmVzdWx0KHVuZGVmaW5lZCwgdHJ1ZSkpO1xuICAgIH0pO1xuICB9KTtcbn0pLCBfT2JqZWN0JHNldFByb3RvdHlwZU8pLCBBc3luY0l0ZXJhdG9yUHJvdG90eXBlKTtcblxudmFyIGNyZWF0ZVJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvciA9IGZ1bmN0aW9uIGNyZWF0ZVJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvcihzdHJlYW0pIHtcbiAgdmFyIF9PYmplY3QkY3JlYXRlO1xuXG4gIHZhciBpdGVyYXRvciA9IE9iamVjdC5jcmVhdGUoUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yUHJvdG90eXBlLCAoX09iamVjdCRjcmVhdGUgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9PYmplY3QkY3JlYXRlLCBrU3RyZWFtLCB7XG4gICAgdmFsdWU6IHN0cmVhbSxcbiAgICB3cml0YWJsZTogdHJ1ZVxuICB9KSwgX2RlZmluZVByb3BlcnR5KF9PYmplY3QkY3JlYXRlLCBrTGFzdFJlc29sdmUsIHtcbiAgICB2YWx1ZTogbnVsbCxcbiAgICB3cml0YWJsZTogdHJ1ZVxuICB9KSwgX2RlZmluZVByb3BlcnR5KF9PYmplY3QkY3JlYXRlLCBrTGFzdFJlamVjdCwge1xuICAgIHZhbHVlOiBudWxsLFxuICAgIHdyaXRhYmxlOiB0cnVlXG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX09iamVjdCRjcmVhdGUsIGtFcnJvciwge1xuICAgIHZhbHVlOiBudWxsLFxuICAgIHdyaXRhYmxlOiB0cnVlXG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX09iamVjdCRjcmVhdGUsIGtFbmRlZCwge1xuICAgIHZhbHVlOiBzdHJlYW0uX3JlYWRhYmxlU3RhdGUuZW5kRW1pdHRlZCxcbiAgICB3cml0YWJsZTogdHJ1ZVxuICB9KSwgX2RlZmluZVByb3BlcnR5KF9PYmplY3QkY3JlYXRlLCBrSGFuZGxlUHJvbWlzZSwge1xuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBkYXRhID0gaXRlcmF0b3Jba1N0cmVhbV0ucmVhZCgpO1xuXG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICBpdGVyYXRvcltrTGFzdFByb21pc2VdID0gbnVsbDtcbiAgICAgICAgaXRlcmF0b3Jba0xhc3RSZXNvbHZlXSA9IG51bGw7XG4gICAgICAgIGl0ZXJhdG9yW2tMYXN0UmVqZWN0XSA9IG51bGw7XG4gICAgICAgIHJlc29sdmUoY3JlYXRlSXRlclJlc3VsdChkYXRhLCBmYWxzZSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXRlcmF0b3Jba0xhc3RSZXNvbHZlXSA9IHJlc29sdmU7XG4gICAgICAgIGl0ZXJhdG9yW2tMYXN0UmVqZWN0XSA9IHJlamVjdDtcbiAgICAgIH1cbiAgICB9LFxuICAgIHdyaXRhYmxlOiB0cnVlXG4gIH0pLCBfT2JqZWN0JGNyZWF0ZSkpO1xuICBpdGVyYXRvcltrTGFzdFByb21pc2VdID0gbnVsbDtcbiAgZmluaXNoZWQoc3RyZWFtLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKGVyciAmJiBlcnIuY29kZSAhPT0gJ0VSUl9TVFJFQU1fUFJFTUFUVVJFX0NMT1NFJykge1xuICAgICAgdmFyIHJlamVjdCA9IGl0ZXJhdG9yW2tMYXN0UmVqZWN0XTsgLy8gcmVqZWN0IGlmIHdlIGFyZSB3YWl0aW5nIGZvciBkYXRhIGluIHRoZSBQcm9taXNlXG4gICAgICAvLyByZXR1cm5lZCBieSBuZXh0KCkgYW5kIHN0b3JlIHRoZSBlcnJvclxuXG4gICAgICBpZiAocmVqZWN0ICE9PSBudWxsKSB7XG4gICAgICAgIGl0ZXJhdG9yW2tMYXN0UHJvbWlzZV0gPSBudWxsO1xuICAgICAgICBpdGVyYXRvcltrTGFzdFJlc29sdmVdID0gbnVsbDtcbiAgICAgICAgaXRlcmF0b3Jba0xhc3RSZWplY3RdID0gbnVsbDtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9XG5cbiAgICAgIGl0ZXJhdG9yW2tFcnJvcl0gPSBlcnI7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHJlc29sdmUgPSBpdGVyYXRvcltrTGFzdFJlc29sdmVdO1xuXG4gICAgaWYgKHJlc29sdmUgIT09IG51bGwpIHtcbiAgICAgIGl0ZXJhdG9yW2tMYXN0UHJvbWlzZV0gPSBudWxsO1xuICAgICAgaXRlcmF0b3Jba0xhc3RSZXNvbHZlXSA9IG51bGw7XG4gICAgICBpdGVyYXRvcltrTGFzdFJlamVjdF0gPSBudWxsO1xuICAgICAgcmVzb2x2ZShjcmVhdGVJdGVyUmVzdWx0KHVuZGVmaW5lZCwgdHJ1ZSkpO1xuICAgIH1cblxuICAgIGl0ZXJhdG9yW2tFbmRlZF0gPSB0cnVlO1xuICB9KTtcbiAgc3RyZWFtLm9uKCdyZWFkYWJsZScsIG9uUmVhZGFibGUuYmluZChudWxsLCBpdGVyYXRvcikpO1xuICByZXR1cm4gaXRlcmF0b3I7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZVJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvcjsiLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJ2J1ZmZlcicpLFxuICAgIEJ1ZmZlciA9IF9yZXF1aXJlLkJ1ZmZlcjtcblxudmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoJ3V0aWwnKSxcbiAgICBpbnNwZWN0ID0gX3JlcXVpcmUyLmluc3BlY3Q7XG5cbnZhciBjdXN0b20gPSBpbnNwZWN0ICYmIGluc3BlY3QuY3VzdG9tIHx8ICdpbnNwZWN0JztcblxuZnVuY3Rpb24gY29weUJ1ZmZlcihzcmMsIHRhcmdldCwgb2Zmc2V0KSB7XG4gIEJ1ZmZlci5wcm90b3R5cGUuY29weS5jYWxsKHNyYywgdGFyZ2V0LCBvZmZzZXQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEJ1ZmZlckxpc3QoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJ1ZmZlckxpc3QpO1xuXG4gICAgdGhpcy5oZWFkID0gbnVsbDtcbiAgICB0aGlzLnRhaWwgPSBudWxsO1xuICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhCdWZmZXJMaXN0LCBbe1xuICAgIGtleTogXCJwdXNoXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHB1c2godikge1xuICAgICAgdmFyIGVudHJ5ID0ge1xuICAgICAgICBkYXRhOiB2LFxuICAgICAgICBuZXh0OiBudWxsXG4gICAgICB9O1xuICAgICAgaWYgKHRoaXMubGVuZ3RoID4gMCkgdGhpcy50YWlsLm5leHQgPSBlbnRyeTtlbHNlIHRoaXMuaGVhZCA9IGVudHJ5O1xuICAgICAgdGhpcy50YWlsID0gZW50cnk7XG4gICAgICArK3RoaXMubGVuZ3RoO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ1bnNoaWZ0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVuc2hpZnQodikge1xuICAgICAgdmFyIGVudHJ5ID0ge1xuICAgICAgICBkYXRhOiB2LFxuICAgICAgICBuZXh0OiB0aGlzLmhlYWRcbiAgICAgIH07XG4gICAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHRoaXMudGFpbCA9IGVudHJ5O1xuICAgICAgdGhpcy5oZWFkID0gZW50cnk7XG4gICAgICArK3RoaXMubGVuZ3RoO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzaGlmdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzaGlmdCgpIHtcbiAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgICAgdmFyIHJldCA9IHRoaXMuaGVhZC5kYXRhO1xuICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAxKSB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO2Vsc2UgdGhpcy5oZWFkID0gdGhpcy5oZWFkLm5leHQ7XG4gICAgICAtLXRoaXMubGVuZ3RoO1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY2xlYXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO1xuICAgICAgdGhpcy5sZW5ndGggPSAwO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJqb2luXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGpvaW4ocykge1xuICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gJyc7XG4gICAgICB2YXIgcCA9IHRoaXMuaGVhZDtcbiAgICAgIHZhciByZXQgPSAnJyArIHAuZGF0YTtcblxuICAgICAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICAgICAgcmV0ICs9IHMgKyBwLmRhdGE7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbmNhdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb25jYXQobikge1xuICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gQnVmZmVyLmFsbG9jKDApO1xuICAgICAgdmFyIHJldCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShuID4+PiAwKTtcbiAgICAgIHZhciBwID0gdGhpcy5oZWFkO1xuICAgICAgdmFyIGkgPSAwO1xuXG4gICAgICB3aGlsZSAocCkge1xuICAgICAgICBjb3B5QnVmZmVyKHAuZGF0YSwgcmV0LCBpKTtcbiAgICAgICAgaSArPSBwLmRhdGEubGVuZ3RoO1xuICAgICAgICBwID0gcC5uZXh0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmV0O1xuICAgIH0gLy8gQ29uc3VtZXMgYSBzcGVjaWZpZWQgYW1vdW50IG9mIGJ5dGVzIG9yIGNoYXJhY3RlcnMgZnJvbSB0aGUgYnVmZmVyZWQgZGF0YS5cblxuICB9LCB7XG4gICAga2V5OiBcImNvbnN1bWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29uc3VtZShuLCBoYXNTdHJpbmdzKSB7XG4gICAgICB2YXIgcmV0O1xuXG4gICAgICBpZiAobiA8IHRoaXMuaGVhZC5kYXRhLmxlbmd0aCkge1xuICAgICAgICAvLyBgc2xpY2VgIGlzIHRoZSBzYW1lIGZvciBidWZmZXJzIGFuZCBzdHJpbmdzLlxuICAgICAgICByZXQgPSB0aGlzLmhlYWQuZGF0YS5zbGljZSgwLCBuKTtcbiAgICAgICAgdGhpcy5oZWFkLmRhdGEgPSB0aGlzLmhlYWQuZGF0YS5zbGljZShuKTtcbiAgICAgIH0gZWxzZSBpZiAobiA9PT0gdGhpcy5oZWFkLmRhdGEubGVuZ3RoKSB7XG4gICAgICAgIC8vIEZpcnN0IGNodW5rIGlzIGEgcGVyZmVjdCBtYXRjaC5cbiAgICAgICAgcmV0ID0gdGhpcy5zaGlmdCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmVzdWx0IHNwYW5zIG1vcmUgdGhhbiBvbmUgYnVmZmVyLlxuICAgICAgICByZXQgPSBoYXNTdHJpbmdzID8gdGhpcy5fZ2V0U3RyaW5nKG4pIDogdGhpcy5fZ2V0QnVmZmVyKG4pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJmaXJzdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmaXJzdCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmhlYWQuZGF0YTtcbiAgICB9IC8vIENvbnN1bWVzIGEgc3BlY2lmaWVkIGFtb3VudCBvZiBjaGFyYWN0ZXJzIGZyb20gdGhlIGJ1ZmZlcmVkIGRhdGEuXG5cbiAgfSwge1xuICAgIGtleTogXCJfZ2V0U3RyaW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRTdHJpbmcobikge1xuICAgICAgdmFyIHAgPSB0aGlzLmhlYWQ7XG4gICAgICB2YXIgYyA9IDE7XG4gICAgICB2YXIgcmV0ID0gcC5kYXRhO1xuICAgICAgbiAtPSByZXQubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAocCA9IHAubmV4dCkge1xuICAgICAgICB2YXIgc3RyID0gcC5kYXRhO1xuICAgICAgICB2YXIgbmIgPSBuID4gc3RyLmxlbmd0aCA/IHN0ci5sZW5ndGggOiBuO1xuICAgICAgICBpZiAobmIgPT09IHN0ci5sZW5ndGgpIHJldCArPSBzdHI7ZWxzZSByZXQgKz0gc3RyLnNsaWNlKDAsIG4pO1xuICAgICAgICBuIC09IG5iO1xuXG4gICAgICAgIGlmIChuID09PSAwKSB7XG4gICAgICAgICAgaWYgKG5iID09PSBzdHIubGVuZ3RoKSB7XG4gICAgICAgICAgICArK2M7XG4gICAgICAgICAgICBpZiAocC5uZXh0KSB0aGlzLmhlYWQgPSBwLm5leHQ7ZWxzZSB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmhlYWQgPSBwO1xuICAgICAgICAgICAgcC5kYXRhID0gc3RyLnNsaWNlKG5iKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgICsrYztcbiAgICAgIH1cblxuICAgICAgdGhpcy5sZW5ndGggLT0gYztcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfSAvLyBDb25zdW1lcyBhIHNwZWNpZmllZCBhbW91bnQgb2YgYnl0ZXMgZnJvbSB0aGUgYnVmZmVyZWQgZGF0YS5cblxuICB9LCB7XG4gICAga2V5OiBcIl9nZXRCdWZmZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldEJ1ZmZlcihuKSB7XG4gICAgICB2YXIgcmV0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKG4pO1xuICAgICAgdmFyIHAgPSB0aGlzLmhlYWQ7XG4gICAgICB2YXIgYyA9IDE7XG4gICAgICBwLmRhdGEuY29weShyZXQpO1xuICAgICAgbiAtPSBwLmRhdGEubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAocCA9IHAubmV4dCkge1xuICAgICAgICB2YXIgYnVmID0gcC5kYXRhO1xuICAgICAgICB2YXIgbmIgPSBuID4gYnVmLmxlbmd0aCA/IGJ1Zi5sZW5ndGggOiBuO1xuICAgICAgICBidWYuY29weShyZXQsIHJldC5sZW5ndGggLSBuLCAwLCBuYik7XG4gICAgICAgIG4gLT0gbmI7XG5cbiAgICAgICAgaWYgKG4gPT09IDApIHtcbiAgICAgICAgICBpZiAobmIgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICAgICAgICAgICsrYztcbiAgICAgICAgICAgIGlmIChwLm5leHQpIHRoaXMuaGVhZCA9IHAubmV4dDtlbHNlIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaGVhZCA9IHA7XG4gICAgICAgICAgICBwLmRhdGEgPSBidWYuc2xpY2UobmIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgKytjO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmxlbmd0aCAtPSBjO1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9IC8vIE1ha2Ugc3VyZSB0aGUgbGlua2VkIGxpc3Qgb25seSBzaG93cyB0aGUgbWluaW1hbCBuZWNlc3NhcnkgaW5mb3JtYXRpb24uXG5cbiAgfSwge1xuICAgIGtleTogY3VzdG9tLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShfLCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gaW5zcGVjdCh0aGlzLCBfb2JqZWN0U3ByZWFkKHt9LCBvcHRpb25zLCB7XG4gICAgICAgIC8vIE9ubHkgaW5zcGVjdCBvbmUgbGV2ZWwuXG4gICAgICAgIGRlcHRoOiAwLFxuICAgICAgICAvLyBJdCBzaG91bGQgbm90IHJlY3Vyc2UuXG4gICAgICAgIGN1c3RvbUluc3BlY3Q6IGZhbHNlXG4gICAgICB9KSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEJ1ZmZlckxpc3Q7XG59KCk7IiwiJ3VzZSBzdHJpY3QnOyAvLyB1bmRvY3VtZW50ZWQgY2IoKSBBUEksIG5lZWRlZCBmb3IgY29yZSwgbm90IGZvciBwdWJsaWMgQVBJXG5cbmZ1bmN0aW9uIGRlc3Ryb3koZXJyLCBjYikge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHZhciByZWFkYWJsZURlc3Ryb3llZCA9IHRoaXMuX3JlYWRhYmxlU3RhdGUgJiYgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIHZhciB3cml0YWJsZURlc3Ryb3llZCA9IHRoaXMuX3dyaXRhYmxlU3RhdGUgJiYgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG5cbiAgaWYgKHJlYWRhYmxlRGVzdHJveWVkIHx8IHdyaXRhYmxlRGVzdHJveWVkKSB7XG4gICAgaWYgKGNiKSB7XG4gICAgICBjYihlcnIpO1xuICAgIH0gZWxzZSBpZiAoZXJyKSB7XG4gICAgICBpZiAoIXRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhlbWl0RXJyb3JOVCwgdGhpcywgZXJyKTtcbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkKSB7XG4gICAgICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhlbWl0RXJyb3JOVCwgdGhpcywgZXJyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSAvLyB3ZSBzZXQgZGVzdHJveWVkIHRvIHRydWUgYmVmb3JlIGZpcmluZyBlcnJvciBjYWxsYmFja3MgaW4gb3JkZXJcbiAgLy8gdG8gbWFrZSBpdCByZS1lbnRyYW5jZSBzYWZlIGluIGNhc2UgZGVzdHJveSgpIGlzIGNhbGxlZCB3aXRoaW4gY2FsbGJhY2tzXG5cblxuICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdHJ1ZTtcbiAgfSAvLyBpZiB0aGlzIGlzIGEgZHVwbGV4IHN0cmVhbSBtYXJrIHRoZSB3cml0YWJsZSBwYXJ0IGFzIGRlc3Ryb3llZCBhcyB3ZWxsXG5cblxuICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdHJ1ZTtcbiAgfVxuXG4gIHRoaXMuX2Rlc3Ryb3koZXJyIHx8IG51bGwsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAoIWNiICYmIGVycikge1xuICAgICAgaWYgKCFfdGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGVtaXRFcnJvckFuZENsb3NlTlQsIF90aGlzLCBlcnIpO1xuICAgICAgfSBlbHNlIGlmICghX3RoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkKSB7XG4gICAgICAgIF90aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soZW1pdEVycm9yQW5kQ2xvc2VOVCwgX3RoaXMsIGVycik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGVtaXRDbG9zZU5ULCBfdGhpcyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjYikge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhlbWl0Q2xvc2VOVCwgX3RoaXMpO1xuICAgICAgY2IoZXJyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhlbWl0Q2xvc2VOVCwgX3RoaXMpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGVtaXRFcnJvckFuZENsb3NlTlQoc2VsZiwgZXJyKSB7XG4gIGVtaXRFcnJvck5UKHNlbGYsIGVycik7XG4gIGVtaXRDbG9zZU5UKHNlbGYpO1xufVxuXG5mdW5jdGlvbiBlbWl0Q2xvc2VOVChzZWxmKSB7XG4gIGlmIChzZWxmLl93cml0YWJsZVN0YXRlICYmICFzZWxmLl93cml0YWJsZVN0YXRlLmVtaXRDbG9zZSkgcmV0dXJuO1xuICBpZiAoc2VsZi5fcmVhZGFibGVTdGF0ZSAmJiAhc2VsZi5fcmVhZGFibGVTdGF0ZS5lbWl0Q2xvc2UpIHJldHVybjtcbiAgc2VsZi5lbWl0KCdjbG9zZScpO1xufVxuXG5mdW5jdGlvbiB1bmRlc3Ryb3koKSB7XG4gIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuZGVkID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRFbWl0dGVkID0gZmFsc2U7XG4gIH1cblxuICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5maW5hbENhbGxlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUucHJlZmluaXNoZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmZpbmlzaGVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbWl0RXJyb3JOVChzZWxmLCBlcnIpIHtcbiAgc2VsZi5lbWl0KCdlcnJvcicsIGVycik7XG59XG5cbmZ1bmN0aW9uIGVycm9yT3JEZXN0cm95KHN0cmVhbSwgZXJyKSB7XG4gIC8vIFdlIGhhdmUgdGVzdHMgdGhhdCByZWx5IG9uIGVycm9ycyBiZWluZyBlbWl0dGVkXG4gIC8vIGluIHRoZSBzYW1lIHRpY2ssIHNvIGNoYW5naW5nIHRoaXMgaXMgc2VtdmVyIG1ham9yLlxuICAvLyBGb3Igbm93IHdoZW4geW91IG9wdC1pbiB0byBhdXRvRGVzdHJveSB3ZSBhbGxvd1xuICAvLyB0aGUgZXJyb3IgdG8gYmUgZW1pdHRlZCBuZXh0VGljay4gSW4gYSBmdXR1cmVcbiAgLy8gc2VtdmVyIG1ham9yIHVwZGF0ZSB3ZSBzaG91bGQgY2hhbmdlIHRoZSBkZWZhdWx0IHRvIHRoaXMuXG4gIHZhciByU3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIHZhciB3U3RhdGUgPSBzdHJlYW0uX3dyaXRhYmxlU3RhdGU7XG4gIGlmIChyU3RhdGUgJiYgclN0YXRlLmF1dG9EZXN0cm95IHx8IHdTdGF0ZSAmJiB3U3RhdGUuYXV0b0Rlc3Ryb3kpIHN0cmVhbS5kZXN0cm95KGVycik7ZWxzZSBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcnIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGVzdHJveTogZGVzdHJveSxcbiAgdW5kZXN0cm95OiB1bmRlc3Ryb3ksXG4gIGVycm9yT3JEZXN0cm95OiBlcnJvck9yRGVzdHJveVxufTsiLCIvLyBQb3J0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbWFmaW50b3NoL2VuZC1vZi1zdHJlYW0gd2l0aFxuLy8gcGVybWlzc2lvbiBmcm9tIHRoZSBhdXRob3IsIE1hdGhpYXMgQnV1cyAoQG1hZmludG9zaCkuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFUlJfU1RSRUFNX1BSRU1BVFVSRV9DTE9TRSA9IHJlcXVpcmUoJy4uLy4uLy4uL2Vycm9ycycpLmNvZGVzLkVSUl9TVFJFQU1fUFJFTUFUVVJFX0NMT1NFO1xuXG5mdW5jdGlvbiBvbmNlKGNhbGxiYWNrKSB7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY2FsbGVkKSByZXR1cm47XG4gICAgY2FsbGVkID0gdHJ1ZTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBjYWxsYmFjay5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbmZ1bmN0aW9uIGlzUmVxdWVzdChzdHJlYW0pIHtcbiAgcmV0dXJuIHN0cmVhbS5zZXRIZWFkZXIgJiYgdHlwZW9mIHN0cmVhbS5hYm9ydCA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24gZW9zKHN0cmVhbSwgb3B0cywgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKSByZXR1cm4gZW9zKHN0cmVhbSwgbnVsbCwgb3B0cyk7XG4gIGlmICghb3B0cykgb3B0cyA9IHt9O1xuICBjYWxsYmFjayA9IG9uY2UoY2FsbGJhY2sgfHwgbm9vcCk7XG4gIHZhciByZWFkYWJsZSA9IG9wdHMucmVhZGFibGUgfHwgb3B0cy5yZWFkYWJsZSAhPT0gZmFsc2UgJiYgc3RyZWFtLnJlYWRhYmxlO1xuICB2YXIgd3JpdGFibGUgPSBvcHRzLndyaXRhYmxlIHx8IG9wdHMud3JpdGFibGUgIT09IGZhbHNlICYmIHN0cmVhbS53cml0YWJsZTtcblxuICB2YXIgb25sZWdhY3lmaW5pc2ggPSBmdW5jdGlvbiBvbmxlZ2FjeWZpbmlzaCgpIHtcbiAgICBpZiAoIXN0cmVhbS53cml0YWJsZSkgb25maW5pc2goKTtcbiAgfTtcblxuICB2YXIgd3JpdGFibGVFbmRlZCA9IHN0cmVhbS5fd3JpdGFibGVTdGF0ZSAmJiBzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZmluaXNoZWQ7XG5cbiAgdmFyIG9uZmluaXNoID0gZnVuY3Rpb24gb25maW5pc2goKSB7XG4gICAgd3JpdGFibGUgPSBmYWxzZTtcbiAgICB3cml0YWJsZUVuZGVkID0gdHJ1ZTtcbiAgICBpZiAoIXJlYWRhYmxlKSBjYWxsYmFjay5jYWxsKHN0cmVhbSk7XG4gIH07XG5cbiAgdmFyIHJlYWRhYmxlRW5kZWQgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGUgJiYgc3RyZWFtLl9yZWFkYWJsZVN0YXRlLmVuZEVtaXR0ZWQ7XG5cbiAgdmFyIG9uZW5kID0gZnVuY3Rpb24gb25lbmQoKSB7XG4gICAgcmVhZGFibGUgPSBmYWxzZTtcbiAgICByZWFkYWJsZUVuZGVkID0gdHJ1ZTtcbiAgICBpZiAoIXdyaXRhYmxlKSBjYWxsYmFjay5jYWxsKHN0cmVhbSk7XG4gIH07XG5cbiAgdmFyIG9uZXJyb3IgPSBmdW5jdGlvbiBvbmVycm9yKGVycikge1xuICAgIGNhbGxiYWNrLmNhbGwoc3RyZWFtLCBlcnIpO1xuICB9O1xuXG4gIHZhciBvbmNsb3NlID0gZnVuY3Rpb24gb25jbG9zZSgpIHtcbiAgICB2YXIgZXJyO1xuXG4gICAgaWYgKHJlYWRhYmxlICYmICFyZWFkYWJsZUVuZGVkKSB7XG4gICAgICBpZiAoIXN0cmVhbS5fcmVhZGFibGVTdGF0ZSB8fCAhc3RyZWFtLl9yZWFkYWJsZVN0YXRlLmVuZGVkKSBlcnIgPSBuZXcgRVJSX1NUUkVBTV9QUkVNQVRVUkVfQ0xPU0UoKTtcbiAgICAgIHJldHVybiBjYWxsYmFjay5jYWxsKHN0cmVhbSwgZXJyKTtcbiAgICB9XG5cbiAgICBpZiAod3JpdGFibGUgJiYgIXdyaXRhYmxlRW5kZWQpIHtcbiAgICAgIGlmICghc3RyZWFtLl93cml0YWJsZVN0YXRlIHx8ICFzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZW5kZWQpIGVyciA9IG5ldyBFUlJfU1RSRUFNX1BSRU1BVFVSRV9DTE9TRSgpO1xuICAgICAgcmV0dXJuIGNhbGxiYWNrLmNhbGwoc3RyZWFtLCBlcnIpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgb25yZXF1ZXN0ID0gZnVuY3Rpb24gb25yZXF1ZXN0KCkge1xuICAgIHN0cmVhbS5yZXEub24oJ2ZpbmlzaCcsIG9uZmluaXNoKTtcbiAgfTtcblxuICBpZiAoaXNSZXF1ZXN0KHN0cmVhbSkpIHtcbiAgICBzdHJlYW0ub24oJ2NvbXBsZXRlJywgb25maW5pc2gpO1xuICAgIHN0cmVhbS5vbignYWJvcnQnLCBvbmNsb3NlKTtcbiAgICBpZiAoc3RyZWFtLnJlcSkgb25yZXF1ZXN0KCk7ZWxzZSBzdHJlYW0ub24oJ3JlcXVlc3QnLCBvbnJlcXVlc3QpO1xuICB9IGVsc2UgaWYgKHdyaXRhYmxlICYmICFzdHJlYW0uX3dyaXRhYmxlU3RhdGUpIHtcbiAgICAvLyBsZWdhY3kgc3RyZWFtc1xuICAgIHN0cmVhbS5vbignZW5kJywgb25sZWdhY3lmaW5pc2gpO1xuICAgIHN0cmVhbS5vbignY2xvc2UnLCBvbmxlZ2FjeWZpbmlzaCk7XG4gIH1cblxuICBzdHJlYW0ub24oJ2VuZCcsIG9uZW5kKTtcbiAgc3RyZWFtLm9uKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gIGlmIChvcHRzLmVycm9yICE9PSBmYWxzZSkgc3RyZWFtLm9uKCdlcnJvcicsIG9uZXJyb3IpO1xuICBzdHJlYW0ub24oJ2Nsb3NlJywgb25jbG9zZSk7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdjb21wbGV0ZScsIG9uZmluaXNoKTtcbiAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2Fib3J0Jywgb25jbG9zZSk7XG4gICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdyZXF1ZXN0Jywgb25yZXF1ZXN0KTtcbiAgICBpZiAoc3RyZWFtLnJlcSkgc3RyZWFtLnJlcS5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpO1xuICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25sZWdhY3lmaW5pc2gpO1xuICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmxlZ2FjeWZpbmlzaCk7XG4gICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmVuZCk7XG4gICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlb3M7IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcignUmVhZGFibGUuZnJvbSBpcyBub3QgYXZhaWxhYmxlIGluIHRoZSBicm93c2VyJylcbn07XG4iLCIvLyBQb3J0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbWFmaW50b3NoL3B1bXAgd2l0aFxuLy8gcGVybWlzc2lvbiBmcm9tIHRoZSBhdXRob3IsIE1hdGhpYXMgQnV1cyAoQG1hZmludG9zaCkuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlb3M7XG5cbmZ1bmN0aW9uIG9uY2UoY2FsbGJhY2spIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmIChjYWxsZWQpIHJldHVybjtcbiAgICBjYWxsZWQgPSB0cnVlO1xuICAgIGNhbGxiYWNrLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxudmFyIF9yZXF1aXJlJGNvZGVzID0gcmVxdWlyZSgnLi4vLi4vLi4vZXJyb3JzJykuY29kZXMsXG4gICAgRVJSX01JU1NJTkdfQVJHUyA9IF9yZXF1aXJlJGNvZGVzLkVSUl9NSVNTSU5HX0FSR1MsXG4gICAgRVJSX1NUUkVBTV9ERVNUUk9ZRUQgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfU1RSRUFNX0RFU1RST1lFRDtcblxuZnVuY3Rpb24gbm9vcChlcnIpIHtcbiAgLy8gUmV0aHJvdyB0aGUgZXJyb3IgaWYgaXQgZXhpc3RzIHRvIGF2b2lkIHN3YWxsb3dpbmcgaXRcbiAgaWYgKGVycikgdGhyb3cgZXJyO1xufVxuXG5mdW5jdGlvbiBpc1JlcXVlc3Qoc3RyZWFtKSB7XG4gIHJldHVybiBzdHJlYW0uc2V0SGVhZGVyICYmIHR5cGVvZiBzdHJlYW0uYWJvcnQgPT09ICdmdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIGRlc3Ryb3llcihzdHJlYW0sIHJlYWRpbmcsIHdyaXRpbmcsIGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrID0gb25jZShjYWxsYmFjayk7XG4gIHZhciBjbG9zZWQgPSBmYWxzZTtcbiAgc3RyZWFtLm9uKCdjbG9zZScsIGZ1bmN0aW9uICgpIHtcbiAgICBjbG9zZWQgPSB0cnVlO1xuICB9KTtcbiAgaWYgKGVvcyA9PT0gdW5kZWZpbmVkKSBlb3MgPSByZXF1aXJlKCcuL2VuZC1vZi1zdHJlYW0nKTtcbiAgZW9zKHN0cmVhbSwge1xuICAgIHJlYWRhYmxlOiByZWFkaW5nLFxuICAgIHdyaXRhYmxlOiB3cml0aW5nXG4gIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAoZXJyKSByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAgICBjbG9zZWQgPSB0cnVlO1xuICAgIGNhbGxiYWNrKCk7XG4gIH0pO1xuICB2YXIgZGVzdHJveWVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKGNsb3NlZCkgcmV0dXJuO1xuICAgIGlmIChkZXN0cm95ZWQpIHJldHVybjtcbiAgICBkZXN0cm95ZWQgPSB0cnVlOyAvLyByZXF1ZXN0LmRlc3Ryb3kganVzdCBkbyAuZW5kIC0gLmFib3J0IGlzIHdoYXQgd2Ugd2FudFxuXG4gICAgaWYgKGlzUmVxdWVzdChzdHJlYW0pKSByZXR1cm4gc3RyZWFtLmFib3J0KCk7XG4gICAgaWYgKHR5cGVvZiBzdHJlYW0uZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHN0cmVhbS5kZXN0cm95KCk7XG4gICAgY2FsbGJhY2soZXJyIHx8IG5ldyBFUlJfU1RSRUFNX0RFU1RST1lFRCgncGlwZScpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2FsbChmbikge1xuICBmbigpO1xufVxuXG5mdW5jdGlvbiBwaXBlKGZyb20sIHRvKSB7XG4gIHJldHVybiBmcm9tLnBpcGUodG8pO1xufVxuXG5mdW5jdGlvbiBwb3BDYWxsYmFjayhzdHJlYW1zKSB7XG4gIGlmICghc3RyZWFtcy5sZW5ndGgpIHJldHVybiBub29wO1xuICBpZiAodHlwZW9mIHN0cmVhbXNbc3RyZWFtcy5sZW5ndGggLSAxXSAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIG5vb3A7XG4gIHJldHVybiBzdHJlYW1zLnBvcCgpO1xufVxuXG5mdW5jdGlvbiBwaXBlbGluZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHN0cmVhbXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgc3RyZWFtc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciBjYWxsYmFjayA9IHBvcENhbGxiYWNrKHN0cmVhbXMpO1xuICBpZiAoQXJyYXkuaXNBcnJheShzdHJlYW1zWzBdKSkgc3RyZWFtcyA9IHN0cmVhbXNbMF07XG5cbiAgaWYgKHN0cmVhbXMubGVuZ3RoIDwgMikge1xuICAgIHRocm93IG5ldyBFUlJfTUlTU0lOR19BUkdTKCdzdHJlYW1zJyk7XG4gIH1cblxuICB2YXIgZXJyb3I7XG4gIHZhciBkZXN0cm95cyA9IHN0cmVhbXMubWFwKGZ1bmN0aW9uIChzdHJlYW0sIGkpIHtcbiAgICB2YXIgcmVhZGluZyA9IGkgPCBzdHJlYW1zLmxlbmd0aCAtIDE7XG4gICAgdmFyIHdyaXRpbmcgPSBpID4gMDtcbiAgICByZXR1cm4gZGVzdHJveWVyKHN0cmVhbSwgcmVhZGluZywgd3JpdGluZywgZnVuY3Rpb24gKGVycikge1xuICAgICAgaWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG4gICAgICBpZiAoZXJyKSBkZXN0cm95cy5mb3JFYWNoKGNhbGwpO1xuICAgICAgaWYgKHJlYWRpbmcpIHJldHVybjtcbiAgICAgIGRlc3Ryb3lzLmZvckVhY2goY2FsbCk7XG4gICAgICBjYWxsYmFjayhlcnJvcik7XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gc3RyZWFtcy5yZWR1Y2UocGlwZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGlwZWxpbmU7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgRVJSX0lOVkFMSURfT1BUX1ZBTFVFID0gcmVxdWlyZSgnLi4vLi4vLi4vZXJyb3JzJykuY29kZXMuRVJSX0lOVkFMSURfT1BUX1ZBTFVFO1xuXG5mdW5jdGlvbiBoaWdoV2F0ZXJNYXJrRnJvbShvcHRpb25zLCBpc0R1cGxleCwgZHVwbGV4S2V5KSB7XG4gIHJldHVybiBvcHRpb25zLmhpZ2hXYXRlck1hcmsgIT0gbnVsbCA/IG9wdGlvbnMuaGlnaFdhdGVyTWFyayA6IGlzRHVwbGV4ID8gb3B0aW9uc1tkdXBsZXhLZXldIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0SGlnaFdhdGVyTWFyayhzdGF0ZSwgb3B0aW9ucywgZHVwbGV4S2V5LCBpc0R1cGxleCkge1xuICB2YXIgaHdtID0gaGlnaFdhdGVyTWFya0Zyb20ob3B0aW9ucywgaXNEdXBsZXgsIGR1cGxleEtleSk7XG5cbiAgaWYgKGh3bSAhPSBudWxsKSB7XG4gICAgaWYgKCEoaXNGaW5pdGUoaHdtKSAmJiBNYXRoLmZsb29yKGh3bSkgPT09IGh3bSkgfHwgaHdtIDwgMCkge1xuICAgICAgdmFyIG5hbWUgPSBpc0R1cGxleCA/IGR1cGxleEtleSA6ICdoaWdoV2F0ZXJNYXJrJztcbiAgICAgIHRocm93IG5ldyBFUlJfSU5WQUxJRF9PUFRfVkFMVUUobmFtZSwgaHdtKTtcbiAgICB9XG5cbiAgICByZXR1cm4gTWF0aC5mbG9vcihod20pO1xuICB9IC8vIERlZmF1bHQgdmFsdWVcblxuXG4gIHJldHVybiBzdGF0ZS5vYmplY3RNb2RlID8gMTYgOiAxNiAqIDEwMjQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRIaWdoV2F0ZXJNYXJrOiBnZXRIaWdoV2F0ZXJNYXJrXG59OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9yZWFkYWJsZS5qcycpO1xuZXhwb3J0cy5TdHJlYW0gPSBleHBvcnRzO1xuZXhwb3J0cy5SZWFkYWJsZSA9IGV4cG9ydHM7XG5leHBvcnRzLldyaXRhYmxlID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV93cml0YWJsZS5qcycpO1xuZXhwb3J0cy5EdXBsZXggPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX2R1cGxleC5qcycpO1xuZXhwb3J0cy5UcmFuc2Zvcm0gPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qcycpO1xuZXhwb3J0cy5QYXNzVGhyb3VnaCA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanMnKTtcbmV4cG9ydHMuZmluaXNoZWQgPSByZXF1aXJlKCcuL2xpYi9pbnRlcm5hbC9zdHJlYW1zL2VuZC1vZi1zdHJlYW0uanMnKTtcbmV4cG9ydHMucGlwZWxpbmUgPSByZXF1aXJlKCcuL2xpYi9pbnRlcm5hbC9zdHJlYW1zL3BpcGVsaW5lLmpzJyk7XG4iLCJ2YXIgQ2xpZW50UmVxdWVzdCA9IHJlcXVpcmUoJy4vbGliL3JlcXVlc3QnKVxudmFyIHJlc3BvbnNlID0gcmVxdWlyZSgnLi9saWIvcmVzcG9uc2UnKVxudmFyIGV4dGVuZCA9IHJlcXVpcmUoJ3h0ZW5kJylcbnZhciBzdGF0dXNDb2RlcyA9IHJlcXVpcmUoJ2J1aWx0aW4tc3RhdHVzLWNvZGVzJylcbnZhciB1cmwgPSByZXF1aXJlKCd1cmwnKVxuXG52YXIgaHR0cCA9IGV4cG9ydHNcblxuaHR0cC5yZXF1ZXN0ID0gZnVuY3Rpb24gKG9wdHMsIGNiKSB7XG5cdGlmICh0eXBlb2Ygb3B0cyA9PT0gJ3N0cmluZycpXG5cdFx0b3B0cyA9IHVybC5wYXJzZShvcHRzKVxuXHRlbHNlXG5cdFx0b3B0cyA9IGV4dGVuZChvcHRzKVxuXG5cdC8vIE5vcm1hbGx5LCB0aGUgcGFnZSBpcyBsb2FkZWQgZnJvbSBodHRwIG9yIGh0dHBzLCBzbyBub3Qgc3BlY2lmeWluZyBhIHByb3RvY29sXG5cdC8vIHdpbGwgcmVzdWx0IGluIGEgKHZhbGlkKSBwcm90b2NvbC1yZWxhdGl2ZSB1cmwuIEhvd2V2ZXIsIHRoaXMgd29uJ3Qgd29yayBpZlxuXHQvLyB0aGUgcHJvdG9jb2wgaXMgc29tZXRoaW5nIGVsc2UsIGxpa2UgJ2ZpbGU6J1xuXHR2YXIgZGVmYXVsdFByb3RvY29sID0gZ2xvYmFsLmxvY2F0aW9uLnByb3RvY29sLnNlYXJjaCgvXmh0dHBzPzokLykgPT09IC0xID8gJ2h0dHA6JyA6ICcnXG5cblx0dmFyIHByb3RvY29sID0gb3B0cy5wcm90b2NvbCB8fCBkZWZhdWx0UHJvdG9jb2xcblx0dmFyIGhvc3QgPSBvcHRzLmhvc3RuYW1lIHx8IG9wdHMuaG9zdFxuXHR2YXIgcG9ydCA9IG9wdHMucG9ydFxuXHR2YXIgcGF0aCA9IG9wdHMucGF0aCB8fCAnLydcblxuXHQvLyBOZWNlc3NhcnkgZm9yIElQdjYgYWRkcmVzc2VzXG5cdGlmIChob3N0ICYmIGhvc3QuaW5kZXhPZignOicpICE9PSAtMSlcblx0XHRob3N0ID0gJ1snICsgaG9zdCArICddJ1xuXG5cdC8vIFRoaXMgbWF5IGJlIGEgcmVsYXRpdmUgdXJsLiBUaGUgYnJvd3NlciBzaG91bGQgYWx3YXlzIGJlIGFibGUgdG8gaW50ZXJwcmV0IGl0IGNvcnJlY3RseS5cblx0b3B0cy51cmwgPSAoaG9zdCA/IChwcm90b2NvbCArICcvLycgKyBob3N0KSA6ICcnKSArIChwb3J0ID8gJzonICsgcG9ydCA6ICcnKSArIHBhdGhcblx0b3B0cy5tZXRob2QgPSAob3B0cy5tZXRob2QgfHwgJ0dFVCcpLnRvVXBwZXJDYXNlKClcblx0b3B0cy5oZWFkZXJzID0gb3B0cy5oZWFkZXJzIHx8IHt9XG5cblx0Ly8gQWxzbyB2YWxpZCBvcHRzLmF1dGgsIG9wdHMubW9kZVxuXG5cdHZhciByZXEgPSBuZXcgQ2xpZW50UmVxdWVzdChvcHRzKVxuXHRpZiAoY2IpXG5cdFx0cmVxLm9uKCdyZXNwb25zZScsIGNiKVxuXHRyZXR1cm4gcmVxXG59XG5cbmh0dHAuZ2V0ID0gZnVuY3Rpb24gZ2V0IChvcHRzLCBjYikge1xuXHR2YXIgcmVxID0gaHR0cC5yZXF1ZXN0KG9wdHMsIGNiKVxuXHRyZXEuZW5kKClcblx0cmV0dXJuIHJlcVxufVxuXG5odHRwLkNsaWVudFJlcXVlc3QgPSBDbGllbnRSZXF1ZXN0XG5odHRwLkluY29taW5nTWVzc2FnZSA9IHJlc3BvbnNlLkluY29taW5nTWVzc2FnZVxuXG5odHRwLkFnZW50ID0gZnVuY3Rpb24gKCkge31cbmh0dHAuQWdlbnQuZGVmYXVsdE1heFNvY2tldHMgPSA0XG5cbmh0dHAuZ2xvYmFsQWdlbnQgPSBuZXcgaHR0cC5BZ2VudCgpXG5cbmh0dHAuU1RBVFVTX0NPREVTID0gc3RhdHVzQ29kZXNcblxuaHR0cC5NRVRIT0RTID0gW1xuXHQnQ0hFQ0tPVVQnLFxuXHQnQ09OTkVDVCcsXG5cdCdDT1BZJyxcblx0J0RFTEVURScsXG5cdCdHRVQnLFxuXHQnSEVBRCcsXG5cdCdMT0NLJyxcblx0J00tU0VBUkNIJyxcblx0J01FUkdFJyxcblx0J01LQUNUSVZJVFknLFxuXHQnTUtDT0wnLFxuXHQnTU9WRScsXG5cdCdOT1RJRlknLFxuXHQnT1BUSU9OUycsXG5cdCdQQVRDSCcsXG5cdCdQT1NUJyxcblx0J1BST1BGSU5EJyxcblx0J1BST1BQQVRDSCcsXG5cdCdQVVJHRScsXG5cdCdQVVQnLFxuXHQnUkVQT1JUJyxcblx0J1NFQVJDSCcsXG5cdCdTVUJTQ1JJQkUnLFxuXHQnVFJBQ0UnLFxuXHQnVU5MT0NLJyxcblx0J1VOU1VCU0NSSUJFJ1xuXSIsImV4cG9ydHMuZmV0Y2ggPSBpc0Z1bmN0aW9uKGdsb2JhbC5mZXRjaCkgJiYgaXNGdW5jdGlvbihnbG9iYWwuUmVhZGFibGVTdHJlYW0pXG5cbmV4cG9ydHMud3JpdGFibGVTdHJlYW0gPSBpc0Z1bmN0aW9uKGdsb2JhbC5Xcml0YWJsZVN0cmVhbSlcblxuZXhwb3J0cy5hYm9ydENvbnRyb2xsZXIgPSBpc0Z1bmN0aW9uKGdsb2JhbC5BYm9ydENvbnRyb2xsZXIpXG5cbi8vIFRoZSB4aHIgcmVxdWVzdCB0byBleGFtcGxlLmNvbSBtYXkgdmlvbGF0ZSBzb21lIHJlc3RyaWN0aXZlIENTUCBjb25maWd1cmF0aW9ucyxcbi8vIHNvIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBicm93c2VyIHRoYXQgc3VwcG9ydHMgYGZldGNoYCwgYXZvaWQgY2FsbGluZyBnZXRYSFIoKVxuLy8gYW5kIGFzc3VtZSBzdXBwb3J0IGZvciBjZXJ0YWluIGZlYXR1cmVzIGJlbG93LlxudmFyIHhoclxuZnVuY3Rpb24gZ2V0WEhSICgpIHtcblx0Ly8gQ2FjaGUgdGhlIHhociB2YWx1ZVxuXHRpZiAoeGhyICE9PSB1bmRlZmluZWQpIHJldHVybiB4aHJcblxuXHRpZiAoZ2xvYmFsLlhNTEh0dHBSZXF1ZXN0KSB7XG5cdFx0eGhyID0gbmV3IGdsb2JhbC5YTUxIdHRwUmVxdWVzdCgpXG5cdFx0Ly8gSWYgWERvbWFpblJlcXVlc3QgaXMgYXZhaWxhYmxlIChpZSBvbmx5LCB3aGVyZSB4aHIgbWlnaHQgbm90IHdvcmtcblx0XHQvLyBjcm9zcyBkb21haW4pLCB1c2UgdGhlIHBhZ2UgbG9jYXRpb24uIE90aGVyd2lzZSB1c2UgZXhhbXBsZS5jb21cblx0XHQvLyBOb3RlOiB0aGlzIGRvZXNuJ3QgYWN0dWFsbHkgbWFrZSBhbiBodHRwIHJlcXVlc3QuXG5cdFx0dHJ5IHtcblx0XHRcdHhoci5vcGVuKCdHRVQnLCBnbG9iYWwuWERvbWFpblJlcXVlc3QgPyAnLycgOiAnaHR0cHM6Ly9leGFtcGxlLmNvbScpXG5cdFx0fSBjYXRjaChlKSB7XG5cdFx0XHR4aHIgPSBudWxsXG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdC8vIFNlcnZpY2Ugd29ya2VycyBkb24ndCBoYXZlIFhIUlxuXHRcdHhociA9IG51bGxcblx0fVxuXHRyZXR1cm4geGhyXG59XG5cbmZ1bmN0aW9uIGNoZWNrVHlwZVN1cHBvcnQgKHR5cGUpIHtcblx0dmFyIHhociA9IGdldFhIUigpXG5cdGlmICgheGhyKSByZXR1cm4gZmFsc2Vcblx0dHJ5IHtcblx0XHR4aHIucmVzcG9uc2VUeXBlID0gdHlwZVxuXHRcdHJldHVybiB4aHIucmVzcG9uc2VUeXBlID09PSB0eXBlXG5cdH0gY2F0Y2ggKGUpIHt9XG5cdHJldHVybiBmYWxzZVxufVxuXG4vLyBJZiBmZXRjaCBpcyBzdXBwb3J0ZWQsIHRoZW4gYXJyYXlidWZmZXIgd2lsbCBiZSBzdXBwb3J0ZWQgdG9vLiBTa2lwIGNhbGxpbmdcbi8vIGNoZWNrVHlwZVN1cHBvcnQoKSwgc2luY2UgdGhhdCBjYWxscyBnZXRYSFIoKS5cbmV4cG9ydHMuYXJyYXlidWZmZXIgPSBleHBvcnRzLmZldGNoIHx8IGNoZWNrVHlwZVN1cHBvcnQoJ2FycmF5YnVmZmVyJylcblxuLy8gVGhlc2UgbmV4dCB0d28gdGVzdHMgdW5hdm9pZGFibHkgc2hvdyB3YXJuaW5ncyBpbiBDaHJvbWUuIFNpbmNlIGZldGNoIHdpbGwgYWx3YXlzXG4vLyBiZSB1c2VkIGlmIGl0J3MgYXZhaWxhYmxlLCBqdXN0IHJldHVybiBmYWxzZSBmb3IgdGhlc2UgdG8gYXZvaWQgdGhlIHdhcm5pbmdzLlxuZXhwb3J0cy5tc3N0cmVhbSA9ICFleHBvcnRzLmZldGNoICYmIGNoZWNrVHlwZVN1cHBvcnQoJ21zLXN0cmVhbScpXG5leHBvcnRzLm1vemNodW5rZWRhcnJheWJ1ZmZlciA9ICFleHBvcnRzLmZldGNoICYmIGNoZWNrVHlwZVN1cHBvcnQoJ21vei1jaHVua2VkLWFycmF5YnVmZmVyJylcblxuLy8gSWYgZmV0Y2ggaXMgc3VwcG9ydGVkLCB0aGVuIG92ZXJyaWRlTWltZVR5cGUgd2lsbCBiZSBzdXBwb3J0ZWQgdG9vLiBTa2lwIGNhbGxpbmdcbi8vIGdldFhIUigpLlxuZXhwb3J0cy5vdmVycmlkZU1pbWVUeXBlID0gZXhwb3J0cy5mZXRjaCB8fCAoZ2V0WEhSKCkgPyBpc0Z1bmN0aW9uKGdldFhIUigpLm92ZXJyaWRlTWltZVR5cGUpIDogZmFsc2UpXG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24gKHZhbHVlKSB7XG5cdHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbidcbn1cblxueGhyID0gbnVsbCAvLyBIZWxwIGdjXG4iLCJ2YXIgY2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4vY2FwYWJpbGl0eScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgcmVzcG9uc2UgPSByZXF1aXJlKCcuL3Jlc3BvbnNlJylcbnZhciBzdHJlYW0gPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0nKVxuXG52YXIgSW5jb21pbmdNZXNzYWdlID0gcmVzcG9uc2UuSW5jb21pbmdNZXNzYWdlXG52YXIgclN0YXRlcyA9IHJlc3BvbnNlLnJlYWR5U3RhdGVzXG5cbmZ1bmN0aW9uIGRlY2lkZU1vZGUgKHByZWZlckJpbmFyeSwgdXNlRmV0Y2gpIHtcblx0aWYgKGNhcGFiaWxpdHkuZmV0Y2ggJiYgdXNlRmV0Y2gpIHtcblx0XHRyZXR1cm4gJ2ZldGNoJ1xuXHR9IGVsc2UgaWYgKGNhcGFiaWxpdHkubW96Y2h1bmtlZGFycmF5YnVmZmVyKSB7XG5cdFx0cmV0dXJuICdtb3otY2h1bmtlZC1hcnJheWJ1ZmZlcidcblx0fSBlbHNlIGlmIChjYXBhYmlsaXR5Lm1zc3RyZWFtKSB7XG5cdFx0cmV0dXJuICdtcy1zdHJlYW0nXG5cdH0gZWxzZSBpZiAoY2FwYWJpbGl0eS5hcnJheWJ1ZmZlciAmJiBwcmVmZXJCaW5hcnkpIHtcblx0XHRyZXR1cm4gJ2FycmF5YnVmZmVyJ1xuXHR9IGVsc2Uge1xuXHRcdHJldHVybiAndGV4dCdcblx0fVxufVxuXG52YXIgQ2xpZW50UmVxdWVzdCA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdHMpIHtcblx0dmFyIHNlbGYgPSB0aGlzXG5cdHN0cmVhbS5Xcml0YWJsZS5jYWxsKHNlbGYpXG5cblx0c2VsZi5fb3B0cyA9IG9wdHNcblx0c2VsZi5fYm9keSA9IFtdXG5cdHNlbGYuX2hlYWRlcnMgPSB7fVxuXHRpZiAob3B0cy5hdXRoKVxuXHRcdHNlbGYuc2V0SGVhZGVyKCdBdXRob3JpemF0aW9uJywgJ0Jhc2ljICcgKyBCdWZmZXIuZnJvbShvcHRzLmF1dGgpLnRvU3RyaW5nKCdiYXNlNjQnKSlcblx0T2JqZWN0LmtleXMob3B0cy5oZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG5cdFx0c2VsZi5zZXRIZWFkZXIobmFtZSwgb3B0cy5oZWFkZXJzW25hbWVdKVxuXHR9KVxuXG5cdHZhciBwcmVmZXJCaW5hcnlcblx0dmFyIHVzZUZldGNoID0gdHJ1ZVxuXHRpZiAob3B0cy5tb2RlID09PSAnZGlzYWJsZS1mZXRjaCcgfHwgKCdyZXF1ZXN0VGltZW91dCcgaW4gb3B0cyAmJiAhY2FwYWJpbGl0eS5hYm9ydENvbnRyb2xsZXIpKSB7XG5cdFx0Ly8gSWYgdGhlIHVzZSBvZiBYSFIgc2hvdWxkIGJlIHByZWZlcnJlZC4gTm90IHR5cGljYWxseSBuZWVkZWQuXG5cdFx0dXNlRmV0Y2ggPSBmYWxzZVxuXHRcdHByZWZlckJpbmFyeSA9IHRydWVcblx0fSBlbHNlIGlmIChvcHRzLm1vZGUgPT09ICdwcmVmZXItc3RyZWFtaW5nJykge1xuXHRcdC8vIElmIHN0cmVhbWluZyBpcyBhIGhpZ2ggcHJpb3JpdHkgYnV0IGJpbmFyeSBjb21wYXRpYmlsaXR5IGFuZFxuXHRcdC8vIHRoZSBhY2N1cmFjeSBvZiB0aGUgJ2NvbnRlbnQtdHlwZScgaGVhZGVyIGFyZW4ndFxuXHRcdHByZWZlckJpbmFyeSA9IGZhbHNlXG5cdH0gZWxzZSBpZiAob3B0cy5tb2RlID09PSAnYWxsb3ctd3JvbmctY29udGVudC10eXBlJykge1xuXHRcdC8vIElmIHN0cmVhbWluZyBpcyBtb3JlIGltcG9ydGFudCB0aGFuIHByZXNlcnZpbmcgdGhlICdjb250ZW50LXR5cGUnIGhlYWRlclxuXHRcdHByZWZlckJpbmFyeSA9ICFjYXBhYmlsaXR5Lm92ZXJyaWRlTWltZVR5cGVcblx0fSBlbHNlIGlmICghb3B0cy5tb2RlIHx8IG9wdHMubW9kZSA9PT0gJ2RlZmF1bHQnIHx8IG9wdHMubW9kZSA9PT0gJ3ByZWZlci1mYXN0Jykge1xuXHRcdC8vIFVzZSBiaW5hcnkgaWYgdGV4dCBzdHJlYW1pbmcgbWF5IGNvcnJ1cHQgZGF0YSBvciB0aGUgY29udGVudC10eXBlIGhlYWRlciwgb3IgZm9yIHNwZWVkXG5cdFx0cHJlZmVyQmluYXJ5ID0gdHJ1ZVxuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcignSW52YWxpZCB2YWx1ZSBmb3Igb3B0cy5tb2RlJylcblx0fVxuXHRzZWxmLl9tb2RlID0gZGVjaWRlTW9kZShwcmVmZXJCaW5hcnksIHVzZUZldGNoKVxuXHRzZWxmLl9mZXRjaFRpbWVyID0gbnVsbFxuXHRzZWxmLl9zb2NrZXRUaW1lb3V0ID0gbnVsbFxuXHRzZWxmLl9zb2NrZXRUaW1lciA9IG51bGxcblxuXHRzZWxmLm9uKCdmaW5pc2gnLCBmdW5jdGlvbiAoKSB7XG5cdFx0c2VsZi5fb25GaW5pc2goKVxuXHR9KVxufVxuXG5pbmhlcml0cyhDbGllbnRSZXF1ZXN0LCBzdHJlYW0uV3JpdGFibGUpXG5cbkNsaWVudFJlcXVlc3QucHJvdG90eXBlLnNldEhlYWRlciA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuXHR2YXIgc2VsZiA9IHRoaXNcblx0dmFyIGxvd2VyTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKVxuXHQvLyBUaGlzIGNoZWNrIGlzIG5vdCBuZWNlc3NhcnksIGJ1dCBpdCBwcmV2ZW50cyB3YXJuaW5ncyBmcm9tIGJyb3dzZXJzIGFib3V0IHNldHRpbmcgdW5zYWZlXG5cdC8vIGhlYWRlcnMuIFRvIGJlIGhvbmVzdCBJJ20gbm90IGVudGlyZWx5IHN1cmUgaGlkaW5nIHRoZXNlIHdhcm5pbmdzIGlzIGEgZ29vZCB0aGluZywgYnV0XG5cdC8vIGh0dHAtYnJvd3NlcmlmeSBkaWQgaXQsIHNvIEkgd2lsbCB0b28uXG5cdGlmICh1bnNhZmVIZWFkZXJzLmluZGV4T2YobG93ZXJOYW1lKSAhPT0gLTEpXG5cdFx0cmV0dXJuXG5cblx0c2VsZi5faGVhZGVyc1tsb3dlck5hbWVdID0ge1xuXHRcdG5hbWU6IG5hbWUsXG5cdFx0dmFsdWU6IHZhbHVlXG5cdH1cbn1cblxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuZ2V0SGVhZGVyID0gZnVuY3Rpb24gKG5hbWUpIHtcblx0dmFyIGhlYWRlciA9IHRoaXMuX2hlYWRlcnNbbmFtZS50b0xvd2VyQ2FzZSgpXVxuXHRpZiAoaGVhZGVyKVxuXHRcdHJldHVybiBoZWFkZXIudmFsdWVcblx0cmV0dXJuIG51bGxcbn1cblxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUucmVtb3ZlSGVhZGVyID0gZnVuY3Rpb24gKG5hbWUpIHtcblx0dmFyIHNlbGYgPSB0aGlzXG5cdGRlbGV0ZSBzZWxmLl9oZWFkZXJzW25hbWUudG9Mb3dlckNhc2UoKV1cbn1cblxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuX29uRmluaXNoID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgc2VsZiA9IHRoaXNcblxuXHRpZiAoc2VsZi5fZGVzdHJveWVkKVxuXHRcdHJldHVyblxuXHR2YXIgb3B0cyA9IHNlbGYuX29wdHNcblxuXHRpZiAoJ3RpbWVvdXQnIGluIG9wdHMgJiYgb3B0cy50aW1lb3V0ICE9PSAwKSB7XG5cdFx0c2VsZi5zZXRUaW1lb3V0KG9wdHMudGltZW91dClcblx0fVxuXG5cdHZhciBoZWFkZXJzT2JqID0gc2VsZi5faGVhZGVyc1xuXHR2YXIgYm9keSA9IG51bGxcblx0aWYgKG9wdHMubWV0aG9kICE9PSAnR0VUJyAmJiBvcHRzLm1ldGhvZCAhPT0gJ0hFQUQnKSB7XG4gICAgICAgIGJvZHkgPSBuZXcgQmxvYihzZWxmLl9ib2R5LCB7XG4gICAgICAgICAgICB0eXBlOiAoaGVhZGVyc09ialsnY29udGVudC10eXBlJ10gfHwge30pLnZhbHVlIHx8ICcnXG4gICAgICAgIH0pO1xuICAgIH1cblxuXHQvLyBjcmVhdGUgZmxhdHRlbmVkIGxpc3Qgb2YgaGVhZGVyc1xuXHR2YXIgaGVhZGVyc0xpc3QgPSBbXVxuXHRPYmplY3Qua2V5cyhoZWFkZXJzT2JqKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXlOYW1lKSB7XG5cdFx0dmFyIG5hbWUgPSBoZWFkZXJzT2JqW2tleU5hbWVdLm5hbWVcblx0XHR2YXIgdmFsdWUgPSBoZWFkZXJzT2JqW2tleU5hbWVdLnZhbHVlXG5cdFx0aWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG5cdFx0XHR2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7XG5cdFx0XHRcdGhlYWRlcnNMaXN0LnB1c2goW25hbWUsIHZdKVxuXHRcdFx0fSlcblx0XHR9IGVsc2Uge1xuXHRcdFx0aGVhZGVyc0xpc3QucHVzaChbbmFtZSwgdmFsdWVdKVxuXHRcdH1cblx0fSlcblxuXHRpZiAoc2VsZi5fbW9kZSA9PT0gJ2ZldGNoJykge1xuXHRcdHZhciBzaWduYWwgPSBudWxsXG5cdFx0aWYgKGNhcGFiaWxpdHkuYWJvcnRDb250cm9sbGVyKSB7XG5cdFx0XHR2YXIgY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKVxuXHRcdFx0c2lnbmFsID0gY29udHJvbGxlci5zaWduYWxcblx0XHRcdHNlbGYuX2ZldGNoQWJvcnRDb250cm9sbGVyID0gY29udHJvbGxlclxuXG5cdFx0XHRpZiAoJ3JlcXVlc3RUaW1lb3V0JyBpbiBvcHRzICYmIG9wdHMucmVxdWVzdFRpbWVvdXQgIT09IDApIHtcblx0XHRcdFx0c2VsZi5fZmV0Y2hUaW1lciA9IGdsb2JhbC5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRzZWxmLmVtaXQoJ3JlcXVlc3RUaW1lb3V0Jylcblx0XHRcdFx0XHRpZiAoc2VsZi5fZmV0Y2hBYm9ydENvbnRyb2xsZXIpXG5cdFx0XHRcdFx0XHRzZWxmLl9mZXRjaEFib3J0Q29udHJvbGxlci5hYm9ydCgpXG5cdFx0XHRcdH0sIG9wdHMucmVxdWVzdFRpbWVvdXQpXG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Z2xvYmFsLmZldGNoKHNlbGYuX29wdHMudXJsLCB7XG5cdFx0XHRtZXRob2Q6IHNlbGYuX29wdHMubWV0aG9kLFxuXHRcdFx0aGVhZGVyczogaGVhZGVyc0xpc3QsXG5cdFx0XHRib2R5OiBib2R5IHx8IHVuZGVmaW5lZCxcblx0XHRcdG1vZGU6ICdjb3JzJyxcblx0XHRcdGNyZWRlbnRpYWxzOiBvcHRzLndpdGhDcmVkZW50aWFscyA/ICdpbmNsdWRlJyA6ICdzYW1lLW9yaWdpbicsXG5cdFx0XHRzaWduYWw6IHNpZ25hbFxuXHRcdH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG5cdFx0XHRzZWxmLl9mZXRjaFJlc3BvbnNlID0gcmVzcG9uc2Vcblx0XHRcdHNlbGYuX3Jlc2V0VGltZXJzKGZhbHNlKVxuXHRcdFx0c2VsZi5fY29ubmVjdCgpXG5cdFx0fSwgZnVuY3Rpb24gKHJlYXNvbikge1xuXHRcdFx0c2VsZi5fcmVzZXRUaW1lcnModHJ1ZSlcblx0XHRcdGlmICghc2VsZi5fZGVzdHJveWVkKVxuXHRcdFx0XHRzZWxmLmVtaXQoJ2Vycm9yJywgcmVhc29uKVxuXHRcdH0pXG5cdH0gZWxzZSB7XG5cdFx0dmFyIHhociA9IHNlbGYuX3hociA9IG5ldyBnbG9iYWwuWE1MSHR0cFJlcXVlc3QoKVxuXHRcdHRyeSB7XG5cdFx0XHR4aHIub3BlbihzZWxmLl9vcHRzLm1ldGhvZCwgc2VsZi5fb3B0cy51cmwsIHRydWUpXG5cdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0c2VsZi5lbWl0KCdlcnJvcicsIGVycilcblx0XHRcdH0pXG5cdFx0XHRyZXR1cm5cblx0XHR9XG5cblx0XHQvLyBDYW4ndCBzZXQgcmVzcG9uc2VUeXBlIG9uIHJlYWxseSBvbGQgYnJvd3NlcnNcblx0XHRpZiAoJ3Jlc3BvbnNlVHlwZScgaW4geGhyKVxuXHRcdFx0eGhyLnJlc3BvbnNlVHlwZSA9IHNlbGYuX21vZGVcblxuXHRcdGlmICgnd2l0aENyZWRlbnRpYWxzJyBpbiB4aHIpXG5cdFx0XHR4aHIud2l0aENyZWRlbnRpYWxzID0gISFvcHRzLndpdGhDcmVkZW50aWFsc1xuXG5cdFx0aWYgKHNlbGYuX21vZGUgPT09ICd0ZXh0JyAmJiAnb3ZlcnJpZGVNaW1lVHlwZScgaW4geGhyKVxuXHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoJ3RleHQvcGxhaW47IGNoYXJzZXQ9eC11c2VyLWRlZmluZWQnKVxuXG5cdFx0aWYgKCdyZXF1ZXN0VGltZW91dCcgaW4gb3B0cykge1xuXHRcdFx0eGhyLnRpbWVvdXQgPSBvcHRzLnJlcXVlc3RUaW1lb3V0XG5cdFx0XHR4aHIub250aW1lb3V0ID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRzZWxmLmVtaXQoJ3JlcXVlc3RUaW1lb3V0Jylcblx0XHRcdH1cblx0XHR9XG5cblx0XHRoZWFkZXJzTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChoZWFkZXIpIHtcblx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKGhlYWRlclswXSwgaGVhZGVyWzFdKVxuXHRcdH0pXG5cblx0XHRzZWxmLl9yZXNwb25zZSA9IG51bGxcblx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0c3dpdGNoICh4aHIucmVhZHlTdGF0ZSkge1xuXHRcdFx0XHRjYXNlIHJTdGF0ZXMuTE9BRElORzpcblx0XHRcdFx0Y2FzZSByU3RhdGVzLkRPTkU6XG5cdFx0XHRcdFx0c2VsZi5fb25YSFJQcm9ncmVzcygpXG5cdFx0XHRcdFx0YnJlYWtcblx0XHRcdH1cblx0XHR9XG5cdFx0Ly8gTmVjZXNzYXJ5IGZvciBzdHJlYW1pbmcgaW4gRmlyZWZveCwgc2luY2UgeGhyLnJlc3BvbnNlIGlzIE9OTFkgZGVmaW5lZFxuXHRcdC8vIGluIG9ucHJvZ3Jlc3MsIG5vdCBpbiBvbnJlYWR5c3RhdGVjaGFuZ2Ugd2l0aCB4aHIucmVhZHlTdGF0ZSA9IDNcblx0XHRpZiAoc2VsZi5fbW9kZSA9PT0gJ21vei1jaHVua2VkLWFycmF5YnVmZmVyJykge1xuXHRcdFx0eGhyLm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHNlbGYuX29uWEhSUHJvZ3Jlc3MoKVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHhoci5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0aWYgKHNlbGYuX2Rlc3Ryb3llZClcblx0XHRcdFx0cmV0dXJuXG5cdFx0XHRzZWxmLl9yZXNldFRpbWVycyh0cnVlKVxuXHRcdFx0c2VsZi5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignWEhSIGVycm9yJykpXG5cdFx0fVxuXG5cdFx0dHJ5IHtcblx0XHRcdHhoci5zZW5kKGJvZHkpXG5cdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0c2VsZi5lbWl0KCdlcnJvcicsIGVycilcblx0XHRcdH0pXG5cdFx0XHRyZXR1cm5cblx0XHR9XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgeGhyLnN0YXR1cyBpcyByZWFkYWJsZSBhbmQgbm9uLXplcm8sIGluZGljYXRpbmcgbm8gZXJyb3IuXG4gKiBFdmVuIHRob3VnaCB0aGUgc3BlYyBzYXlzIGl0IHNob3VsZCBiZSBhdmFpbGFibGUgaW4gcmVhZHlTdGF0ZSAzLFxuICogYWNjZXNzaW5nIGl0IHRocm93cyBhbiBleGNlcHRpb24gaW4gSUU4XG4gKi9cbmZ1bmN0aW9uIHN0YXR1c1ZhbGlkICh4aHIpIHtcblx0dHJ5IHtcblx0XHR2YXIgc3RhdHVzID0geGhyLnN0YXR1c1xuXHRcdHJldHVybiAoc3RhdHVzICE9PSBudWxsICYmIHN0YXR1cyAhPT0gMClcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZVxuXHR9XG59XG5cbkNsaWVudFJlcXVlc3QucHJvdG90eXBlLl9vblhIUlByb2dyZXNzID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgc2VsZiA9IHRoaXNcblxuXHRzZWxmLl9yZXNldFRpbWVycyhmYWxzZSlcblxuXHRpZiAoIXN0YXR1c1ZhbGlkKHNlbGYuX3hocikgfHwgc2VsZi5fZGVzdHJveWVkKVxuXHRcdHJldHVyblxuXG5cdGlmICghc2VsZi5fcmVzcG9uc2UpXG5cdFx0c2VsZi5fY29ubmVjdCgpXG5cblx0c2VsZi5fcmVzcG9uc2UuX29uWEhSUHJvZ3Jlc3Moc2VsZi5fcmVzZXRUaW1lcnMuYmluZChzZWxmKSlcbn1cblxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuX2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBzZWxmID0gdGhpc1xuXG5cdGlmIChzZWxmLl9kZXN0cm95ZWQpXG5cdFx0cmV0dXJuXG5cblx0c2VsZi5fcmVzcG9uc2UgPSBuZXcgSW5jb21pbmdNZXNzYWdlKHNlbGYuX3hociwgc2VsZi5fZmV0Y2hSZXNwb25zZSwgc2VsZi5fbW9kZSwgc2VsZi5fcmVzZXRUaW1lcnMuYmluZChzZWxmKSlcblx0c2VsZi5fcmVzcG9uc2Uub24oJ2Vycm9yJywgZnVuY3Rpb24oZXJyKSB7XG5cdFx0c2VsZi5lbWl0KCdlcnJvcicsIGVycilcblx0fSlcblxuXHRzZWxmLmVtaXQoJ3Jlc3BvbnNlJywgc2VsZi5fcmVzcG9uc2UpXG59XG5cbkNsaWVudFJlcXVlc3QucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG5cdHZhciBzZWxmID0gdGhpc1xuXG5cdHNlbGYuX2JvZHkucHVzaChjaHVuaylcblx0Y2IoKVxufVxuXG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5fcmVzZXRUaW1lcnMgPSBmdW5jdGlvbiAoZG9uZSkge1xuXHR2YXIgc2VsZiA9IHRoaXNcblxuXHRnbG9iYWwuY2xlYXJUaW1lb3V0KHNlbGYuX3NvY2tldFRpbWVyKVxuXHRzZWxmLl9zb2NrZXRUaW1lciA9IG51bGxcblxuXHRpZiAoZG9uZSkge1xuXHRcdGdsb2JhbC5jbGVhclRpbWVvdXQoc2VsZi5fZmV0Y2hUaW1lcilcblx0XHRzZWxmLl9mZXRjaFRpbWVyID0gbnVsbFxuXHR9IGVsc2UgaWYgKHNlbGYuX3NvY2tldFRpbWVvdXQpIHtcblx0XHRzZWxmLl9zb2NrZXRUaW1lciA9IGdsb2JhbC5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0XHRcdHNlbGYuZW1pdCgndGltZW91dCcpXG5cdFx0fSwgc2VsZi5fc29ja2V0VGltZW91dClcblx0fVxufVxuXG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5hYm9ydCA9IENsaWVudFJlcXVlc3QucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyKSB7XG5cdHZhciBzZWxmID0gdGhpc1xuXHRzZWxmLl9kZXN0cm95ZWQgPSB0cnVlXG5cdHNlbGYuX3Jlc2V0VGltZXJzKHRydWUpXG5cdGlmIChzZWxmLl9yZXNwb25zZSlcblx0XHRzZWxmLl9yZXNwb25zZS5fZGVzdHJveWVkID0gdHJ1ZVxuXHRpZiAoc2VsZi5feGhyKVxuXHRcdHNlbGYuX3hoci5hYm9ydCgpXG5cdGVsc2UgaWYgKHNlbGYuX2ZldGNoQWJvcnRDb250cm9sbGVyKVxuXHRcdHNlbGYuX2ZldGNoQWJvcnRDb250cm9sbGVyLmFib3J0KClcblxuXHRpZiAoZXJyKVxuXHRcdHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpXG59XG5cbkNsaWVudFJlcXVlc3QucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uIChkYXRhLCBlbmNvZGluZywgY2IpIHtcblx0dmFyIHNlbGYgPSB0aGlzXG5cdGlmICh0eXBlb2YgZGF0YSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdGNiID0gZGF0YVxuXHRcdGRhdGEgPSB1bmRlZmluZWRcblx0fVxuXG5cdHN0cmVhbS5Xcml0YWJsZS5wcm90b3R5cGUuZW5kLmNhbGwoc2VsZiwgZGF0YSwgZW5jb2RpbmcsIGNiKVxufVxuXG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5zZXRUaW1lb3V0ID0gZnVuY3Rpb24gKHRpbWVvdXQsIGNiKSB7XG5cdHZhciBzZWxmID0gdGhpc1xuXG5cdGlmIChjYilcblx0XHRzZWxmLm9uY2UoJ3RpbWVvdXQnLCBjYilcblxuXHRzZWxmLl9zb2NrZXRUaW1lb3V0ID0gdGltZW91dFxuXHRzZWxmLl9yZXNldFRpbWVycyhmYWxzZSlcbn1cblxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuZmx1c2hIZWFkZXJzID0gZnVuY3Rpb24gKCkge31cbkNsaWVudFJlcXVlc3QucHJvdG90eXBlLnNldE5vRGVsYXkgPSBmdW5jdGlvbiAoKSB7fVxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuc2V0U29ja2V0S2VlcEFsaXZlID0gZnVuY3Rpb24gKCkge31cblxuLy8gVGFrZW4gZnJvbSBodHRwOi8vd3d3LnczLm9yZy9UUi9YTUxIdHRwUmVxdWVzdC8jdGhlLXNldHJlcXVlc3RoZWFkZXIlMjglMjktbWV0aG9kXG52YXIgdW5zYWZlSGVhZGVycyA9IFtcblx0J2FjY2VwdC1jaGFyc2V0Jyxcblx0J2FjY2VwdC1lbmNvZGluZycsXG5cdCdhY2Nlc3MtY29udHJvbC1yZXF1ZXN0LWhlYWRlcnMnLFxuXHQnYWNjZXNzLWNvbnRyb2wtcmVxdWVzdC1tZXRob2QnLFxuXHQnY29ubmVjdGlvbicsXG5cdCdjb250ZW50LWxlbmd0aCcsXG5cdCdjb29raWUnLFxuXHQnY29va2llMicsXG5cdCdkYXRlJyxcblx0J2RudCcsXG5cdCdleHBlY3QnLFxuXHQnaG9zdCcsXG5cdCdrZWVwLWFsaXZlJyxcblx0J29yaWdpbicsXG5cdCdyZWZlcmVyJyxcblx0J3RlJyxcblx0J3RyYWlsZXInLFxuXHQndHJhbnNmZXItZW5jb2RpbmcnLFxuXHQndXBncmFkZScsXG5cdCd2aWEnXG5dXG4iLCJ2YXIgY2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4vY2FwYWJpbGl0eScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgc3RyZWFtID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtJylcblxudmFyIHJTdGF0ZXMgPSBleHBvcnRzLnJlYWR5U3RhdGVzID0ge1xuXHRVTlNFTlQ6IDAsXG5cdE9QRU5FRDogMSxcblx0SEVBREVSU19SRUNFSVZFRDogMixcblx0TE9BRElORzogMyxcblx0RE9ORTogNFxufVxuXG52YXIgSW5jb21pbmdNZXNzYWdlID0gZXhwb3J0cy5JbmNvbWluZ01lc3NhZ2UgPSBmdW5jdGlvbiAoeGhyLCByZXNwb25zZSwgbW9kZSwgcmVzZXRUaW1lcnMpIHtcblx0dmFyIHNlbGYgPSB0aGlzXG5cdHN0cmVhbS5SZWFkYWJsZS5jYWxsKHNlbGYpXG5cblx0c2VsZi5fbW9kZSA9IG1vZGVcblx0c2VsZi5oZWFkZXJzID0ge31cblx0c2VsZi5yYXdIZWFkZXJzID0gW11cblx0c2VsZi50cmFpbGVycyA9IHt9XG5cdHNlbGYucmF3VHJhaWxlcnMgPSBbXVxuXG5cdC8vIEZha2UgdGhlICdjbG9zZScgZXZlbnQsIGJ1dCBvbmx5IG9uY2UgJ2VuZCcgZmlyZXNcblx0c2VsZi5vbignZW5kJywgZnVuY3Rpb24gKCkge1xuXHRcdC8vIFRoZSBuZXh0VGljayBpcyBuZWNlc3NhcnkgdG8gcHJldmVudCB0aGUgJ3JlcXVlc3QnIG1vZHVsZSBmcm9tIGNhdXNpbmcgYW4gaW5maW5pdGUgbG9vcFxuXHRcdHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuXHRcdFx0c2VsZi5lbWl0KCdjbG9zZScpXG5cdFx0fSlcblx0fSlcblxuXHRpZiAobW9kZSA9PT0gJ2ZldGNoJykge1xuXHRcdHNlbGYuX2ZldGNoUmVzcG9uc2UgPSByZXNwb25zZVxuXG5cdFx0c2VsZi51cmwgPSByZXNwb25zZS51cmxcblx0XHRzZWxmLnN0YXR1c0NvZGUgPSByZXNwb25zZS5zdGF0dXNcblx0XHRzZWxmLnN0YXR1c01lc3NhZ2UgPSByZXNwb25zZS5zdGF0dXNUZXh0XG5cdFx0XG5cdFx0cmVzcG9uc2UuaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoZWFkZXIsIGtleSl7XG5cdFx0XHRzZWxmLmhlYWRlcnNba2V5LnRvTG93ZXJDYXNlKCldID0gaGVhZGVyXG5cdFx0XHRzZWxmLnJhd0hlYWRlcnMucHVzaChrZXksIGhlYWRlcilcblx0XHR9KVxuXG5cdFx0aWYgKGNhcGFiaWxpdHkud3JpdGFibGVTdHJlYW0pIHtcblx0XHRcdHZhciB3cml0YWJsZSA9IG5ldyBXcml0YWJsZVN0cmVhbSh7XG5cdFx0XHRcdHdyaXRlOiBmdW5jdGlvbiAoY2h1bmspIHtcblx0XHRcdFx0XHRyZXNldFRpbWVycyhmYWxzZSlcblx0XHRcdFx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdFx0XHRcdFx0aWYgKHNlbGYuX2Rlc3Ryb3llZCkge1xuXHRcdFx0XHRcdFx0XHRyZWplY3QoKVxuXHRcdFx0XHRcdFx0fSBlbHNlIGlmKHNlbGYucHVzaChCdWZmZXIuZnJvbShjaHVuaykpKSB7XG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoKVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0c2VsZi5fcmVzdW1lRmV0Y2ggPSByZXNvbHZlXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSlcblx0XHRcdFx0fSxcblx0XHRcdFx0Y2xvc2U6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRyZXNldFRpbWVycyh0cnVlKVxuXHRcdFx0XHRcdGlmICghc2VsZi5fZGVzdHJveWVkKVxuXHRcdFx0XHRcdFx0c2VsZi5wdXNoKG51bGwpXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiAoZXJyKSB7XG5cdFx0XHRcdFx0cmVzZXRUaW1lcnModHJ1ZSlcblx0XHRcdFx0XHRpZiAoIXNlbGYuX2Rlc3Ryb3llZClcblx0XHRcdFx0XHRcdHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpXG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHJlc3BvbnNlLmJvZHkucGlwZVRvKHdyaXRhYmxlKS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG5cdFx0XHRcdFx0cmVzZXRUaW1lcnModHJ1ZSlcblx0XHRcdFx0XHRpZiAoIXNlbGYuX2Rlc3Ryb3llZClcblx0XHRcdFx0XHRcdHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpXG5cdFx0XHRcdH0pXG5cdFx0XHRcdHJldHVyblxuXHRcdFx0fSBjYXRjaCAoZSkge30gLy8gcGlwZVRvIG1ldGhvZCBpc24ndCBkZWZpbmVkLiBDYW4ndCBmaW5kIGEgYmV0dGVyIHdheSB0byBmZWF0dXJlIHRlc3QgdGhpc1xuXHRcdH1cblx0XHQvLyBmYWxsYmFjayBmb3Igd2hlbiB3cml0YWJsZVN0cmVhbSBvciBwaXBlVG8gYXJlbid0IGF2YWlsYWJsZVxuXHRcdHZhciByZWFkZXIgPSByZXNwb25zZS5ib2R5LmdldFJlYWRlcigpXG5cdFx0ZnVuY3Rpb24gcmVhZCAoKSB7XG5cdFx0XHRyZWFkZXIucmVhZCgpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuXHRcdFx0XHRpZiAoc2VsZi5fZGVzdHJveWVkKVxuXHRcdFx0XHRcdHJldHVyblxuXHRcdFx0XHRyZXNldFRpbWVycyhyZXN1bHQuZG9uZSlcblx0XHRcdFx0aWYgKHJlc3VsdC5kb25lKSB7XG5cdFx0XHRcdFx0c2VsZi5wdXNoKG51bGwpXG5cdFx0XHRcdFx0cmV0dXJuXG5cdFx0XHRcdH1cblx0XHRcdFx0c2VsZi5wdXNoKEJ1ZmZlci5mcm9tKHJlc3VsdC52YWx1ZSkpXG5cdFx0XHRcdHJlYWQoKVxuXHRcdFx0fSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuXHRcdFx0XHRyZXNldFRpbWVycyh0cnVlKVxuXHRcdFx0XHRpZiAoIXNlbGYuX2Rlc3Ryb3llZClcblx0XHRcdFx0XHRzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKVxuXHRcdFx0fSlcblx0XHR9XG5cdFx0cmVhZCgpXG5cdH0gZWxzZSB7XG5cdFx0c2VsZi5feGhyID0geGhyXG5cdFx0c2VsZi5fcG9zID0gMFxuXG5cdFx0c2VsZi51cmwgPSB4aHIucmVzcG9uc2VVUkxcblx0XHRzZWxmLnN0YXR1c0NvZGUgPSB4aHIuc3RhdHVzXG5cdFx0c2VsZi5zdGF0dXNNZXNzYWdlID0geGhyLnN0YXR1c1RleHRcblx0XHR2YXIgaGVhZGVycyA9IHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKS5zcGxpdCgvXFxyP1xcbi8pXG5cdFx0aGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoZWFkZXIpIHtcblx0XHRcdHZhciBtYXRjaGVzID0gaGVhZGVyLm1hdGNoKC9eKFteOl0rKTpcXHMqKC4qKS8pXG5cdFx0XHRpZiAobWF0Y2hlcykge1xuXHRcdFx0XHR2YXIga2V5ID0gbWF0Y2hlc1sxXS50b0xvd2VyQ2FzZSgpXG5cdFx0XHRcdGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuXHRcdFx0XHRcdGlmIChzZWxmLmhlYWRlcnNba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRzZWxmLmhlYWRlcnNba2V5XSA9IFtdXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHNlbGYuaGVhZGVyc1trZXldLnB1c2gobWF0Y2hlc1syXSlcblx0XHRcdFx0fSBlbHNlIGlmIChzZWxmLmhlYWRlcnNba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0c2VsZi5oZWFkZXJzW2tleV0gKz0gJywgJyArIG1hdGNoZXNbMl1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzZWxmLmhlYWRlcnNba2V5XSA9IG1hdGNoZXNbMl1cblx0XHRcdFx0fVxuXHRcdFx0XHRzZWxmLnJhd0hlYWRlcnMucHVzaChtYXRjaGVzWzFdLCBtYXRjaGVzWzJdKVxuXHRcdFx0fVxuXHRcdH0pXG5cblx0XHRzZWxmLl9jaGFyc2V0ID0gJ3gtdXNlci1kZWZpbmVkJ1xuXHRcdGlmICghY2FwYWJpbGl0eS5vdmVycmlkZU1pbWVUeXBlKSB7XG5cdFx0XHR2YXIgbWltZVR5cGUgPSBzZWxmLnJhd0hlYWRlcnNbJ21pbWUtdHlwZSddXG5cdFx0XHRpZiAobWltZVR5cGUpIHtcblx0XHRcdFx0dmFyIGNoYXJzZXRNYXRjaCA9IG1pbWVUeXBlLm1hdGNoKC87XFxzKmNoYXJzZXQ9KFteO10pKDt8JCkvKVxuXHRcdFx0XHRpZiAoY2hhcnNldE1hdGNoKSB7XG5cdFx0XHRcdFx0c2VsZi5fY2hhcnNldCA9IGNoYXJzZXRNYXRjaFsxXS50b0xvd2VyQ2FzZSgpXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICghc2VsZi5fY2hhcnNldClcblx0XHRcdFx0c2VsZi5fY2hhcnNldCA9ICd1dGYtOCcgLy8gYmVzdCBndWVzc1xuXHRcdH1cblx0fVxufVxuXG5pbmhlcml0cyhJbmNvbWluZ01lc3NhZ2UsIHN0cmVhbS5SZWFkYWJsZSlcblxuSW5jb21pbmdNZXNzYWdlLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIHNlbGYgPSB0aGlzXG5cblx0dmFyIHJlc29sdmUgPSBzZWxmLl9yZXN1bWVGZXRjaFxuXHRpZiAocmVzb2x2ZSkge1xuXHRcdHNlbGYuX3Jlc3VtZUZldGNoID0gbnVsbFxuXHRcdHJlc29sdmUoKVxuXHR9XG59XG5cbkluY29taW5nTWVzc2FnZS5wcm90b3R5cGUuX29uWEhSUHJvZ3Jlc3MgPSBmdW5jdGlvbiAocmVzZXRUaW1lcnMpIHtcblx0dmFyIHNlbGYgPSB0aGlzXG5cblx0dmFyIHhociA9IHNlbGYuX3hoclxuXG5cdHZhciByZXNwb25zZSA9IG51bGxcblx0c3dpdGNoIChzZWxmLl9tb2RlKSB7XG5cdFx0Y2FzZSAndGV4dCc6XG5cdFx0XHRyZXNwb25zZSA9IHhoci5yZXNwb25zZVRleHRcblx0XHRcdGlmIChyZXNwb25zZS5sZW5ndGggPiBzZWxmLl9wb3MpIHtcblx0XHRcdFx0dmFyIG5ld0RhdGEgPSByZXNwb25zZS5zdWJzdHIoc2VsZi5fcG9zKVxuXHRcdFx0XHRpZiAoc2VsZi5fY2hhcnNldCA9PT0gJ3gtdXNlci1kZWZpbmVkJykge1xuXHRcdFx0XHRcdHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2MobmV3RGF0YS5sZW5ndGgpXG5cdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBuZXdEYXRhLmxlbmd0aDsgaSsrKVxuXHRcdFx0XHRcdFx0YnVmZmVyW2ldID0gbmV3RGF0YS5jaGFyQ29kZUF0KGkpICYgMHhmZlxuXG5cdFx0XHRcdFx0c2VsZi5wdXNoKGJ1ZmZlcilcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzZWxmLnB1c2gobmV3RGF0YSwgc2VsZi5fY2hhcnNldClcblx0XHRcdFx0fVxuXHRcdFx0XHRzZWxmLl9wb3MgPSByZXNwb25zZS5sZW5ndGhcblx0XHRcdH1cblx0XHRcdGJyZWFrXG5cdFx0Y2FzZSAnYXJyYXlidWZmZXInOlxuXHRcdFx0aWYgKHhoci5yZWFkeVN0YXRlICE9PSByU3RhdGVzLkRPTkUgfHwgIXhoci5yZXNwb25zZSlcblx0XHRcdFx0YnJlYWtcblx0XHRcdHJlc3BvbnNlID0geGhyLnJlc3BvbnNlXG5cdFx0XHRzZWxmLnB1c2goQnVmZmVyLmZyb20obmV3IFVpbnQ4QXJyYXkocmVzcG9uc2UpKSlcblx0XHRcdGJyZWFrXG5cdFx0Y2FzZSAnbW96LWNodW5rZWQtYXJyYXlidWZmZXInOiAvLyB0YWtlIHdob2xlXG5cdFx0XHRyZXNwb25zZSA9IHhoci5yZXNwb25zZVxuXHRcdFx0aWYgKHhoci5yZWFkeVN0YXRlICE9PSByU3RhdGVzLkxPQURJTkcgfHwgIXJlc3BvbnNlKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0c2VsZi5wdXNoKEJ1ZmZlci5mcm9tKG5ldyBVaW50OEFycmF5KHJlc3BvbnNlKSkpXG5cdFx0XHRicmVha1xuXHRcdGNhc2UgJ21zLXN0cmVhbSc6XG5cdFx0XHRyZXNwb25zZSA9IHhoci5yZXNwb25zZVxuXHRcdFx0aWYgKHhoci5yZWFkeVN0YXRlICE9PSByU3RhdGVzLkxPQURJTkcpXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHR2YXIgcmVhZGVyID0gbmV3IGdsb2JhbC5NU1N0cmVhbVJlYWRlcigpXG5cdFx0XHRyZWFkZXIub25wcm9ncmVzcyA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0aWYgKHJlYWRlci5yZXN1bHQuYnl0ZUxlbmd0aCA+IHNlbGYuX3Bvcykge1xuXHRcdFx0XHRcdHNlbGYucHVzaChCdWZmZXIuZnJvbShuZXcgVWludDhBcnJheShyZWFkZXIucmVzdWx0LnNsaWNlKHNlbGYuX3BvcykpKSlcblx0XHRcdFx0XHRzZWxmLl9wb3MgPSByZWFkZXIucmVzdWx0LmJ5dGVMZW5ndGhcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0cmVzZXRUaW1lcnModHJ1ZSlcblx0XHRcdFx0c2VsZi5wdXNoKG51bGwpXG5cdFx0XHR9XG5cdFx0XHQvLyByZWFkZXIub25lcnJvciA9ID8/PyAvLyBUT0RPOiB0aGlzXG5cdFx0XHRyZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIocmVzcG9uc2UpXG5cdFx0XHRicmVha1xuXHR9XG5cblx0Ly8gVGhlIG1zLXN0cmVhbSBjYXNlIGhhbmRsZXMgZW5kIHNlcGFyYXRlbHkgaW4gcmVhZGVyLm9ubG9hZCgpXG5cdGlmIChzZWxmLl94aHIucmVhZHlTdGF0ZSA9PT0gclN0YXRlcy5ET05FICYmIHNlbGYuX21vZGUgIT09ICdtcy1zdHJlYW0nKSB7XG5cdFx0cmVzZXRUaW1lcnModHJ1ZSlcblx0XHRzZWxmLnB1c2gobnVsbClcblx0fVxufVxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBpc0VuY29kaW5nID0gQnVmZmVyLmlzRW5jb2RpbmcgfHwgZnVuY3Rpb24gKGVuY29kaW5nKSB7XG4gIGVuY29kaW5nID0gJycgKyBlbmNvZGluZztcbiAgc3dpdGNoIChlbmNvZGluZyAmJiBlbmNvZGluZy50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpjYXNlICd1dGY4JzpjYXNlICd1dGYtOCc6Y2FzZSAnYXNjaWknOmNhc2UgJ2JpbmFyeSc6Y2FzZSAnYmFzZTY0JzpjYXNlICd1Y3MyJzpjYXNlICd1Y3MtMic6Y2FzZSAndXRmMTZsZSc6Y2FzZSAndXRmLTE2bGUnOmNhc2UgJ3Jhdyc6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG5mdW5jdGlvbiBfbm9ybWFsaXplRW5jb2RpbmcoZW5jKSB7XG4gIGlmICghZW5jKSByZXR1cm4gJ3V0ZjgnO1xuICB2YXIgcmV0cmllZDtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuYykge1xuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiAndXRmOCc7XG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gJ3V0ZjE2bGUnO1xuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiAnbGF0aW4xJztcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gZW5jO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKHJldHJpZWQpIHJldHVybjsgLy8gdW5kZWZpbmVkXG4gICAgICAgIGVuYyA9ICgnJyArIGVuYykudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgcmV0cmllZCA9IHRydWU7XG4gICAgfVxuICB9XG59O1xuXG4vLyBEbyBub3QgY2FjaGUgYEJ1ZmZlci5pc0VuY29kaW5nYCB3aGVuIGNoZWNraW5nIGVuY29kaW5nIG5hbWVzIGFzIHNvbWVcbi8vIG1vZHVsZXMgbW9ua2V5LXBhdGNoIGl0IHRvIHN1cHBvcnQgYWRkaXRpb25hbCBlbmNvZGluZ3NcbmZ1bmN0aW9uIG5vcm1hbGl6ZUVuY29kaW5nKGVuYykge1xuICB2YXIgbmVuYyA9IF9ub3JtYWxpemVFbmNvZGluZyhlbmMpO1xuICBpZiAodHlwZW9mIG5lbmMgIT09ICdzdHJpbmcnICYmIChCdWZmZXIuaXNFbmNvZGluZyA9PT0gaXNFbmNvZGluZyB8fCAhaXNFbmNvZGluZyhlbmMpKSkgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jKTtcbiAgcmV0dXJuIG5lbmMgfHwgZW5jO1xufVxuXG4vLyBTdHJpbmdEZWNvZGVyIHByb3ZpZGVzIGFuIGludGVyZmFjZSBmb3IgZWZmaWNpZW50bHkgc3BsaXR0aW5nIGEgc2VyaWVzIG9mXG4vLyBidWZmZXJzIGludG8gYSBzZXJpZXMgb2YgSlMgc3RyaW5ncyB3aXRob3V0IGJyZWFraW5nIGFwYXJ0IG11bHRpLWJ5dGVcbi8vIGNoYXJhY3RlcnMuXG5leHBvcnRzLlN0cmluZ0RlY29kZXIgPSBTdHJpbmdEZWNvZGVyO1xuZnVuY3Rpb24gU3RyaW5nRGVjb2RlcihlbmNvZGluZykge1xuICB0aGlzLmVuY29kaW5nID0gbm9ybWFsaXplRW5jb2RpbmcoZW5jb2RpbmcpO1xuICB2YXIgbmI7XG4gIHN3aXRjaCAodGhpcy5lbmNvZGluZykge1xuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgdGhpcy50ZXh0ID0gdXRmMTZUZXh0O1xuICAgICAgdGhpcy5lbmQgPSB1dGYxNkVuZDtcbiAgICAgIG5iID0gNDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgdGhpcy5maWxsTGFzdCA9IHV0ZjhGaWxsTGFzdDtcbiAgICAgIG5iID0gNDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICB0aGlzLnRleHQgPSBiYXNlNjRUZXh0O1xuICAgICAgdGhpcy5lbmQgPSBiYXNlNjRFbmQ7XG4gICAgICBuYiA9IDM7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhpcy53cml0ZSA9IHNpbXBsZVdyaXRlO1xuICAgICAgdGhpcy5lbmQgPSBzaW1wbGVFbmQ7XG4gICAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5sYXN0TmVlZCA9IDA7XG4gIHRoaXMubGFzdFRvdGFsID0gMDtcbiAgdGhpcy5sYXN0Q2hhciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShuYik7XG59XG5cblN0cmluZ0RlY29kZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGJ1Zikge1xuICBpZiAoYnVmLmxlbmd0aCA9PT0gMCkgcmV0dXJuICcnO1xuICB2YXIgcjtcbiAgdmFyIGk7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSB7XG4gICAgciA9IHRoaXMuZmlsbExhc3QoYnVmKTtcbiAgICBpZiAociA9PT0gdW5kZWZpbmVkKSByZXR1cm4gJyc7XG4gICAgaSA9IHRoaXMubGFzdE5lZWQ7XG4gICAgdGhpcy5sYXN0TmVlZCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgaSA9IDA7XG4gIH1cbiAgaWYgKGkgPCBidWYubGVuZ3RoKSByZXR1cm4gciA/IHIgKyB0aGlzLnRleHQoYnVmLCBpKSA6IHRoaXMudGV4dChidWYsIGkpO1xuICByZXR1cm4gciB8fCAnJztcbn07XG5cblN0cmluZ0RlY29kZXIucHJvdG90eXBlLmVuZCA9IHV0ZjhFbmQ7XG5cbi8vIFJldHVybnMgb25seSBjb21wbGV0ZSBjaGFyYWN0ZXJzIGluIGEgQnVmZmVyXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS50ZXh0ID0gdXRmOFRleHQ7XG5cbi8vIEF0dGVtcHRzIHRvIGNvbXBsZXRlIGEgcGFydGlhbCBub24tVVRGLTggY2hhcmFjdGVyIHVzaW5nIGJ5dGVzIGZyb20gYSBCdWZmZXJcblN0cmluZ0RlY29kZXIucHJvdG90eXBlLmZpbGxMYXN0ID0gZnVuY3Rpb24gKGJ1Zikge1xuICBpZiAodGhpcy5sYXN0TmVlZCA8PSBidWYubGVuZ3RoKSB7XG4gICAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkLCAwLCB0aGlzLmxhc3ROZWVkKTtcbiAgICByZXR1cm4gdGhpcy5sYXN0Q2hhci50b1N0cmluZyh0aGlzLmVuY29kaW5nLCAwLCB0aGlzLmxhc3RUb3RhbCk7XG4gIH1cbiAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkLCAwLCBidWYubGVuZ3RoKTtcbiAgdGhpcy5sYXN0TmVlZCAtPSBidWYubGVuZ3RoO1xufTtcblxuLy8gQ2hlY2tzIHRoZSB0eXBlIG9mIGEgVVRGLTggYnl0ZSwgd2hldGhlciBpdCdzIEFTQ0lJLCBhIGxlYWRpbmcgYnl0ZSwgb3IgYVxuLy8gY29udGludWF0aW9uIGJ5dGUuIElmIGFuIGludmFsaWQgYnl0ZSBpcyBkZXRlY3RlZCwgLTIgaXMgcmV0dXJuZWQuXG5mdW5jdGlvbiB1dGY4Q2hlY2tCeXRlKGJ5dGUpIHtcbiAgaWYgKGJ5dGUgPD0gMHg3RikgcmV0dXJuIDA7ZWxzZSBpZiAoYnl0ZSA+PiA1ID09PSAweDA2KSByZXR1cm4gMjtlbHNlIGlmIChieXRlID4+IDQgPT09IDB4MEUpIHJldHVybiAzO2Vsc2UgaWYgKGJ5dGUgPj4gMyA9PT0gMHgxRSkgcmV0dXJuIDQ7XG4gIHJldHVybiBieXRlID4+IDYgPT09IDB4MDIgPyAtMSA6IC0yO1xufVxuXG4vLyBDaGVja3MgYXQgbW9zdCAzIGJ5dGVzIGF0IHRoZSBlbmQgb2YgYSBCdWZmZXIgaW4gb3JkZXIgdG8gZGV0ZWN0IGFuXG4vLyBpbmNvbXBsZXRlIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyLiBUaGUgdG90YWwgbnVtYmVyIG9mIGJ5dGVzICgyLCAzLCBvciA0KVxuLy8gbmVlZGVkIHRvIGNvbXBsZXRlIHRoZSBVVEYtOCBjaGFyYWN0ZXIgKGlmIGFwcGxpY2FibGUpIGFyZSByZXR1cm5lZC5cbmZ1bmN0aW9uIHV0ZjhDaGVja0luY29tcGxldGUoc2VsZiwgYnVmLCBpKSB7XG4gIHZhciBqID0gYnVmLmxlbmd0aCAtIDE7XG4gIGlmIChqIDwgaSkgcmV0dXJuIDA7XG4gIHZhciBuYiA9IHV0ZjhDaGVja0J5dGUoYnVmW2pdKTtcbiAgaWYgKG5iID49IDApIHtcbiAgICBpZiAobmIgPiAwKSBzZWxmLmxhc3ROZWVkID0gbmIgLSAxO1xuICAgIHJldHVybiBuYjtcbiAgfVxuICBpZiAoLS1qIDwgaSB8fCBuYiA9PT0gLTIpIHJldHVybiAwO1xuICBuYiA9IHV0ZjhDaGVja0J5dGUoYnVmW2pdKTtcbiAgaWYgKG5iID49IDApIHtcbiAgICBpZiAobmIgPiAwKSBzZWxmLmxhc3ROZWVkID0gbmIgLSAyO1xuICAgIHJldHVybiBuYjtcbiAgfVxuICBpZiAoLS1qIDwgaSB8fCBuYiA9PT0gLTIpIHJldHVybiAwO1xuICBuYiA9IHV0ZjhDaGVja0J5dGUoYnVmW2pdKTtcbiAgaWYgKG5iID49IDApIHtcbiAgICBpZiAobmIgPiAwKSB7XG4gICAgICBpZiAobmIgPT09IDIpIG5iID0gMDtlbHNlIHNlbGYubGFzdE5lZWQgPSBuYiAtIDM7XG4gICAgfVxuICAgIHJldHVybiBuYjtcbiAgfVxuICByZXR1cm4gMDtcbn1cblxuLy8gVmFsaWRhdGVzIGFzIG1hbnkgY29udGludWF0aW9uIGJ5dGVzIGZvciBhIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyIGFzXG4vLyBuZWVkZWQgb3IgYXJlIGF2YWlsYWJsZS4gSWYgd2Ugc2VlIGEgbm9uLWNvbnRpbnVhdGlvbiBieXRlIHdoZXJlIHdlIGV4cGVjdFxuLy8gb25lLCB3ZSBcInJlcGxhY2VcIiB0aGUgdmFsaWRhdGVkIGNvbnRpbnVhdGlvbiBieXRlcyB3ZSd2ZSBzZWVuIHNvIGZhciB3aXRoXG4vLyBhIHNpbmdsZSBVVEYtOCByZXBsYWNlbWVudCBjaGFyYWN0ZXIgKCdcXHVmZmZkJyksIHRvIG1hdGNoIHY4J3MgVVRGLTggZGVjb2Rpbmdcbi8vIGJlaGF2aW9yLiBUaGUgY29udGludWF0aW9uIGJ5dGUgY2hlY2sgaXMgaW5jbHVkZWQgdGhyZWUgdGltZXMgaW4gdGhlIGNhc2Vcbi8vIHdoZXJlIGFsbCBvZiB0aGUgY29udGludWF0aW9uIGJ5dGVzIGZvciBhIGNoYXJhY3RlciBleGlzdCBpbiB0aGUgc2FtZSBidWZmZXIuXG4vLyBJdCBpcyBhbHNvIGRvbmUgdGhpcyB3YXkgYXMgYSBzbGlnaHQgcGVyZm9ybWFuY2UgaW5jcmVhc2UgaW5zdGVhZCBvZiB1c2luZyBhXG4vLyBsb29wLlxuZnVuY3Rpb24gdXRmOENoZWNrRXh0cmFCeXRlcyhzZWxmLCBidWYsIHApIHtcbiAgaWYgKChidWZbMF0gJiAweEMwKSAhPT0gMHg4MCkge1xuICAgIHNlbGYubGFzdE5lZWQgPSAwO1xuICAgIHJldHVybiAnXFx1ZmZmZCc7XG4gIH1cbiAgaWYgKHNlbGYubGFzdE5lZWQgPiAxICYmIGJ1Zi5sZW5ndGggPiAxKSB7XG4gICAgaWYgKChidWZbMV0gJiAweEMwKSAhPT0gMHg4MCkge1xuICAgICAgc2VsZi5sYXN0TmVlZCA9IDE7XG4gICAgICByZXR1cm4gJ1xcdWZmZmQnO1xuICAgIH1cbiAgICBpZiAoc2VsZi5sYXN0TmVlZCA+IDIgJiYgYnVmLmxlbmd0aCA+IDIpIHtcbiAgICAgIGlmICgoYnVmWzJdICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICAgICAgc2VsZi5sYXN0TmVlZCA9IDI7XG4gICAgICAgIHJldHVybiAnXFx1ZmZmZCc7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIEF0dGVtcHRzIHRvIGNvbXBsZXRlIGEgbXVsdGktYnl0ZSBVVEYtOCBjaGFyYWN0ZXIgdXNpbmcgYnl0ZXMgZnJvbSBhIEJ1ZmZlci5cbmZ1bmN0aW9uIHV0ZjhGaWxsTGFzdChidWYpIHtcbiAgdmFyIHAgPSB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQ7XG4gIHZhciByID0gdXRmOENoZWNrRXh0cmFCeXRlcyh0aGlzLCBidWYsIHApO1xuICBpZiAociAhPT0gdW5kZWZpbmVkKSByZXR1cm4gcjtcbiAgaWYgKHRoaXMubGFzdE5lZWQgPD0gYnVmLmxlbmd0aCkge1xuICAgIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHAsIDAsIHRoaXMubGFzdE5lZWQpO1xuICAgIHJldHVybiB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsIDAsIHRoaXMubGFzdFRvdGFsKTtcbiAgfVxuICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCBwLCAwLCBidWYubGVuZ3RoKTtcbiAgdGhpcy5sYXN0TmVlZCAtPSBidWYubGVuZ3RoO1xufVxuXG4vLyBSZXR1cm5zIGFsbCBjb21wbGV0ZSBVVEYtOCBjaGFyYWN0ZXJzIGluIGEgQnVmZmVyLiBJZiB0aGUgQnVmZmVyIGVuZGVkIG9uIGFcbi8vIHBhcnRpYWwgY2hhcmFjdGVyLCB0aGUgY2hhcmFjdGVyJ3MgYnl0ZXMgYXJlIGJ1ZmZlcmVkIHVudGlsIHRoZSByZXF1aXJlZFxuLy8gbnVtYmVyIG9mIGJ5dGVzIGFyZSBhdmFpbGFibGUuXG5mdW5jdGlvbiB1dGY4VGV4dChidWYsIGkpIHtcbiAgdmFyIHRvdGFsID0gdXRmOENoZWNrSW5jb21wbGV0ZSh0aGlzLCBidWYsIGkpO1xuICBpZiAoIXRoaXMubGFzdE5lZWQpIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjgnLCBpKTtcbiAgdGhpcy5sYXN0VG90YWwgPSB0b3RhbDtcbiAgdmFyIGVuZCA9IGJ1Zi5sZW5ndGggLSAodG90YWwgLSB0aGlzLmxhc3ROZWVkKTtcbiAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgMCwgZW5kKTtcbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygndXRmOCcsIGksIGVuZCk7XG59XG5cbi8vIEZvciBVVEYtOCwgYSByZXBsYWNlbWVudCBjaGFyYWN0ZXIgaXMgYWRkZWQgd2hlbiBlbmRpbmcgb24gYSBwYXJ0aWFsXG4vLyBjaGFyYWN0ZXIuXG5mdW5jdGlvbiB1dGY4RW5kKGJ1Zikge1xuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSByZXR1cm4gciArICdcXHVmZmZkJztcbiAgcmV0dXJuIHI7XG59XG5cbi8vIFVURi0xNkxFIHR5cGljYWxseSBuZWVkcyB0d28gYnl0ZXMgcGVyIGNoYXJhY3RlciwgYnV0IGV2ZW4gaWYgd2UgaGF2ZSBhbiBldmVuXG4vLyBudW1iZXIgb2YgYnl0ZXMgYXZhaWxhYmxlLCB3ZSBuZWVkIHRvIGNoZWNrIGlmIHdlIGVuZCBvbiBhIGxlYWRpbmcvaGlnaFxuLy8gc3Vycm9nYXRlLiBJbiB0aGF0IGNhc2UsIHdlIG5lZWQgdG8gd2FpdCBmb3IgdGhlIG5leHQgdHdvIGJ5dGVzIGluIG9yZGVyIHRvXG4vLyBkZWNvZGUgdGhlIGxhc3QgY2hhcmFjdGVyIHByb3Blcmx5LlxuZnVuY3Rpb24gdXRmMTZUZXh0KGJ1ZiwgaSkge1xuICBpZiAoKGJ1Zi5sZW5ndGggLSBpKSAlIDIgPT09IDApIHtcbiAgICB2YXIgciA9IGJ1Zi50b1N0cmluZygndXRmMTZsZScsIGkpO1xuICAgIGlmIChyKSB7XG4gICAgICB2YXIgYyA9IHIuY2hhckNvZGVBdChyLmxlbmd0aCAtIDEpO1xuICAgICAgaWYgKGMgPj0gMHhEODAwICYmIGMgPD0gMHhEQkZGKSB7XG4gICAgICAgIHRoaXMubGFzdE5lZWQgPSAyO1xuICAgICAgICB0aGlzLmxhc3RUb3RhbCA9IDQ7XG4gICAgICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDJdO1xuICAgICAgICB0aGlzLmxhc3RDaGFyWzFdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgICAgICAgcmV0dXJuIHIuc2xpY2UoMCwgLTEpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxuICB0aGlzLmxhc3ROZWVkID0gMTtcbiAgdGhpcy5sYXN0VG90YWwgPSAyO1xuICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygndXRmMTZsZScsIGksIGJ1Zi5sZW5ndGggLSAxKTtcbn1cblxuLy8gRm9yIFVURi0xNkxFIHdlIGRvIG5vdCBleHBsaWNpdGx5IGFwcGVuZCBzcGVjaWFsIHJlcGxhY2VtZW50IGNoYXJhY3RlcnMgaWYgd2Vcbi8vIGVuZCBvbiBhIHBhcnRpYWwgY2hhcmFjdGVyLCB3ZSBzaW1wbHkgbGV0IHY4IGhhbmRsZSB0aGF0LlxuZnVuY3Rpb24gdXRmMTZFbmQoYnVmKSB7XG4gIHZhciByID0gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHtcbiAgICB2YXIgZW5kID0gdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkO1xuICAgIHJldHVybiByICsgdGhpcy5sYXN0Q2hhci50b1N0cmluZygndXRmMTZsZScsIDAsIGVuZCk7XG4gIH1cbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRleHQoYnVmLCBpKSB7XG4gIHZhciBuID0gKGJ1Zi5sZW5ndGggLSBpKSAlIDM7XG4gIGlmIChuID09PSAwKSByZXR1cm4gYnVmLnRvU3RyaW5nKCdiYXNlNjQnLCBpKTtcbiAgdGhpcy5sYXN0TmVlZCA9IDMgLSBuO1xuICB0aGlzLmxhc3RUb3RhbCA9IDM7XG4gIGlmIChuID09PSAxKSB7XG4gICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMl07XG4gICAgdGhpcy5sYXN0Q2hhclsxXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gIH1cbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygnYmFzZTY0JywgaSwgYnVmLmxlbmd0aCAtIG4pO1xufVxuXG5mdW5jdGlvbiBiYXNlNjRFbmQoYnVmKSB7XG4gIHZhciByID0gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHJldHVybiByICsgdGhpcy5sYXN0Q2hhci50b1N0cmluZygnYmFzZTY0JywgMCwgMyAtIHRoaXMubGFzdE5lZWQpO1xuICByZXR1cm4gcjtcbn1cblxuLy8gUGFzcyBieXRlcyBvbiB0aHJvdWdoIGZvciBzaW5nbGUtYnl0ZSBlbmNvZGluZ3MgKGUuZy4gYXNjaWksIGxhdGluMSwgaGV4KVxuZnVuY3Rpb24gc2ltcGxlV3JpdGUoYnVmKSB7XG4gIHJldHVybiBidWYudG9TdHJpbmcodGhpcy5lbmNvZGluZyk7XG59XG5cbmZ1bmN0aW9uIHNpbXBsZUVuZChidWYpIHtcbiAgcmV0dXJuIGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG59IiwiLyohIHNhZmUtYnVmZmVyLiBNSVQgTGljZW5zZS4gRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnL29wZW5zb3VyY2U+ICovXG4vKiBlc2xpbnQtZGlzYWJsZSBub2RlL25vLWRlcHJlY2F0ZWQtYXBpICovXG52YXIgYnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJylcbnZhciBCdWZmZXIgPSBidWZmZXIuQnVmZmVyXG5cbi8vIGFsdGVybmF0aXZlIHRvIHVzaW5nIE9iamVjdC5rZXlzIGZvciBvbGQgYnJvd3NlcnNcbmZ1bmN0aW9uIGNvcHlQcm9wcyAoc3JjLCBkc3QpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykge1xuICAgIGRzdFtrZXldID0gc3JjW2tleV1cbiAgfVxufVxuaWYgKEJ1ZmZlci5mcm9tICYmIEJ1ZmZlci5hbGxvYyAmJiBCdWZmZXIuYWxsb2NVbnNhZmUgJiYgQnVmZmVyLmFsbG9jVW5zYWZlU2xvdykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGJ1ZmZlclxufSBlbHNlIHtcbiAgLy8gQ29weSBwcm9wZXJ0aWVzIGZyb20gcmVxdWlyZSgnYnVmZmVyJylcbiAgY29weVByb3BzKGJ1ZmZlciwgZXhwb3J0cylcbiAgZXhwb3J0cy5CdWZmZXIgPSBTYWZlQnVmZmVyXG59XG5cbmZ1bmN0aW9uIFNhZmVCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cblNhZmVCdWZmZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShCdWZmZXIucHJvdG90eXBlKVxuXG4vLyBDb3B5IHN0YXRpYyBtZXRob2RzIGZyb20gQnVmZmVyXG5jb3B5UHJvcHMoQnVmZmVyLCBTYWZlQnVmZmVyKVxuXG5TYWZlQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cblNhZmVCdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHZhciBidWYgPSBCdWZmZXIoc2l6ZSlcbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnKSB7XG4gICAgICBidWYuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICB9IGVsc2Uge1xuICAgICAgYnVmLmZpbGwoZmlsbClcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYnVmLmZpbGwoMClcbiAgfVxuICByZXR1cm4gYnVmXG59XG5cblNhZmVCdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlcihzaXplKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gYnVmZmVyLlNsb3dCdWZmZXIoc2l6ZSlcbn1cbiIsImltcG9ydCBodHRwcyBmcm9tICdodHRwcyc7XG5pbXBvcnQge0luY29taW5nTWVzc2FnZX0gZnJvbSAnaHR0cCc7XG5cbmltcG9ydCB7RG93bmxvYWRNYW5hZ2VyfSBmcm9tICcuL3NlcnZpY2VzL2Rvd25sb2FkLW1hbmFnZXInO1xuaW1wb3J0IHtEb3dubG9hZEl0ZW19IGZyb20gJy4vc2VydmljZXMvZG93bmxvYWQtbWFuYWdlci9pbnRlcmZhY2VzJztcblxuaW1wb3J0IHtZYW5kZXhNdXNpY0FQSX0gZnJvbSAnLi9zZXJ2aWNlcy95YW5kZXgtbXVzaWMtYXBpJztcbmltcG9ydCB7VHJhY2tJRDNUYWdXcml0ZXJ9IGZyb20gJy4vc2VydmljZXMvaWQzLXRhZy13cml0ZXInO1xuaW1wb3J0IHtVc2VyU2V0dGluZ3N9IGZyb20gJy4vc2VydmljZXMvdXNlci1zZXR0aW5ncyc7XG5cbmltcG9ydCB7Q2hyb21lTWVzc2FnZVR5cGUsIENocm9tZU1lc3NhZ2V9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5cbnR5cGUgRXJyb3JDYWxsYmFjayA9IChlcnI6IEVycm9yKSA9PiB2b2lkO1xuXG5leHBvcnQgY2xhc3MgQmFja2dyb3VuZEFwaVNlcnZpY2Uge1xuICBwcml2YXRlIHlhbmRleE11c2ljQXBpOiBZYW5kZXhNdXNpY0FQSTtcblxuICBzdGF0aWMgdXNlclNldHRpbmdzOiBVc2VyU2V0dGluZ3M7XG4gIHN0YXRpYyBkb3dubG9hZE1hbmFnZXI6IERvd25sb2FkTWFuYWdlcjtcblxuICBwcml2YXRlIHN0YXRpYyBlcnJvckxpc3RlbmVyc186IEVycm9yQ2FsbGJhY2tbXSA9IFtdO1xuICBwcml2YXRlIHN0YXRpYyBjb21wbGV0ZUV2ZW50Q2FsbGJhY2tfOiAoXG4gICAgZG93bmxvYWRJdGVtOiBEb3dubG9hZEl0ZW1cbiAgKSA9PiBQcm9taXNlPHZvaWQ+O1xuICBwcm90ZWN0ZWQgc3RhdGljIGluc3RhbmNlXzogQmFja2dyb3VuZEFwaVNlcnZpY2UgfCBudWxsO1xuICAvKipcbiAgICogQHJldHVybiBpbnN0YW5jZSBvZiBCYWNrZ3JvdW5kQXBpU2VydmljZS5cbiAgICogSXQgc2hhcmVzIGRvd25sb2FkTWFuYWdlciBhbmQgdXNlclNldHRpbmdzIHdpdGggb3RoZXIgaW5zdGFuY2VzXG4gICAqL1xuICBzdGF0aWMgYXN5bmMgZ2V0SW5zdGFuY2UobG9jYWxlOiBzdHJpbmcpOiBQcm9taXNlPEJhY2tncm91bmRBcGlTZXJ2aWNlPiB7XG4gICAgY29uc3QgeW1hID0gbmV3IFlhbmRleE11c2ljQVBJKGxvY2FsZSk7XG5cbiAgICBpZiAoIXRoaXMudXNlclNldHRpbmdzKSB7XG4gICAgICB0aGlzLnVzZXJTZXR0aW5ncyA9IG5ldyBVc2VyU2V0dGluZ3MoKTtcbiAgICAgIGF3YWl0IHRoaXMudXNlclNldHRpbmdzLmxvYWQoKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLmRvd25sb2FkTWFuYWdlcikge1xuICAgICAgdGhpcy5kb3dubG9hZE1hbmFnZXIgPSBuZXcgRG93bmxvYWRNYW5hZ2VyKHRoaXMudXNlclNldHRpbmdzLmNvbmN1cnJlbmN5KTtcbiAgICAgIHRoaXMuY29tcGxldGVFdmVudENhbGxiYWNrXyA9IGFzeW5jIGl0ZW0gPT4ge1xuICAgICAgICBhd2FpdCB0aGlzLnByb2Nlc3NEb3dubG9hZEl0ZW1fKGl0ZW0pO1xuICAgICAgfTtcbiAgICAgIHRoaXMuZG93bmxvYWRNYW5hZ2VyLm9uKCdjb21wbGV0ZScsIHRoaXMuY29tcGxldGVFdmVudENhbGxiYWNrXyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBCYWNrZ3JvdW5kQXBpU2VydmljZShcbiAgICAgIHltYSxcbiAgICAgIHRoaXMudXNlclNldHRpbmdzLFxuICAgICAgdGhpcy5kb3dubG9hZE1hbmFnZXJcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBTYXZlIHJlZmVyZW5jZSB0byBkb3dubG9hZE1hbmFnZXIgdXNlclNldHRpbmdzIGFuZCB5YW5kZXhNdXNpY0FwaVxuICAgKi9cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcihcbiAgICB5YW5kZXhNdXNpY0FwaTogWWFuZGV4TXVzaWNBUEksXG4gICAgdXNlclNldHRpbmdzOiBVc2VyU2V0dGluZ3MsXG4gICAgZG93bmxvYWRNYW5hZ2VyOiBEb3dubG9hZE1hbmFnZXJcbiAgKSB7XG4gICAgdGhpcy55YW5kZXhNdXNpY0FwaSA9IHlhbmRleE11c2ljQXBpO1xuICAgIEJhY2tncm91bmRBcGlTZXJ2aWNlLnVzZXJTZXR0aW5ncyA9IHVzZXJTZXR0aW5ncztcbiAgICBCYWNrZ3JvdW5kQXBpU2VydmljZS5kb3dubG9hZE1hbmFnZXIgPSBkb3dubG9hZE1hbmFnZXI7XG4gIH1cblxuICAvKipcbiAgICogUGFzc2VzIGVycm9yIG9iamVjdCB0byBhbGwgZXJyb3IgbGlzdGVuZXJzXG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyBlbWl0RXJyb3JfKGVycjogRXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgZm9yIChjb25zdCBjYWxsYmFjayBvZiB0aGlzLmVycm9yTGlzdGVuZXJzXykge1xuICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIERvd25sb2FkcyBidWZmZXJcbiAgICovXG4gIHByaXZhdGUgc3RhdGljIGFzeW5jIGRvd25sb2FkQ292ZXJfKHVyaTogc3RyaW5nKTogUHJvbWlzZTxCdWZmZXI+IHtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgcGF0aDogdXJpLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICBDb25uZWN0aW9uOiAna2VlcC1hbGl2ZScsXG4gICAgICAgIEFjY2VwdDogJyovKicsXG4gICAgICAgICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nOiAnKicsXG4gICAgICAgICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzJzogJ29yaWdpbiwgY29udGVudC10eXBlLCBhY2NlcHQnLFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPEJ1ZmZlcj4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgaHR0cHNcbiAgICAgICAgLmdldChvcHRpb25zLCAocmVzOiBJbmNvbWluZ01lc3NhZ2UpID0+IHtcbiAgICAgICAgICBjb25zdCByYXdEYXRhOiBCdWZmZXJbXSA9IFtdO1xuICAgICAgICAgIHJlcy5vbignZGF0YScsIChjaHVuazogQnVmZmVyKSA9PiByYXdEYXRhLnB1c2goY2h1bmspKTtcbiAgICAgICAgICByZXMub24oJ2Vycm9yJywgcmVqZWN0KTtcbiAgICAgICAgICByZXMub24oJ2VuZCcsICgpID0+IHJlc29sdmUoQnVmZmVyLmNvbmNhdChyYXdEYXRhKSkpO1xuICAgICAgICB9KVxuICAgICAgICAub24oJ2Vycm9yJywgcmVqZWN0KTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogVXNlZCBhcyBjYWxsYmFjayB0byBvbkNvbXBsZXRlIGV2ZW50IG9uIGRvd25sb2FkTWFuYWdlci5cbiAgICogU2V0cyBpZDMgdGFncyBhbmQgc2F2ZXMgZmlsZSB0byBzcGVjaWZpZWQgZm9sZGVyXG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyBhc3luYyBwcm9jZXNzRG93bmxvYWRJdGVtXyhpdGVtOiBEb3dubG9hZEl0ZW0pIHtcbiAgICBpZiAoIWl0ZW0uY3VzdG9tRGF0YT8udHJhY2tJZCkgcmV0dXJuO1xuICAgIGlmICghaXRlbS5jdXN0b21EYXRhPy5sb2NhbGUpIHJldHVybjtcblxuICAgIGNvbnN0IHlhbmRleE11c2ljQXBpID0gbmV3IFlhbmRleE11c2ljQVBJKGl0ZW0uY3VzdG9tRGF0YS5sb2NhbGUgYXMgc3RyaW5nKTtcblxuICAgIHRyeSB7XG4gICAgICAvKiBnZXQgdHJhY2sgaW5mbyAqL1xuICAgICAgY29uc3QgdHJhY2sgPSBhd2FpdCB5YW5kZXhNdXNpY0FwaS5nZXRUcmFjaygraXRlbS5jdXN0b21EYXRhLnRyYWNrSWQpO1xuXG4gICAgICAvKiBzZXQgaWQzIHRhZ3MgKi9cbiAgICAgIGNvbnN0IHRhZ1dyaXRlciA9IG5ldyBUcmFja0lEM1RhZ1dyaXRlcihpdGVtLmJ5dGVzISk7XG5cbiAgICAgIHRhZ1dyaXRlclxuICAgICAgICAuc2V0VGl0bGUodHJhY2sudHJhY2sudGl0bGUpXG4gICAgICAgIC5zZXRUeXBlKHRyYWNrLnRyYWNrLnR5cGUpXG4gICAgICAgIC5zZXREdXJhdGlvbih0cmFjay50cmFjay5kdXJhdGlvbk1zKTtcblxuICAgICAgLyogc2V0IGFsYnVtIGluZm8gKi9cbiAgICAgIGlmICh0cmFjay50cmFjay5hbGJ1bXMubGVuZ3RoID4gMCkge1xuICAgICAgICB0YWdXcml0ZXJcbiAgICAgICAgICAuc2V0UG9zaXRpb25JbkFsYnVtKHRyYWNrLnRyYWNrLmFsYnVtc1swXS50cmFja1Bvc2l0aW9uLmluZGV4KVxuICAgICAgICAgIC5zZXRWb2x1bWUodHJhY2sudHJhY2suYWxidW1zWzBdLnRyYWNrUG9zaXRpb24udm9sdW1lKVxuICAgICAgICAgIC5zZXRHZW5yZSh0cmFjay50cmFjay5hbGJ1bXNbMF0uZ2VucmUpXG4gICAgICAgICAgLnNldEFsYnVtKHtcbiAgICAgICAgICAgIHRpdGxlOiB0cmFjay50cmFjay5hbGJ1bXNbMF0udGl0bGUsXG4gICAgICAgICAgICBhcnRpc3Q6XG4gICAgICAgICAgICAgIHRyYWNrLnRyYWNrLmFsYnVtc1swXS5hcnRpc3RzLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgICA/IHRyYWNrLnRyYWNrLmFsYnVtc1swXS5hcnRpc3RzWzBdLm5hbWVcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHllYXI6IHRyYWNrLnRyYWNrLmFsYnVtc1swXS55ZWFyLFxuICAgICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvKiBzZXQgYXJ0aXN0IGluZm8gKi9cbiAgICAgIGlmICh0cmFjay50cmFjay5hcnRpc3RzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGFnV3JpdGVyLnNldEFydGlzdHModHJhY2suYXJ0aXN0cy5tYXAoYXJ0aXN0ID0+IGFydGlzdC5uYW1lKSk7XG4gICAgICB9XG5cbiAgICAgIC8qIHNldCBjb3ZlciAqL1xuICAgICAgaWYgKHRyYWNrLnRyYWNrLmNvdmVyVXJpKSB7XG4gICAgICAgIGNvbnN0IGNvdmVyID0gYXdhaXQgdGhpcy5kb3dubG9hZENvdmVyXyhcbiAgICAgICAgICBhd2FpdCB5YW5kZXhNdXNpY0FwaS5nZXRDb3ZlckRvd25sb2FkTGluayhcbiAgICAgICAgICAgIHRyYWNrLnRyYWNrLmNvdmVyVXJpLFxuICAgICAgICAgICAgQmFja2dyb3VuZEFwaVNlcnZpY2UudXNlclNldHRpbmdzLmNvdmVyU2l6ZVxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgICAgdGFnV3JpdGVyLnNldENvdmVyKGNvdmVyLCB0cmFjay50cmFjay50aXRsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0cmFjay50cmFjay5hbGJ1bXNbMF0ubGFiZWxzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICB0YWdXcml0ZXIuc2V0TGFiZWwodHJhY2sudHJhY2suYWxidW1zWzBdLmxhYmVsc1swXS5uYW1lKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRyYWNrLmx5cmljLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICB0YWdXcml0ZXIuc2V0THlyaWMoXG4gICAgICAgICAgdHJhY2subHlyaWNbMF0uZnVsbEx5cmljcyxcbiAgICAgICAgICB0cmFjay50cmFjay50aXRsZSxcbiAgICAgICAgICB0cmFjay5seXJpY1swXS50ZXh0TGFuZ3VhZ2VcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdHJhY2tVcmwgPSB0YWdXcml0ZXIuZ2V0VXJsKCk7XG5cbiAgICAgIC8qIHNhdmUgdG8gY2hyb21lICovXG4gICAgICByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4ocmVzb2x2ZSA9PiB7XG4gICAgICAgIGNocm9tZS5kb3dubG9hZHMuZG93bmxvYWQoXG4gICAgICAgICAge1xuICAgICAgICAgICAgdXJsOiB0cmFja1VybCxcbiAgICAgICAgICAgIGZpbGVuYW1lOiBpdGVtLmRvd25sb2FkUGF0aCArIGl0ZW0uZmlsZW5hbWUsXG4gICAgICAgICAgfSxcbiAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICB0YWdXcml0ZXIucmV2b2tlVXJsKCk7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBCYWNrZ3JvdW5kQXBpU2VydmljZS5lbWl0RXJyb3JfKGVycik7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBFbmNvZGVzIGZpbGUgdG8gZmlsZXN5c3RlbSBmcmllbmRseSBmb3JtYXQgYnkgZXNjYXBpbmcgYmFubmVkIHN5bWJvbHNcbiAgICovXG4gIHByaXZhdGUgc3RhdGljIGVuY29kZUZpbGVuYW1lXyhmaWxlbmFtZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCByZXMgPSBmaWxlbmFtZVxuICAgICAgLnJlcGxhY2VBbGwoJzonLCAnJTU4JylcbiAgICAgIC5yZXBsYWNlQWxsKCc/JywgJyU2MycpXG4gICAgICAucmVwbGFjZUFsbCgnKicsICclMkEnKVxuICAgICAgLnJlcGxhY2VBbGwoJy8nLCAnJTQ3JylcbiAgICAgIC5yZXBsYWNlQWxsKCdcXFxcJywgJyU1QycpXG4gICAgICAucmVwbGFjZUFsbCgnXCInLCAnJTIyJylcbiAgICAgIC5yZXBsYWNlQWxsKCd8JywgJyUxMjQnKTtcbiAgICByZXR1cm4gcmVzO1xuICB9XG4gIC8qKlxuICAgKiBBbGlhcyBmb3IgZW5jb2RlRm9sZGVybWFtZV9cbiAgICovXG4gIHByaXZhdGUgc3RhdGljIGVuY29kZUZvbGRlck5hbWVfKGZvbGRlck5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZW5jb2RlRmlsZW5hbWVfKGZvbGRlck5hbWUpO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBmaWxlbmFtZSBiYXNlZCBvbiBwcm92aWRlZCB0ZW1wbGF0ZSBhbmQgYXJnc1xuICAgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgZ2VuZXJhdGVUcmFja0ZpbGVuYW1lXyhcbiAgICB0ZW1wbGF0ZTogc3RyaW5nLFxuICAgIHRpdGxlOiBzdHJpbmcsXG4gICAgYWxidW06IHN0cmluZyxcbiAgICBhcnRpc3Q6IHN0cmluZ1xuICApOiBzdHJpbmcge1xuICAgIGNvbnN0IGZpbGVuYW1lID0gdGVtcGxhdGVcbiAgICAgIC5yZXBsYWNlQWxsKCd7dGl0bGV9JywgdGl0bGUpXG4gICAgICAucmVwbGFjZUFsbCgne2FsYnVtfScsIGFsYnVtKVxuICAgICAgLnJlcGxhY2VBbGwoJ3thcnRpc3R9JywgYXJ0aXN0KVxuICAgICAgLnRyaW0oKTtcblxuICAgIHJldHVybiB0aGlzLmVuY29kZUZpbGVuYW1lXyhmaWxlbmFtZSk7XG4gIH1cblxuICAvKiBBUEkgKi9cbiAgLyoqXG4gICAqIEFkZCBlcnJvciBsaXN0ZW5lci5cbiAgICogT25seSBlcnJvcnMgZmlyZWQgaW4gQmFja2dyb3VuZEFwaVNlcnZpY2Ugd2lsbCBiZSBlbWl0dGVkXG4gICAqL1xuICBzdGF0aWMgb24oX3R5cGU6ICdlcnJvcicsIGNhbGxiYWNrOiBFcnJvckNhbGxiYWNrKSB7XG4gICAgaWYgKHRoaXMuZXJyb3JMaXN0ZW5lcnNfLmluY2x1ZGVzKGNhbGxiYWNrKSkgcmV0dXJuO1xuICAgIHRoaXMuZXJyb3JMaXN0ZW5lcnNfLnB1c2goY2FsbGJhY2spO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmVzIGVycm9yIGxpc3RlbmVyLlxuICAgKi9cbiAgc3RhdGljIHJlbW92ZUxpc3RlbmVyKF90eXBlOiAnZXJyb3InLCBjYWxsYmFjazogRXJyb3JDYWxsYmFjaykge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5lcnJvckxpc3RlbmVyc18uaW5kZXhPZihjYWxsYmFjayk7XG4gICAgaWYgKGluZGV4ID09PSAtMSkgcmV0dXJuO1xuXG4gICAgdGhpcy5lcnJvckxpc3RlbmVyc18uc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxuICAvKipcbiAgICogQWRkcyB0cmFjayB0byB0aGUgZG93bmxvYWQgcXVldWVcbiAgICovXG4gIGFzeW5jIGRvd25sb2FkVHJhY2sodHJhY2tJZDogbnVtYmVyKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgIC8qIGdldCB0cmFjayBpbmZvICovXG4gICAgICBjb25zdCB0cmFjayA9IGF3YWl0IHRoaXMueWFuZGV4TXVzaWNBcGkuZ2V0VHJhY2soK3RyYWNrSWQpO1xuXG4gICAgICBpZiAoIXRyYWNrLnRyYWNrLmF2YWlsYWJsZSkgcmV0dXJuO1xuXG4gICAgICBjb25zdCBkb3dubG9hZFVybCA9IGF3YWl0IHRoaXMueWFuZGV4TXVzaWNBcGkuZ2V0VHJhY2tEb3dubG9hZExpbmsoXG4gICAgICAgICt0cmFja0lkXG4gICAgICApO1xuXG4gICAgICBjb25zdCBmaWxlbmFtZSA9IEJhY2tncm91bmRBcGlTZXJ2aWNlLmdlbmVyYXRlVHJhY2tGaWxlbmFtZV8oXG4gICAgICAgIEJhY2tncm91bmRBcGlTZXJ2aWNlLnVzZXJTZXR0aW5ncy5maWxlbmFtZUZvcm1hdCxcbiAgICAgICAgdHJhY2sudHJhY2sudGl0bGUsXG4gICAgICAgIHRyYWNrLnRyYWNrLmFsYnVtcy5sZW5ndGggPiAwID8gdHJhY2sudHJhY2suYWxidW1zWzBdLnRpdGxlIDogJycsXG4gICAgICAgIHRyYWNrLnRyYWNrLmFydGlzdHMubGVuZ3RoID4gMCA/IHRyYWNrLnRyYWNrLmFydGlzdHNbMF0ubmFtZSA6ICcnXG4gICAgICApO1xuXG4gICAgICBjb25zdCBwYXRoID0gQmFja2dyb3VuZEFwaVNlcnZpY2UudXNlclNldHRpbmdzLmRvd25sb2FkUGF0aDtcblxuICAgICAgQmFja2dyb3VuZEFwaVNlcnZpY2UuZG93bmxvYWRNYW5hZ2VyLmRvd25sb2FkKFxuICAgICAgICBkb3dubG9hZFVybCxcbiAgICAgICAgdHJhY2sudHJhY2sudGl0bGUsXG4gICAgICAgIGZpbGVuYW1lICsgJy5tcDMnLFxuICAgICAgICBwYXRoLFxuICAgICAgICB7dHJhY2tJZCwgbG9jYWxlOiB0aGlzLnlhbmRleE11c2ljQXBpLmdldExvY2FsZSgpfVxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIEJhY2tncm91bmRBcGlTZXJ2aWNlLmVtaXRFcnJvcl8oZXJyKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIERvd25sb2FkIGFsbCBzb25ncyBmcm9tIHByb3ZpZGVkIGFsYnVtXG4gICAqL1xuICBhc3luYyBkb3dubG9hZEFsYnVtKGFsYnVtSWQ6IG51bWJlcik6IFByb21pc2U8dm9pZD4ge1xuICAgIC8qIGdldCBhbGJ1bSBpbmZvICovXG4gICAgY29uc3QgYWxidW0gPSBhd2FpdCB0aGlzLnlhbmRleE11c2ljQXBpLmdldEFsYnVtKGFsYnVtSWQpO1xuXG4gICAgbGV0IHZvbHVtZUluZGV4ID0gMTtcbiAgICBmb3IgKGNvbnN0IHZvbHVtZSBvZiBhbGJ1bS52b2x1bWVzKSB7XG4gICAgICBmb3IgKGNvbnN0IHRyYWNrIG9mIHZvbHVtZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICghdHJhY2suYXZhaWxhYmxlKSBjb250aW51ZTtcbiAgICAgICAgICBjb25zdCBkb3dubG9hZFVybCA9IGF3YWl0IHRoaXMueWFuZGV4TXVzaWNBcGkuZ2V0VHJhY2tEb3dubG9hZExpbmsoXG4gICAgICAgICAgICArdHJhY2suaWRcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgY29uc3QgZmlsZW5hbWUgPSBCYWNrZ3JvdW5kQXBpU2VydmljZS5nZW5lcmF0ZVRyYWNrRmlsZW5hbWVfKFxuICAgICAgICAgICAgQmFja2dyb3VuZEFwaVNlcnZpY2UudXNlclNldHRpbmdzLmZpbGVuYW1lRm9ybWF0LFxuICAgICAgICAgICAgdHJhY2sudGl0bGUsXG4gICAgICAgICAgICB0cmFjay5hbGJ1bXMubGVuZ3RoID4gMCA/IHRyYWNrLmFsYnVtc1swXS50aXRsZSA6ICcnLFxuICAgICAgICAgICAgdHJhY2suYXJ0aXN0cy5sZW5ndGggPiAwID8gdHJhY2suYXJ0aXN0c1swXS5uYW1lIDogJydcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgbGV0IHBhdGggPSBCYWNrZ3JvdW5kQXBpU2VydmljZS51c2VyU2V0dGluZ3MuZG93bmxvYWRQYXRoO1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIEJhY2tncm91bmRBcGlTZXJ2aWNlLnVzZXJTZXR0aW5ncy5kb3dubG9hZEFsYnVtc0luU2VwYXJhdGVGb2xkZXJcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGlmIChhbGJ1bS5hcnRpc3RzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgcGF0aCArPSBgJHtCYWNrZ3JvdW5kQXBpU2VydmljZS5lbmNvZGVGb2xkZXJOYW1lXyhcbiAgICAgICAgICAgICAgICBhbGJ1bS5hcnRpc3RzWzBdLm5hbWVcbiAgICAgICAgICAgICAgKX0tJHtCYWNrZ3JvdW5kQXBpU2VydmljZS5lbmNvZGVGb2xkZXJOYW1lXyhhbGJ1bS50aXRsZSl9L2A7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwYXRoICs9IGAke0JhY2tncm91bmRBcGlTZXJ2aWNlLmVuY29kZUZvbGRlck5hbWVfKGFsYnVtLnRpdGxlKX0vYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGFsYnVtLnZvbHVtZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgcGF0aCArPSBgdm9sdW1lICR7dm9sdW1lSW5kZXh9L2A7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgQmFja2dyb3VuZEFwaVNlcnZpY2UuZG93bmxvYWRNYW5hZ2VyLmRvd25sb2FkKFxuICAgICAgICAgICAgZG93bmxvYWRVcmwsXG4gICAgICAgICAgICB0cmFjay50aXRsZSxcbiAgICAgICAgICAgIGZpbGVuYW1lICsgJy5tcDMnLFxuICAgICAgICAgICAgcGF0aCxcbiAgICAgICAgICAgIHt0cmFja0lkOiB0cmFjay5pZCwgbG9jYWxlOiB0aGlzLnlhbmRleE11c2ljQXBpLmdldExvY2FsZSgpfVxuICAgICAgICAgICk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIEJhY2tncm91bmRBcGlTZXJ2aWNlLmVtaXRFcnJvcl8oZXJyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgKyt2b2x1bWVJbmRleDtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIERvd25sb2FkcyBhbGwgc29uZ3MgZnJvbSBwcm92aWRlZCBwbGF5bGlzdFxuICAgKi9cbiAgYXN5bmMgZG93bmxvYWRQbGF5bGlzdChvd25lcjogc3RyaW5nIHwgbnVtYmVyLCBraW5kOiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAvKiBnZXQgcGxheWxpc3QgaW5mbyAqL1xuICAgIGNvbnN0IHtwbGF5bGlzdH0gPSBhd2FpdCB0aGlzLnlhbmRleE11c2ljQXBpLmdldFBsYXlsaXN0KG93bmVyLCBraW5kKTtcblxuICAgIGZvciAoY29uc3QgdHJhY2sgb2YgcGxheWxpc3QudHJhY2tzKSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoIXRyYWNrLmF2YWlsYWJsZSkgY29udGludWU7XG4gICAgICAgIGNvbnN0IGRvd25sb2FkVXJsID0gYXdhaXQgdGhpcy55YW5kZXhNdXNpY0FwaS5nZXRUcmFja0Rvd25sb2FkTGluayhcbiAgICAgICAgICArdHJhY2suaWRcbiAgICAgICAgKTtcblxuICAgICAgICBjb25zdCBmaWxlbmFtZSA9IEJhY2tncm91bmRBcGlTZXJ2aWNlLmdlbmVyYXRlVHJhY2tGaWxlbmFtZV8oXG4gICAgICAgICAgQmFja2dyb3VuZEFwaVNlcnZpY2UudXNlclNldHRpbmdzLmZpbGVuYW1lRm9ybWF0LFxuICAgICAgICAgIHRyYWNrLnRpdGxlLFxuICAgICAgICAgIHRyYWNrLmFsYnVtcy5sZW5ndGggPiAwID8gdHJhY2suYWxidW1zWzBdLnRpdGxlIDogJycsXG4gICAgICAgICAgdHJhY2suYXJ0aXN0cy5sZW5ndGggPiAwID8gdHJhY2suYXJ0aXN0c1swXS5uYW1lIDogJydcbiAgICAgICAgKTtcblxuICAgICAgICBsZXQgcGF0aCA9IEJhY2tncm91bmRBcGlTZXJ2aWNlLnVzZXJTZXR0aW5ncy5kb3dubG9hZFBhdGg7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBCYWNrZ3JvdW5kQXBpU2VydmljZS51c2VyU2V0dGluZ3MuZG93bmxvYWRQbGF5bGlzdHNJblNlcGFyYXRlRm9sZGVyXG4gICAgICAgICkge1xuICAgICAgICAgIHBhdGggKz0gYCR7QmFja2dyb3VuZEFwaVNlcnZpY2UuZW5jb2RlRm9sZGVyTmFtZV8ocGxheWxpc3QudGl0bGUpfS9gO1xuICAgICAgICB9XG5cbiAgICAgICAgQmFja2dyb3VuZEFwaVNlcnZpY2UuZG93bmxvYWRNYW5hZ2VyLmRvd25sb2FkKFxuICAgICAgICAgIGRvd25sb2FkVXJsLFxuICAgICAgICAgIHRyYWNrLnRpdGxlLFxuICAgICAgICAgIGZpbGVuYW1lICsgJy5tcDMnLFxuICAgICAgICAgIHBhdGgsXG4gICAgICAgICAge3RyYWNrSWQ6IHRyYWNrLmlkLCBsb2NhbGU6IHRoaXMueWFuZGV4TXVzaWNBcGkuZ2V0TG9jYWxlKCl9XG4gICAgICAgICk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgQmFja2dyb3VuZEFwaVNlcnZpY2UuZW1pdEVycm9yXyhlcnIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogRG93bmxvYWRzIGFsbCBzb25ncyBvZiBwcm92aWRlZCBhcnRpc3RcbiAgICovXG4gIGFzeW5jIGRvd25sb2FkQXJ0aXN0KGFydGlzdElkOiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAvKiBnZXQgYXJ0aXN0IGluZm8gKi9cbiAgICBjb25zdCBhcnRpc3QgPSBhd2FpdCB0aGlzLnlhbmRleE11c2ljQXBpLmdldEFydGlzdChhcnRpc3RJZCk7XG5cbiAgICBmb3IgKGNvbnN0IHRyYWNrSWQgb2YgYXJ0aXN0LnRyYWNrSWRzKSB7XG4gICAgICB0cnkge1xuICAgICAgICAvKiBnZXQgdHJhY2sgaW5mbyAqL1xuICAgICAgICBjb25zdCB7dHJhY2t9ID0gYXdhaXQgdGhpcy55YW5kZXhNdXNpY0FwaS5nZXRUcmFjaygrdHJhY2tJZCk7XG4gICAgICAgIGlmICghdHJhY2suYXZhaWxhYmxlKSBjb250aW51ZTtcblxuICAgICAgICBjb25zdCBkb3dubG9hZFVybCA9IGF3YWl0IHRoaXMueWFuZGV4TXVzaWNBcGkuZ2V0VHJhY2tEb3dubG9hZExpbmsoXG4gICAgICAgICAgK3RyYWNrLmlkXG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc3QgZmlsZW5hbWUgPSBCYWNrZ3JvdW5kQXBpU2VydmljZS5nZW5lcmF0ZVRyYWNrRmlsZW5hbWVfKFxuICAgICAgICAgIEJhY2tncm91bmRBcGlTZXJ2aWNlLnVzZXJTZXR0aW5ncy5maWxlbmFtZUZvcm1hdCxcbiAgICAgICAgICB0cmFjay50aXRsZSxcbiAgICAgICAgICB0cmFjay5hbGJ1bXMubGVuZ3RoID4gMCA/IHRyYWNrLmFsYnVtc1swXS50aXRsZSA6ICcnLFxuICAgICAgICAgIHRyYWNrLmFydGlzdHMubGVuZ3RoID4gMCA/IHRyYWNrLmFydGlzdHNbMF0ubmFtZSA6ICcnXG4gICAgICAgICk7XG5cbiAgICAgICAgbGV0IHBhdGggPSBCYWNrZ3JvdW5kQXBpU2VydmljZS51c2VyU2V0dGluZ3MuZG93bmxvYWRQYXRoO1xuICAgICAgICBpZiAoQmFja2dyb3VuZEFwaVNlcnZpY2UudXNlclNldHRpbmdzLmRvd25sb2FkQXJ0aXN0c0luU2VwYXJhdGVGb2xkZXIpIHtcbiAgICAgICAgICBwYXRoICs9IGAke0JhY2tncm91bmRBcGlTZXJ2aWNlLmVuY29kZUZvbGRlck5hbWVfKFxuICAgICAgICAgICAgYXJ0aXN0LmFydGlzdC5uYW1lXG4gICAgICAgICAgKX0vYDtcbiAgICAgICAgfVxuXG4gICAgICAgIEJhY2tncm91bmRBcGlTZXJ2aWNlLmRvd25sb2FkTWFuYWdlci5kb3dubG9hZChcbiAgICAgICAgICBkb3dubG9hZFVybCxcbiAgICAgICAgICB0cmFjay50aXRsZSxcbiAgICAgICAgICBmaWxlbmFtZSArICcubXAzJyxcbiAgICAgICAgICBwYXRoLFxuICAgICAgICAgIHt0cmFja0lkOiB0cmFjay5pZCwgbG9jYWxlOiB0aGlzLnlhbmRleE11c2ljQXBpLmdldExvY2FsZSgpfVxuICAgICAgICApO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIEJhY2tncm91bmRBcGlTZXJ2aWNlLmVtaXRFcnJvcl8oZXJyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuY2hyb21lLnJ1bnRpbWUub25Db25uZWN0LmFkZExpc3RlbmVyKGFzeW5jIHBvcnQgPT4ge1xuICAvKiBgcG9ydC5uYW1lYCBpcyBsb2NhbGUgKi9cbiAgY2hyb21lLmJyb3dzZXJBY3Rpb24uc2V0SWNvbih7XG4gICAgcGF0aDogJ2ltYWdlcy9hY3RpdmUtaWNvbi5wbmcnLFxuICAgIHRhYklkOiBwb3J0LnNlbmRlcj8udGFiPy5pZCxcbiAgfSk7XG5cbiAgY29uc3QgYWRkRXZlbnRDYWxsYmFjayA9IGFzeW5jIChkb3dubG9hZEl0ZW06IERvd25sb2FkSXRlbSkgPT4ge1xuICAgIGNvbnN0IG1lc3NhZ2U6IENocm9tZU1lc3NhZ2UgPSB7XG4gICAgICB0eXBlOiBDaHJvbWVNZXNzYWdlVHlwZS5ET1dOTE9BRF9FVkVOVCxcbiAgICAgIGV2ZW50VHlwZTogJ2FkZCcsXG4gICAgICBkb3dubG9hZEl0ZW06IHtcbiAgICAgICAgLi4uZG93bmxvYWRJdGVtLFxuICAgICAgICBieXRlczogbnVsbCxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIHBvcnQucG9zdE1lc3NhZ2UobWVzc2FnZSk7XG4gIH07XG5cbiAgY29uc3QgcHJvZ3Jlc3NFdmVudENhbGxiYWNrID0gYXN5bmMgKGRvd25sb2FkSXRlbTogRG93bmxvYWRJdGVtKSA9PiB7XG4gICAgY29uc3QgbWVzc2FnZTogQ2hyb21lTWVzc2FnZSA9IHtcbiAgICAgIHR5cGU6IENocm9tZU1lc3NhZ2VUeXBlLkRPV05MT0FEX0VWRU5ULFxuICAgICAgZXZlbnRUeXBlOiAncHJvZ3Jlc3MnLFxuICAgICAgZG93bmxvYWRJdGVtOiB7XG4gICAgICAgIC4uLmRvd25sb2FkSXRlbSxcbiAgICAgICAgYnl0ZXM6IG51bGwsXG4gICAgICB9LFxuICAgIH07XG5cbiAgICBwb3J0LnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xuICB9O1xuXG4gIGNvbnN0IGludGVycnVwdGVkRXZlbnRDYWxsYmFjayA9IGFzeW5jIChkb3dubG9hZEl0ZW06IERvd25sb2FkSXRlbSkgPT4ge1xuICAgIGNvbnN0IG1lc3NhZ2U6IENocm9tZU1lc3NhZ2UgPSB7XG4gICAgICB0eXBlOiBDaHJvbWVNZXNzYWdlVHlwZS5ET1dOTE9BRF9FVkVOVCxcbiAgICAgIGV2ZW50VHlwZTogJ2ludGVycnVwdGVkJyxcbiAgICAgIGRvd25sb2FkSXRlbToge1xuICAgICAgICAuLi5kb3dubG9hZEl0ZW0sXG4gICAgICAgIGJ5dGVzOiBudWxsLFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgcG9ydC5wb3N0TWVzc2FnZShtZXNzYWdlKTtcbiAgfTtcblxuICBjb25zdCBjb21wbGV0ZUV2ZW50Q2FsbGJhY2sgPSBhc3luYyAoZG93bmxvYWRJdGVtOiBEb3dubG9hZEl0ZW0pID0+IHtcbiAgICBjb25zdCBtZXNzYWdlOiBDaHJvbWVNZXNzYWdlID0ge1xuICAgICAgdHlwZTogQ2hyb21lTWVzc2FnZVR5cGUuRE9XTkxPQURfRVZFTlQsXG4gICAgICBldmVudFR5cGU6ICdjb21wbGV0ZScsXG4gICAgICBkb3dubG9hZEl0ZW06IHtcbiAgICAgICAgLi4uZG93bmxvYWRJdGVtLFxuICAgICAgICBieXRlczogbnVsbCxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIHBvcnQucG9zdE1lc3NhZ2UobWVzc2FnZSk7XG4gIH07XG5cbiAgY29uc3QgZG93bmxvYWRFcnJvckV2ZW50Q2FsbGJhY2sgPSBhc3luYyAoXG4gICAgZG93bmxvYWRJdGVtOiBEb3dubG9hZEl0ZW0sXG4gICAgZXJyb3I6IEVycm9yXG4gICkgPT4ge1xuICAgIGNvbnN0IG1lc3NhZ2U6IENocm9tZU1lc3NhZ2UgPSB7XG4gICAgICB0eXBlOiBDaHJvbWVNZXNzYWdlVHlwZS5ET1dOTE9BRF9FUlJPUl9FVkVOVCxcbiAgICAgIGRvd25sb2FkSXRlbToge1xuICAgICAgICAuLi5kb3dubG9hZEl0ZW0sXG4gICAgICAgIGJ5dGVzOiBudWxsLFxuICAgICAgfSxcbiAgICAgIGVycm9yLFxuICAgIH07XG5cbiAgICBwb3J0LnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xuICB9O1xuXG4gIGNvbnN0IGVycm9yRXZlbnRDYWxsYmFjayA9IChlcnJvcjogRXJyb3IpID0+IHtcbiAgICBjb25zdCBtZXNzYWdlOiBDaHJvbWVNZXNzYWdlID0ge1xuICAgICAgdHlwZTogQ2hyb21lTWVzc2FnZVR5cGUuRVJST1JfRVZFTlQsXG4gICAgICBlcnJvcixcbiAgICB9O1xuXG4gICAgcG9ydC5wb3N0TWVzc2FnZShtZXNzYWdlKTtcbiAgfTtcblxuICBjb25zdCBiYWNrZ3JvdW5kQXBpID0gYXdhaXQgQmFja2dyb3VuZEFwaVNlcnZpY2UuZ2V0SW5zdGFuY2UocG9ydC5uYW1lKTtcbiAgcG9ydC5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIoKG1lc3NhZ2U6IENocm9tZU1lc3NhZ2UpID0+IHtcbiAgICBzd2l0Y2ggKG1lc3NhZ2UudHlwZSkge1xuICAgICAgY2FzZSBDaHJvbWVNZXNzYWdlVHlwZS5BRERfRE9XTkxPQURfTElTVEVORVI6IHtcbiAgICAgICAgQmFja2dyb3VuZEFwaVNlcnZpY2UuZG93bmxvYWRNYW5hZ2VyLm9uKCdhZGQnLCBhZGRFdmVudENhbGxiYWNrKTtcbiAgICAgICAgQmFja2dyb3VuZEFwaVNlcnZpY2UuZG93bmxvYWRNYW5hZ2VyLm9uKFxuICAgICAgICAgICdwcm9ncmVzcycsXG4gICAgICAgICAgcHJvZ3Jlc3NFdmVudENhbGxiYWNrXG4gICAgICAgICk7XG4gICAgICAgIEJhY2tncm91bmRBcGlTZXJ2aWNlLmRvd25sb2FkTWFuYWdlci5vbihcbiAgICAgICAgICAnaW50ZXJydXB0ZWQnLFxuICAgICAgICAgIGludGVycnVwdGVkRXZlbnRDYWxsYmFja1xuICAgICAgICApO1xuICAgICAgICBCYWNrZ3JvdW5kQXBpU2VydmljZS5kb3dubG9hZE1hbmFnZXIub24oXG4gICAgICAgICAgJ2NvbXBsZXRlJyxcbiAgICAgICAgICBjb21wbGV0ZUV2ZW50Q2FsbGJhY2tcbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIENocm9tZU1lc3NhZ2VUeXBlLkFERF9FUlJPUl9MSVNURU5FUjoge1xuICAgICAgICBCYWNrZ3JvdW5kQXBpU2VydmljZS5kb3dubG9hZE1hbmFnZXIub24oXG4gICAgICAgICAgJ2Vycm9yJyxcbiAgICAgICAgICBkb3dubG9hZEVycm9yRXZlbnRDYWxsYmFja1xuICAgICAgICApO1xuICAgICAgICBCYWNrZ3JvdW5kQXBpU2VydmljZS5vbignZXJyb3InLCBlcnJvckV2ZW50Q2FsbGJhY2spO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgQ2hyb21lTWVzc2FnZVR5cGUuRE9XTkxPQURfVFJBQ0s6IHtcbiAgICAgICAgYmFja2dyb3VuZEFwaS5kb3dubG9hZFRyYWNrKG1lc3NhZ2UudHJhY2tJZCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBDaHJvbWVNZXNzYWdlVHlwZS5ET1dOTE9BRF9BTEJVTToge1xuICAgICAgICBiYWNrZ3JvdW5kQXBpLmRvd25sb2FkQWxidW0obWVzc2FnZS5hbGJ1bUlkKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIENocm9tZU1lc3NhZ2VUeXBlLkRPV05MT0FEX1BMQVlMSVNUOiB7XG4gICAgICAgIGJhY2tncm91bmRBcGkuZG93bmxvYWRQbGF5bGlzdChtZXNzYWdlLm93bmVyLCBtZXNzYWdlLmtpbmQpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgQ2hyb21lTWVzc2FnZVR5cGUuRE9XTkxPQURfQVJUSVNUOiB7XG4gICAgICAgIGJhY2tncm91bmRBcGkuZG93bmxvYWRBcnRpc3QobWVzc2FnZS5hcnRpc3RJZCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBDaHJvbWVNZXNzYWdlVHlwZS5MSVNUX0RPV05MT0FEX0lURU1TOiB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2U6IENocm9tZU1lc3NhZ2UgPSB7XG4gICAgICAgICAgdHlwZTogQ2hyb21lTWVzc2FnZVR5cGUuTElTVF9ET1dOTE9BRF9JVEVNUyxcbiAgICAgICAgICBpdGVtczogQmFja2dyb3VuZEFwaVNlcnZpY2UuZG93bmxvYWRNYW5hZ2VyLmxpc3QoKS5tYXAoaXRlbSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gey4uLml0ZW0sIGJ5dGVzOiBudWxsfTtcbiAgICAgICAgICB9KSxcbiAgICAgICAgfTtcblxuICAgICAgICBwb3J0LnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgQ2hyb21lTWVzc2FnZVR5cGUuSU5URVJSVVBUX0RPV05MT0FEOiB7XG4gICAgICAgIEJhY2tncm91bmRBcGlTZXJ2aWNlLmRvd25sb2FkTWFuYWdlci5pbnRlcnJ1cHQobWVzc2FnZS5kb3dubG9hZEl0ZW1JZCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBjb25zb2xlLmRlYnVnKCdVbmtub3duIG1lc3NhZ2UgdHlwZTogJyArIG1lc3NhZ2UudHlwZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcG9ydC5vbkRpc2Nvbm5lY3QuYWRkTGlzdGVuZXIoKCkgPT4ge1xuICAgIC8qIFJlbW92ZSByZWdpc3RlcmVkIGhvb2tzICovXG4gICAgQmFja2dyb3VuZEFwaVNlcnZpY2UuZG93bmxvYWRNYW5hZ2VyLnJlbW92ZUxpc3RlbmVyKFxuICAgICAgJ2FkZCcsXG4gICAgICBhZGRFdmVudENhbGxiYWNrXG4gICAgKTtcbiAgICBCYWNrZ3JvdW5kQXBpU2VydmljZS5kb3dubG9hZE1hbmFnZXIucmVtb3ZlTGlzdGVuZXIoXG4gICAgICAncHJvZ3Jlc3MnLFxuICAgICAgcHJvZ3Jlc3NFdmVudENhbGxiYWNrXG4gICAgKTtcbiAgICBCYWNrZ3JvdW5kQXBpU2VydmljZS5kb3dubG9hZE1hbmFnZXIucmVtb3ZlTGlzdGVuZXIoXG4gICAgICAnaW50ZXJydXB0ZWQnLFxuICAgICAgaW50ZXJydXB0ZWRFdmVudENhbGxiYWNrXG4gICAgKTtcbiAgICBCYWNrZ3JvdW5kQXBpU2VydmljZS5kb3dubG9hZE1hbmFnZXIucmVtb3ZlTGlzdGVuZXIoXG4gICAgICAnY29tcGxldGUnLFxuICAgICAgY29tcGxldGVFdmVudENhbGxiYWNrXG4gICAgKTtcbiAgICAvKiBSZW1vdmUgcmVnaXN0ZXJlZCBlcnJvciBsaXN0ZW5lcnMgKi9cbiAgICBCYWNrZ3JvdW5kQXBpU2VydmljZS5kb3dubG9hZE1hbmFnZXIucmVtb3ZlTGlzdGVuZXIoXG4gICAgICAnZXJyb3InLFxuICAgICAgZG93bmxvYWRFcnJvckV2ZW50Q2FsbGJhY2tcbiAgICApO1xuICAgIEJhY2tncm91bmRBcGlTZXJ2aWNlLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIGVycm9yRXZlbnRDYWxsYmFjayk7XG4gIH0pO1xufSk7XG4iLCJpbXBvcnQge0V2ZW50VHlwZSwgRG93bmxvYWRJdGVtfSBmcm9tICcuLi9zZXJ2aWNlcy9kb3dubG9hZC1tYW5hZ2VyL2ludGVyZmFjZXMnO1xuXG5leHBvcnQgZW51bSBDaHJvbWVNZXNzYWdlVHlwZSB7XG4gIERPV05MT0FEX1RSQUNLID0gMCxcbiAgRE9XTkxPQURfQUxCVU0gPSAxLFxuICBET1dOTE9BRF9QTEFZTElTVCA9IDIsXG4gIERPV05MT0FEX0FSVElTVCA9IDMsXG5cbiAgQUREX0RPV05MT0FEX0xJU1RFTkVSID0gNCxcbiAgQUREX0VSUk9SX0xJU1RFTkVSID0gNSxcblxuICBET1dOTE9BRF9FVkVOVCA9IDYsXG4gIERPV05MT0FEX0VSUk9SX0VWRU5UID0gNyxcbiAgRVJST1JfRVZFTlQgPSA4LFxuXG4gIExJU1RfRE9XTkxPQURfSVRFTVMgPSA5LFxuICBJTlRFUlJVUFRfRE9XTkxPQUQgPSAxMCxcbn1cblxuZXhwb3J0IHR5cGUgQ2hyb21lTWVzc2FnZSA9XG4gIHwge1xuICAgICAgdHlwZTogQ2hyb21lTWVzc2FnZVR5cGUuRE9XTkxPQURfVFJBQ0s7XG4gICAgICB0cmFja0lkOiBudW1iZXI7XG4gICAgfVxuICB8IHtcbiAgICAgIHR5cGU6IENocm9tZU1lc3NhZ2VUeXBlLkRPV05MT0FEX0FMQlVNO1xuICAgICAgYWxidW1JZDogbnVtYmVyO1xuICAgIH1cbiAgfCB7XG4gICAgICB0eXBlOiBDaHJvbWVNZXNzYWdlVHlwZS5ET1dOTE9BRF9QTEFZTElTVDtcbiAgICAgIG93bmVyOiBzdHJpbmcgfCBudW1iZXI7XG4gICAgICBraW5kOiBudW1iZXI7XG4gICAgfVxuICB8IHtcbiAgICAgIHR5cGU6IENocm9tZU1lc3NhZ2VUeXBlLkRPV05MT0FEX0FSVElTVDtcbiAgICAgIGFydGlzdElkOiBudW1iZXI7XG4gICAgfVxuICB8IHtcbiAgICAgIHR5cGU6IENocm9tZU1lc3NhZ2VUeXBlLkFERF9ET1dOTE9BRF9MSVNURU5FUjtcbiAgICB9XG4gIHwge1xuICAgICAgdHlwZTogQ2hyb21lTWVzc2FnZVR5cGUuQUREX0VSUk9SX0xJU1RFTkVSO1xuICAgIH1cbiAgfCB7XG4gICAgICB0eXBlOiBDaHJvbWVNZXNzYWdlVHlwZS5ET1dOTE9BRF9FVkVOVDtcbiAgICAgIGV2ZW50VHlwZTogRXZlbnRUeXBlO1xuICAgICAgZG93bmxvYWRJdGVtOiBEb3dubG9hZEl0ZW0gJiB7Ynl0ZXM6IG51bGx9O1xuICAgIH1cbiAgfCB7XG4gICAgICB0eXBlOiBDaHJvbWVNZXNzYWdlVHlwZS5ET1dOTE9BRF9FUlJPUl9FVkVOVDtcbiAgICAgIGRvd25sb2FkSXRlbTogRG93bmxvYWRJdGVtICYge2J5dGVzOiBudWxsfTtcbiAgICAgIGVycm9yOiBFcnJvcjtcbiAgICB9XG4gIHwge1xuICAgICAgdHlwZTogQ2hyb21lTWVzc2FnZVR5cGUuRVJST1JfRVZFTlQ7XG4gICAgICBlcnJvcjogRXJyb3I7XG4gICAgfVxuICB8IHtcbiAgICAgIHR5cGU6IENocm9tZU1lc3NhZ2VUeXBlLkxJU1RfRE9XTkxPQURfSVRFTVM7XG4gICAgICBpdGVtczogKERvd25sb2FkSXRlbSAmIHtieXRlczogbnVsbH0pW107XG4gICAgfVxuICB8IHtcbiAgICAgIHR5cGU6IENocm9tZU1lc3NhZ2VUeXBlLklOVEVSUlVQVF9ET1dOTE9BRDtcbiAgICAgIGRvd25sb2FkSXRlbUlkOiBudW1iZXI7XG4gICAgfTtcbiIsImltcG9ydCBodHRwcyBmcm9tICdodHRwcyc7XG5pbXBvcnQge0luY29taW5nTWVzc2FnZX0gZnJvbSAnaHR0cCc7XG5cbmltcG9ydCB7XG4gIERvd25sb2FkSXRlbSxcbiAgRG93bmxvYWRNYW5hZ2VyIGFzIElEb3dubG9hZE1hbmFnZXIsXG4gIERvd25sb2FkSXRlbVN0YXRlLFxuICBFdmVudFR5cGUsXG4gIEFzeW5jRXZlbnRDYWxsYmFjayxcbiAgQXN5bmNFcnJvckNhbGxiYWNrLFxufSBmcm9tICcuL2ludGVyZmFjZXMnO1xuXG50eXBlIERvd25sb2FkUGFydGlhbENhbGxiYWNrID0gKFxuICBieXRlczogbnVtYmVyLFxuICB0b3RhbEJ5dGVzOiBudW1iZXIsXG4gIGNsb3NlQ29ubmVjdGlvbjogKCkgPT4gdm9pZFxuKSA9PiB2b2lkO1xuXG5leHBvcnQgY2xhc3MgRG93bmxvYWRNYW5hZ2VyIGltcGxlbWVudHMgSURvd25sb2FkTWFuYWdlciB7XG4gIHByaXZhdGUgY29uY3VycmVuY3lfOiBudW1iZXI7XG5cbiAgcHJpdmF0ZSBsYXN0SWRfID0gMTtcbiAgcHJpdmF0ZSBpblByb2dyZXNzU2l6ZV86IG51bWJlcjtcbiAgcHJpdmF0ZSBkb3dubG9hZFF1ZXVlXzogRG93bmxvYWRJdGVtW107XG5cbiAgcHJpdmF0ZSBxdWV1ZVBhdXNlZF86IGJvb2xlYW47XG5cbiAgcHJpdmF0ZSBhc3luYyBkb3dubG9hZEJ1ZmZlcl8oXG4gICAgdXJpOiBzdHJpbmcsXG4gICAgY2FsbGJhY2s6IERvd25sb2FkUGFydGlhbENhbGxiYWNrXG4gICkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICBwYXRoOiB1cmksXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIENvbm5lY3Rpb246ICdrZWVwLWFsaXZlJyxcbiAgICAgICAgQWNjZXB0OiAnKi8qJyxcbiAgICAgICAgJ0FjY2Vzcy1Db250cm9sLUFsbG93LUhlYWRlcnMnOiAnb3JpZ2luLCBjb250ZW50LXR5cGUsIGFjY2VwdCcsXG4gICAgICB9LFxuICAgIH07XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2U8QnVmZmVyIHwgbnVsbD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgcmVxdWVzdCA9IGh0dHBzXG4gICAgICAgIC5nZXQob3B0aW9ucywgKHJlczogSW5jb21pbmdNZXNzYWdlKSA9PiB7XG4gICAgICAgICAgY29uc3QgcmF3RGF0YTogQnVmZmVyW10gPSBbXTtcbiAgICAgICAgICBjb25zdCB0b3RhbEJ5dGVzID0gKyhyZXMuaGVhZGVyc1snY29udGVudC1sZW5ndGgnXSA/PyAtMSk7XG5cbiAgICAgICAgICBjb25zdCBjbG9zZUNvbm5lY3Rpb24gPSAoKSA9PiB7XG4gICAgICAgICAgICByZXF1ZXN0LmRlc3Ryb3koKTtcbiAgICAgICAgICAgIHJlc29sdmUobnVsbCk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHJlcy5vbignZGF0YScsIChjaHVuazogQnVmZmVyKSA9PiB7XG4gICAgICAgICAgICByYXdEYXRhLnB1c2goY2h1bmspO1xuICAgICAgICAgICAgY2FsbGJhY2soY2h1bmsuYnl0ZUxlbmd0aCwgdG90YWxCeXRlcywgY2xvc2VDb25uZWN0aW9uKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXMub24oJ2Vycm9yJywgcmVqZWN0KTtcbiAgICAgICAgICByZXMub24oJ2VuZCcsICgpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUoQnVmZmVyLmNvbmNhdChyYXdEYXRhKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5vbignZXJyb3InLCByZWplY3QpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBxdWV1ZVJlbW92ZV8oZG93bmxvYWRJdGVtSWQ6IG51bWJlcikge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5kb3dubG9hZFF1ZXVlXy5maW5kSW5kZXgoXG4gICAgICBpdGVtID0+IGl0ZW0uaWQgPT09IGRvd25sb2FkSXRlbUlkXG4gICAgKTtcblxuICAgIGlmIChpbmRleCA9PT0gLTEpIHJldHVybjtcbiAgICB0aGlzLmRvd25sb2FkUXVldWVfLnNwbGljZShpbmRleCwgMSk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHF1ZXVlUHJvY2Vzc05leHRfKCkge1xuICAgIGlmICh0aGlzLmluUHJvZ3Jlc3NTaXplXyA9PT0gdGhpcy5jb25jdXJyZW5jeV8pIHJldHVybjtcbiAgICBpZiAodGhpcy5xdWV1ZVBhdXNlZF8pIHJldHVybjtcblxuICAgIGNvbnN0IGRvd25sb2FkSXRlbSA9IHRoaXMuZG93bmxvYWRRdWV1ZV8uZmluZChcbiAgICAgIGl0ZW0gPT4gaXRlbS5zdGF0ZSA9PT0gRG93bmxvYWRJdGVtU3RhdGUuUEVORElOR1xuICAgICk7XG5cbiAgICBpZiAoIWRvd25sb2FkSXRlbSkgcmV0dXJuO1xuXG4gICAgdGhpcy5pblByb2dyZXNzU2l6ZV8rKztcblxuICAgIGRvd25sb2FkSXRlbS5zdGFydE1zID0gRGF0ZS5ub3coKTtcbiAgICBkb3dubG9hZEl0ZW0uc3RhdGUgPSBEb3dubG9hZEl0ZW1TdGF0ZS5JTl9QUk9HUkVTUztcblxuICAgIC8qIEVNSVQgc3RhdGUgY2hhbmdlICovXG4gICAgdGhpcy5lbWl0XygncHJvZ3Jlc3MnLCBkb3dubG9hZEl0ZW0pO1xuXG4gICAgdHJ5IHtcbiAgICAgIGRvd25sb2FkSXRlbS5ieXRlcyA9IGF3YWl0IHRoaXMuZG93bmxvYWRCdWZmZXJfKFxuICAgICAgICBkb3dubG9hZEl0ZW0udXJpLFxuICAgICAgICAoY3VyLCB0b3RhbCwgY2xvc2VDb25uZWN0aW9uKSA9PiB7XG4gICAgICAgICAgZG93bmxvYWRJdGVtLnNpemUgPSB0b3RhbDtcbiAgICAgICAgICBkb3dubG9hZEl0ZW0uZG93bmxvYWRlZFNpemUgKz0gY3VyO1xuXG4gICAgICAgICAgaWYgKGRvd25sb2FkSXRlbS5zdGF0ZSA9PT0gRG93bmxvYWRJdGVtU3RhdGUuSU5URVJSVVBURUQpIHtcbiAgICAgICAgICAgIGNsb3NlQ29ubmVjdGlvbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvKiBFTUlUIHByb2dyZXNzICovXG4gICAgICAgICAgdGhpcy5lbWl0XygncHJvZ3Jlc3MnLCBkb3dubG9hZEl0ZW0pO1xuICAgICAgICB9XG4gICAgICApO1xuXG4gICAgICBpZiAoZG93bmxvYWRJdGVtLmJ5dGVzID09PSBudWxsKSB7XG4gICAgICAgIGRvd25sb2FkSXRlbS5zdGF0ZSA9IERvd25sb2FkSXRlbVN0YXRlLklOVEVSUlVQVEVEO1xuICAgICAgICAvKiBFTUlUIGludGVycnVwdGVkICovXG4gICAgICAgIHRoaXMuZW1pdF8oJ2ludGVycnVwdGVkJywgZG93bmxvYWRJdGVtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRvd25sb2FkSXRlbS5zdGF0ZSA9IERvd25sb2FkSXRlbVN0YXRlLkNPTVBMRVRFO1xuICAgICAgICAvKiBFTUlUIGNvbXBsZXRlICovXG4gICAgICAgIHRoaXMuZW1pdF8oJ2NvbXBsZXRlJywgZG93bmxvYWRJdGVtKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGRvd25sb2FkSXRlbS5zdGF0ZSA9IERvd25sb2FkSXRlbVN0YXRlLkVSUk9SO1xuICAgICAgLyogRU1JVCBFUlJPUiAqL1xuICAgICAgdGhpcy5lbWl0RXJyb3JfKGRvd25sb2FkSXRlbSwgZXJyKTtcbiAgICB9XG5cbiAgICB0aGlzLmluUHJvZ3Jlc3NTaXplXy0tO1xuXG4gICAgdGhpcy5xdWV1ZVJlbW92ZV8oZG93bmxvYWRJdGVtLmlkKTtcbiAgICB0aGlzLnF1ZXVlUHJvY2Vzc05leHRfKCk7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihjb25jdXJyZW5jeSA9IDEpIHtcbiAgICB0aGlzLmRvd25sb2FkUXVldWVfID0gW107XG4gICAgdGhpcy5xdWV1ZVBhdXNlZF8gPSBmYWxzZTtcbiAgICB0aGlzLmNvbmN1cnJlbmN5XyA9IGNvbmN1cnJlbmN5O1xuXG4gICAgdGhpcy5pblByb2dyZXNzU2l6ZV8gPSAwO1xuICB9XG4gIC8qKlxuICAgKiBEb3dubG9hZHMgZmlsZSBmcm9tIHByb3ZpZGVkIHVyaSBhbmQgc2F2ZXMgaXRcbiAgICovXG4gIGRvd25sb2FkKFxuICAgIHVyaTogc3RyaW5nLFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBmaWxlbmFtZTogc3RyaW5nLFxuICAgIGRvd25sb2FkUGF0aCA9ICcnLFxuICAgIGN1c3RvbURhdGE/OiB7W2tleTogc3RyaW5nXTogc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbiB8IEJ1ZmZlcn1cbiAgKTogRG93bmxvYWRJdGVtIHtcbiAgICBjb25zdCBkb3dubG9hZEl0ZW06IERvd25sb2FkSXRlbSA9IHtcbiAgICAgIGlkOiB0aGlzLmxhc3RJZF8rKyxcbiAgICAgIG5hbWUsXG4gICAgICBzdGF0ZTogRG93bmxvYWRJdGVtU3RhdGUuUEVORElORyxcbiAgICAgIGZpbGVuYW1lLFxuICAgICAgZG93bmxvYWRQYXRoLFxuICAgICAgdXJpLFxuICAgICAgYnl0ZXM6IG51bGwsXG4gICAgICBzaXplOiAtMSxcbiAgICAgIGRvd25sb2FkZWRTaXplOiAwLFxuICAgICAgc3RhcnRNczogLTEgLyogdGltZXN0YW1wIGluIG1zICovLFxuICAgICAgY3VzdG9tRGF0YSxcbiAgICB9O1xuXG4gICAgdGhpcy5kb3dubG9hZFF1ZXVlXy5wdXNoKGRvd25sb2FkSXRlbSk7XG5cbiAgICB0aGlzLmVtaXRfKCdhZGQnLCBkb3dubG9hZEl0ZW0pO1xuXG4gICAgdGhpcy5xdWV1ZVByb2Nlc3NOZXh0XygpO1xuXG4gICAgcmV0dXJuIGRvd25sb2FkSXRlbTtcbiAgfVxuICAvKipcbiAgICogU3RvcHMgZG93bmxvYWRpbmcuXG4gICAqIEByZXR1cm4gdHJ1ZSBpZiBzdWNjZXNzZWVkXG4gICAqL1xuICBpbnRlcnJ1cHQoZG93bmxvYWRJdGVtSWQ6IG51bWJlcikge1xuICAgIGNvbnN0IGRvd25sb2FkSXRlbSA9IHRoaXMuZG93bmxvYWRRdWV1ZV8uZmluZChcbiAgICAgIGl0ZW0gPT4gaXRlbS5pZCA9PT0gZG93bmxvYWRJdGVtSWRcbiAgICApO1xuXG4gICAgaWYgKGRvd25sb2FkSXRlbSkge1xuICAgICAgaWYgKGRvd25sb2FkSXRlbS5zdGF0ZSA9PT0gRG93bmxvYWRJdGVtU3RhdGUuSU5fUFJPR1JFU1MpIHtcbiAgICAgICAgZG93bmxvYWRJdGVtLnN0YXRlID0gRG93bmxvYWRJdGVtU3RhdGUuSU5URVJSVVBURUQ7XG4gICAgICB9IGVsc2UgaWYgKGRvd25sb2FkSXRlbS5zdGF0ZSA9PT0gRG93bmxvYWRJdGVtU3RhdGUuUEVORElORykge1xuICAgICAgICBkb3dubG9hZEl0ZW0uc3RhdGUgPSBEb3dubG9hZEl0ZW1TdGF0ZS5JTlRFUlJVUFRFRDtcbiAgICAgICAgLyogRU1JVCBpbnRlcnJ1cHRlZCAqL1xuICAgICAgICB0aGlzLmVtaXRfKCdpbnRlcnJ1cHRlZCcsIGRvd25sb2FkSXRlbSk7XG4gICAgICAgIHRoaXMucXVldWVSZW1vdmVfKGRvd25sb2FkSXRlbUlkKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZXMgaXRlbSBmcm9tIHF1ZXVlLlxuICAgKi9cbiAgcmVtb3ZlKGRvd25sb2FkSXRlbUlkOiBudW1iZXIpIHtcbiAgICB0aGlzLnF1ZXVlUmVtb3ZlXyhkb3dubG9hZEl0ZW1JZCk7XG4gIH1cbiAgLyoqXG4gICAqIFByb2NlZWRzIHF1ZXVlIGV4ZWN1dGlvbi5cbiAgICovXG4gIHJ1bigpOiB2b2lkIHtcbiAgICB0aGlzLnF1ZXVlUGF1c2VkXyA9IGZhbHNlO1xuICAgIHRoaXMucXVldWVQcm9jZXNzTmV4dF8oKTtcbiAgfVxuICAvKipcbiAgICogU3RvcHMgcXVldWUgZXhlY3V0aW9uLiBEb2VuJ3Qgc3RvcCBkb3dubG9hZHMgaW4gcHJvZ3Jlc3MuXG4gICAqIE9ubHkgcHJldmVudCBuZXcgb25lcyBmcm9tIGJlaW5nIGRvd25sb2FkZWQuXG4gICAqL1xuICBzdG9wKCk6IHZvaWQge1xuICAgIHRoaXMucXVldWVQYXVzZWRfID0gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogQ2xlYXJzIHRoZSBxdWV1ZS4gUmVtb3ZlcyBmcm9tIHF1ZXVlIGFsbCBlbGVtZW50cyB0aGF0XG4gICAqIGFyZSBub3QgYmVpbmcgZG93bmxvYWRlZC5cbiAgICovXG4gIGNsZWFyKCk6IHZvaWQge1xuICAgIHRoaXMuZG93bmxvYWRRdWV1ZV8gPSB0aGlzLmRvd25sb2FkUXVldWVfLmZpbHRlcihcbiAgICAgIGl0ZW0gPT4gaXRlbS5zdGF0ZSAhPT0gRG93bmxvYWRJdGVtU3RhdGUuUEVORElOR1xuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIEByZXR1cm4gY3VycmVudCBsaXN0IG9mIGRvd25sb2FkIGl0ZW1zXG4gICAqL1xuICBsaXN0KCk6IERvd25sb2FkSXRlbVtdIHtcbiAgICByZXR1cm4gdGhpcy5kb3dubG9hZFF1ZXVlXztcbiAgfVxuICAvKipcbiAgICogQHJldHVybiBjdXJyZW50IHNpemUgb2YgcXVldWVcbiAgICovXG4gIHNpemUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5kb3dubG9hZFF1ZXVlXy5sZW5ndGg7XG4gIH1cbiAgLyoqXG4gICAqIEByZXR1cm4gbnVtYmVyIG9mIGl0ZW1zIHRoYXQgaXMgY3VycmVudGx5IGRvd25sb2FkaW5nXG4gICAqL1xuICBpblByb2dyZXNzU2l6ZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmluUHJvZ3Jlc3NTaXplXztcbiAgfVxuXG4gIC8qIEhvb2tzICovXG5cbiAgcHJpdmF0ZSBsaXN0ZW5lcnNfOiB7W2tleTogc3RyaW5nXTogQXN5bmNFdmVudENhbGxiYWNrW119ID0ge1xuICAgIGFkZDogW10sXG4gICAgaW50ZXJydXB0ZWQ6IFtdLFxuICAgIHByb2dyZXNzOiBbXSxcbiAgICBjb21wbGV0ZTogW10sXG4gIH07XG4gIHByaXZhdGUgZXJyb3JMaXN0ZW5lcnNfOiBBc3luY0Vycm9yQ2FsbGJhY2tbXSA9IFtdO1xuICAvKipcbiAgICogRW1pdHMgZXZlbnQgb2YgdHlwZSBgdHlwZWAgcGFzc2luZyB0byBpdCB0YXJnZXQgZG93bmxvYWQgaXRlbVxuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBlbWl0Xyh0eXBlOiBFdmVudFR5cGUsIGl0ZW06IERvd25sb2FkSXRlbSkge1xuICAgIGZvciBhd2FpdCAoY29uc3QgbGlzdGVuZXIgb2YgdGhpcy5saXN0ZW5lcnNfW3R5cGVdKSB7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBsaXN0ZW5lcihpdGVtKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBFbWl0cyBlcnJvciBldmVudCBwYXNzaW5nIHRvIGl0IHRhcmdldCBkb3dubG9hZCBpdGVtIGFuZCBlcnJvclxuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBlbWl0RXJyb3JfKGl0ZW06IERvd25sb2FkSXRlbSwgZXJyOiBFcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICBmb3IgYXdhaXQgKGNvbnN0IGVycm9yTGlzdGVuZXIgb2YgdGhpcy5lcnJvckxpc3RlbmVyc18pIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGVycm9yTGlzdGVuZXIoaXRlbSwgZXJyKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyogRXZlbnRzICovXG4gIG9uKFxuICAgIHR5cGU6IEV2ZW50VHlwZSB8ICdlcnJvcicsXG4gICAgY2FsbGJhY2s6IEFzeW5jRXZlbnRDYWxsYmFjayB8IEFzeW5jRXJyb3JDYWxsYmFja1xuICApOiB2b2lkIHtcbiAgICBpZiAodHlwZSA9PT0gJ2Vycm9yJykge1xuICAgICAgaWYgKCF0aGlzLmVycm9yTGlzdGVuZXJzXy5pbmNsdWRlcyhjYWxsYmFjaykpIHtcbiAgICAgICAgdGhpcy5lcnJvckxpc3RlbmVyc18ucHVzaChjYWxsYmFjayk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghdGhpcy5saXN0ZW5lcnNfW3R5cGVdLmluY2x1ZGVzKGNhbGxiYWNrIGFzIEFzeW5jRXZlbnRDYWxsYmFjaykpIHtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnNfW3R5cGVdLnB1c2goY2FsbGJhY2sgYXMgQXN5bmNFdmVudENhbGxiYWNrKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyogUmVtb3ZlcyBob29rICovXG4gIHJlbW92ZUxpc3RlbmVyKFxuICAgIHR5cGU6IEV2ZW50VHlwZSB8ICdlcnJvcicsXG4gICAgY2FsbGJhY2s6IEFzeW5jRXZlbnRDYWxsYmFjayB8IEFzeW5jRXJyb3JDYWxsYmFja1xuICApOiB2b2lkIHtcbiAgICBpZiAodHlwZSA9PT0gJ2Vycm9yJykge1xuICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmVycm9yTGlzdGVuZXJzXy5pbmRleE9mKGNhbGxiYWNrKTtcbiAgICAgIGlmIChpbmRleCA9PT0gLTEpIHJldHVybjtcblxuICAgICAgdGhpcy5lcnJvckxpc3RlbmVyc18uc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmxpc3RlbmVyc19bdHlwZV0uaW5kZXhPZihcbiAgICAgICAgY2FsbGJhY2sgYXMgQXN5bmNFdmVudENhbGxiYWNrXG4gICAgICApO1xuICAgICAgaWYgKGluZGV4ID09PSAtMSkgcmV0dXJuO1xuXG4gICAgICB0aGlzLmxpc3RlbmVyc19bdHlwZV0uc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gIH1cbn1cbiIsImV4cG9ydCBlbnVtIERvd25sb2FkSXRlbVN0YXRlIHtcbiAgUEVORElORyA9ICdwZW5kaW5nJyxcbiAgSU5fUFJPR1JFU1MgPSAnaW5fcHJvZ3Jlc3MnLFxuICBJTlRFUlJVUFRFRCA9ICdpbnRlcnJ1cHRlZCcsXG4gIENPTVBMRVRFID0gJ2NvbXBsZXRlJyxcbiAgRVJST1IgPSAnZXJyb3InLFxufVxuXG5leHBvcnQgdHlwZSBEb3dubG9hZEl0ZW0gPSB7XG4gIGlkOiBudW1iZXI7XG4gIG5hbWU6IHN0cmluZztcblxuICBzdGF0ZTogRG93bmxvYWRJdGVtU3RhdGU7XG5cbiAgZmlsZW5hbWU6IHN0cmluZztcbiAgZG93bmxvYWRQYXRoOiBzdHJpbmc7XG4gIHVyaTogc3RyaW5nO1xuXG4gIGJ5dGVzOiBCdWZmZXIgfCBudWxsO1xuICBzaXplOiBudW1iZXI7XG4gIGRvd25sb2FkZWRTaXplOiBudW1iZXI7XG5cbiAgc3RhcnRNczogbnVtYmVyIC8qIHRpbWVzdGFtcCBpbiBtcyAqLztcblxuICBjdXN0b21EYXRhPzoge1trZXk6IHN0cmluZ106IG51bWJlciB8IHN0cmluZyB8IGJvb2xlYW4gfCBCdWZmZXJ9O1xufTtcblxuZXhwb3J0IHR5cGUgRXZlbnRUeXBlID0gJ2FkZCcgfCAnaW50ZXJydXB0ZWQnIHwgJ3Byb2dyZXNzJyB8ICdjb21wbGV0ZSc7XG5leHBvcnQgdHlwZSBBc3luY0V2ZW50Q2FsbGJhY2sgPSAoaXRlbTogRG93bmxvYWRJdGVtKSA9PiBQcm9taXNlPHZvaWQ+O1xuZXhwb3J0IHR5cGUgQXN5bmNFcnJvckNhbGxiYWNrID0gKFxuICBpdGVtOiBEb3dubG9hZEl0ZW0sXG4gIGVycjogRXJyb3JcbikgPT4gUHJvbWlzZTx2b2lkPjtcblxuZXhwb3J0IGludGVyZmFjZSBEb3dubG9hZE1hbmFnZXIge1xuICAvKipcbiAgICogRG93bmxvYWRzIGZpbGUgZnJvbSBwcm92aWRlZCB1cmkgYW5kIHNhdmVzIGl0XG4gICAqL1xuICBkb3dubG9hZChcbiAgICB1cmk6IHN0cmluZyxcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgZmlsZW5hbWU6IHN0cmluZyxcbiAgICBkb3dubG9hZFBhdGg/OiBzdHJpbmdcbiAgKTogRG93bmxvYWRJdGVtO1xuICAvKipcbiAgICogU3RvcHMgZG93bmxvYWRpbmcuXG4gICAqIEByZXR1cm4gdHJ1ZSBpZiBzdWNjZXNzZWVkXG4gICAqL1xuICBpbnRlcnJ1cHQoZG93bmxvYWRJdGVtSWQ6IG51bWJlcik6IHZvaWQ7XG4gIC8qKlxuICAgKiBSZW1vdmVzIGl0ZW0gZnJvbSBxdWV1ZS5cbiAgICovXG4gIHJlbW92ZShkb3dubG9hZEl0ZW1JZDogbnVtYmVyKTogdm9pZDtcbiAgLyoqXG4gICAqIFByb2NlZWRzIHF1ZXVlIGV4ZWN1dGlvbi5cbiAgICovXG4gIHJ1bigpOiB2b2lkO1xuICAvKipcbiAgICogU3RvcHMgcXVldWUgZXhlY3V0aW9uLiBEb2VuJ3Qgc3RvcCBkb3dubG9hZHMgaW4gcHJvZ3Jlc3MuXG4gICAqIE9ubHkgcHJldmVudCBuZXcgb25lcyBmcm9tIGJlaW5nIGRvd25sb2FkZWQuXG4gICAqL1xuICBzdG9wKCk6IHZvaWQ7XG4gIC8qKlxuICAgKiBDbGVhcnMgdGhlIHF1ZXVlLiBSZW1vdmVzIGZyb20gcXVldWUgYWxsIGVsZW1lbnRzIHRoYXRcbiAgICogYXJlIG5vdCBiZWluZyBkb3dubG9hZGVkLlxuICAgKi9cbiAgY2xlYXIoKTogdm9pZDtcbiAgLyoqXG4gICAqIEByZXR1cm4gY3VycmVudCBsaXN0IG9mIGRvd25sb2FkIGl0ZW1zXG4gICAqL1xuICBsaXN0KCk6IERvd25sb2FkSXRlbVtdO1xuICAvKipcbiAgICogQHJldHVybiBjdXJyZW50IHNpemUgb2YgcXVldWVcbiAgICovXG4gIHNpemUoKTogbnVtYmVyO1xuICAvKipcbiAgICogQHJldHVybiBudW1iZXIgb2YgaXRlbXMgdGhhdCBpcyBjdXJyZW50bHkgZG93bmxvYWRpbmdcbiAgICovXG4gIGluUHJvZ3Jlc3NTaXplKCk6IG51bWJlcjtcblxuICAvKiBIb29rcyAqL1xuICBvbih0eXBlOiBFdmVudFR5cGUsIGNhbGxiYWNrOiBBc3luY0V2ZW50Q2FsbGJhY2spOiB2b2lkO1xuICAvKiBFcnJvciB3aGlsZSBwcm9jZXNzaW5nIGRvd25sb2FkIGl0ZW0gKi9cbiAgb24odHlwZTogJ2Vycm9yJywgY2FsbGJhY2s6IEFzeW5jRXJyb3JDYWxsYmFjayk6IHZvaWQ7XG4gIC8qIFJlbW92ZXMgaG9vayAqL1xuICByZW1vdmVMaXN0ZW5lcih0eXBlOiBFdmVudFR5cGUsIGNhbGxiYWNrOiBBc3luY0V2ZW50Q2FsbGJhY2spOiB2b2lkO1xuICAvKiBSZW1vdmVzIGVycm9yIGxpc3RlbmVyICovXG4gIHJlbW92ZUxpc3RlbmVyKHR5cGU6ICdlcnJvcicsIGNhbGxiYWNrOiBBc3luY0Vycm9yQ2FsbGJhY2spOiB2b2lkO1xufVxuIiwiaW1wb3J0IElEM1dyaXRlciBmcm9tICdicm93c2VyLWlkMy13cml0ZXInO1xuaW1wb3J0IHtJU082MzkxVG9JU082MzkyQ29udmVydGVyfSBmcm9tICcuL2lzbzYzOTEtdG8taXNvNjM5Mic7XG5cbmV4cG9ydCBjbGFzcyBUcmFja0lEM1RhZ1dyaXRlciB7XG4gIHByb3RlY3RlZCBzb25nQnVmZmVyXzogQnVmZmVyO1xuICBwcm90ZWN0ZWQgaWQzV3JpdGVyXzogSUQzV3JpdGVyO1xuICBwcm90ZWN0ZWQgbGFuZ3VhZ2VDb252ZXJ0ZXJfOiBJU082MzkxVG9JU082MzkyQ29udmVydGVyO1xuXG4gIGNvbnN0cnVjdG9yKHNvbmdCdWZmZXI6IEJ1ZmZlcikge1xuICAgIC8qIERvZXNudCBjcmVhdGUgYSBjb3B5LCBqdXN0IHJlZmVyZW5jZSAqL1xuICAgIHRoaXMuc29uZ0J1ZmZlcl8gPSBzb25nQnVmZmVyO1xuICAgIHRoaXMuaWQzV3JpdGVyXyA9IG5ldyBJRDNXcml0ZXIodGhpcy5zb25nQnVmZmVyXyk7XG4gICAgdGhpcy5sYW5ndWFnZUNvbnZlcnRlcl8gPSBuZXcgSVNPNjM5MVRvSVNPNjM5MkNvbnZlcnRlcignZW5nJyk7XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgc29uZyB0aXRsZVxuICAgKi9cbiAgc2V0VGl0bGUodGl0bGU6IHN0cmluZyk6IHRoaXMge1xuICAgIHRoaXMuaWQzV3JpdGVyXy5zZXRGcmFtZSgnVElUMicsIHRpdGxlKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogU2V0cyBzb25nIHZlcnNpb24uXG4gICAqIGUuZy4gcmVtYXN0ZXJlZCwgY292ZXIsIGFjb3VzdGljIGV0Yy5cbiAgICovXG4gIHNldFZlcnNpb24odmVyc2lvbjogc3RyaW5nKTogdGhpcyB7XG4gICAgdGhpcy5pZDNXcml0ZXJfLnNldEZyYW1lKCdUSVQzJywgdmVyc2lvbik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgc29uZyBsYW5ndWFnZS5cbiAgICogTGFuZ3VhZ2UgbXVzdCBiZSBjb2RlZCBmb2xsb3dpbmcgdGhlIElTTyA2MzktMiBzdGFuZGFyZHNcbiAgICovXG4gIHNldExhbmd1YWdlKGxhbmd1YWdlOiBzdHJpbmcpOiB0aGlzIHtcbiAgICB0aGlzLmlkM1dyaXRlcl8uc2V0RnJhbWUoJ1RMQU4nLCB0aGlzLmxhbmd1YWdlQ29udmVydGVyXy5jb252ZXJ0KGxhbmd1YWdlKSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgc29uZyBkdXJhdGlvbiBpbiBtaWxsaXNlY29uZHNcbiAgICovXG4gIHNldER1cmF0aW9uKGR1cmF0aW9uOiBudW1iZXIpOiB0aGlzIHtcbiAgICB0aGlzLmlkM1dyaXRlcl8uc2V0RnJhbWUoJ1RMRU4nLCBkdXJhdGlvbik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgdHlwZSBvZiB0cmFjay5cbiAgICogZS5nLiBzb25nLCBtdXNpY1xuICAgKi9cbiAgc2V0VHlwZSh0eXBlOiBzdHJpbmcpOiB0aGlzIHtcbiAgICB0aGlzLmlkM1dyaXRlcl8uc2V0RnJhbWUoJ1RNRUQnLCB0eXBlKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogU2V0cyBnZW5yZSBvZiB0aGUgc29uZy5cbiAgICogZS5nLiByb2NrIHBvcCBlbGVjdHJvXG4gICAqL1xuICBzZXRHZW5yZShnZW5yZTogc3RyaW5nKTogdGhpcyB7XG4gICAgdGhpcy5pZDNXcml0ZXJfLnNldEZyYW1lKCdUQ09OJywgW2dlbnJlXSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgbmFtZSBvZiB0aGUgYWxidW0ncyBsYWJlbFxuICAgKi9cbiAgc2V0TGFiZWwobGFiZWw6IHN0cmluZyk6IHRoaXMge1xuICAgIHRoaXMuaWQzV3JpdGVyXy5zZXRGcmFtZSgnVFBVQicsIGxhYmVsKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogU2V0cyBseXJpYyBvZiB0aGUgc29uZy5cbiAgICogTGFuZ3VhZ2UgbXVzdCBiZSBjb2RlZCBmb2xsb3dpbmcgdGhlIElTTyA2MzktMiBzdGFuZGFyZHNcbiAgICovXG4gIHNldEx5cmljKGx5cmljczogc3RyaW5nLCBkZXNjcmlwdGlvbjogc3RyaW5nLCBsYW5ndWFnZT86IHN0cmluZyk6IHRoaXMge1xuICAgIHRoaXMuaWQzV3JpdGVyXy5zZXRGcmFtZSgnVVNMVCcsIHtcbiAgICAgIGx5cmljcyxcbiAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgbGFuZ3VhZ2U6IHRoaXMubGFuZ3VhZ2VDb252ZXJ0ZXJfLmNvbnZlcnQobGFuZ3VhZ2UgfHwgJ2VuJyksXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgY292ZXIgb2YgdGhlIHNvbmcuXG4gICAqIEltYWdlIGRhdGEgbXVzdCBiZSBpbiBidWZmZXIgZm9ybWF0XG4gICAqL1xuICBzZXRDb3ZlcihkYXRhOiBCdWZmZXIsIGRlc2NyaXB0aW9uOiBzdHJpbmcpOiB0aGlzIHtcbiAgICB0aGlzLmlkM1dyaXRlcl8uc2V0RnJhbWUoJ0FQSUMnLCB7XG4gICAgICB0eXBlOiAzLFxuICAgICAgZGF0YSxcbiAgICAgIGRlc2NyaXB0aW9uLFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIGFydGlzdHMgb2YgdGhlIHNvbmcgYXMgYW4gYXJyYXkgb2Ygc3RyaW5nc1xuICAgKi9cbiAgc2V0QXJ0aXN0cyhhcnRpc3RzOiBzdHJpbmdbXSk6IHRoaXMge1xuICAgIHRoaXMuaWQzV3JpdGVyXy5zZXRGcmFtZSgnVFBFMScsIGFydGlzdHMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBzb25nJ3MgYWxidW1cbiAgICovXG4gIHNldEFsYnVtKGFsYnVtOiB7dGl0bGU/OiBzdHJpbmc7IGFydGlzdD86IHN0cmluZzsgeWVhcj86IG51bWJlcn0pOiB0aGlzIHtcbiAgICBpZiAoYWxidW0udGl0bGUpIHRoaXMuaWQzV3JpdGVyXy5zZXRGcmFtZSgnVEFMQicsIGFsYnVtLnRpdGxlKTtcbiAgICBpZiAoYWxidW0uYXJ0aXN0KSB0aGlzLmlkM1dyaXRlcl8uc2V0RnJhbWUoJ1RQRTInLCBhbGJ1bS5hcnRpc3QpO1xuICAgIGlmIChhbGJ1bS55ZWFyKSB0aGlzLmlkM1dyaXRlcl8uc2V0RnJhbWUoJ1RZRVInLCBhbGJ1bS55ZWFyKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogU2V0cyB0cmFjayBwb3NpdGlvbiBpbiBzcGVjaWZpYyBhbGJ1bSBvciBwbGF5bGlzdC5cbiAgICogRm9yIGFsYnVtIGl0cyAndHJhY2suYWxidW1bMF0udHJhY2tQb3NpdGlvbi5pbmRleCcuXG4gICAqIEZvciBwbGF5bGlzdCBpdHMgJ3BsYXlsaXN0LnRyYWNrSWRzLmluZGV4T2YoK3RyYWNrLmlkKSdcbiAgICovXG4gIHNldFBvc2l0aW9uSW5BbGJ1bShwb3NpdGlvbjogbnVtYmVyKTogdGhpcyB7XG4gICAgdGhpcy5pZDNXcml0ZXJfLnNldEZyYW1lKCdUUkNLJywgcG9zaXRpb24udG9TdHJpbmcoKSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgZGlzayBpbmRleCBvZiB0aGUgc29uZydzIGFsYnVtXG4gICAqL1xuICBzZXRWb2x1bWUodm9sdW1lOiBudW1iZXIpOiB0aGlzIHtcbiAgICB0aGlzLmlkM1dyaXRlcl8uc2V0RnJhbWUoJ1RQT1MnLCB2b2x1bWUudG9TdHJpbmcoKSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEByZXR1cm4gdHJhY2sgaW4gYnVmZmVyIGZvcm1hdC4gQnVmZmVyIHdpbGwgc2hhcmUgdGhlXG4gICAqIHNhbWUgYWxsb2NhdGVkIHNwYWNlIGFzIHRoZSBidWZmZXIgcHJvdmlkZWQgaW4gY29uc3RydWN0b3IuXG4gICAqL1xuICBnZXRUcmFjaygpOiBCdWZmZXIge1xuICAgIHRoaXMuaWQzV3JpdGVyXy5hZGRUYWcoKTtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20odGhpcy5pZDNXcml0ZXJfLmFycmF5QnVmZmVyKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyBsb2NhbCB1cmwgb2YgZmlsZVxuICAgKi9cbiAgZ2V0VXJsKCk6IHN0cmluZyB7XG4gICAgdGhpcy5pZDNXcml0ZXJfLmFkZFRhZygpO1xuICAgIHJldHVybiB0aGlzLmlkM1dyaXRlcl8uZ2V0VVJMKCk7XG4gIH1cbiAgLyoqXG4gICAqIFJldm9rZXMgdXJsIHRoYXQgd2FzIGNyZWF0ZWQgZWFybGllclxuICAgKi9cbiAgcmV2b2tlVXJsKCk6IHZvaWQge1xuICAgIHRoaXMuaWQzV3JpdGVyXy5yZXZva2VVUkwoKTtcbiAgfVxufVxuIiwiY29uc3QgbWFwID0gbmV3IE1hcChbXG4gIFsnZW4nLCAnZW5nJ10sXG4gIFsncnUnLCAncnVzJ10sXG4gIFsnYmUnLCAnYmVsJ10sXG4gIFsnZnInLCAnZnJlJ10sXG4gIFsnZGUnLCAnZ2VyJ10sXG4gIFsnaXQnLCAnaXRhJ10sXG4gIFsnZXMnLCAnc3BhJ10sXG5dKTtcblxuZXhwb3J0IGNsYXNzIElTTzYzOTFUb0lTTzYzOTJDb252ZXJ0ZXIge1xuICBwcm90ZWN0ZWQgZGVmYXVsdExhbmd1YWdlXzogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKGRlZmF1bHRMYW5ndWFnZTogc3RyaW5nKSB7XG4gICAgaWYgKCEvW2Etel17M30vaS50ZXN0KGRlZmF1bHRMYW5ndWFnZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0xhbmd1YWdlIG11c3QgYmUgY29kZWQgZm9sbG93aW5nIHRoZSBJU08gNjM5LTIgc3RhbmRhcmRzJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICB0aGlzLmRlZmF1bHRMYW5ndWFnZV8gPSBkZWZhdWx0TGFuZ3VhZ2U7XG4gIH1cblxuICBjb252ZXJ0KGxhbmc6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgaWYgKC9bYS16XXszfS9pLnRlc3QobGFuZykpIHtcbiAgICAgIHJldHVybiBsYW5nO1xuICAgIH1cbiAgICBpZiAoIS9bYS16XXsyfS9pLnRlc3QobGFuZykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0xhbmd1YWdlIG11c3QgYmUgY29kZWQgZm9sbG93aW5nIHRoZSBJU08gNjM5LTEgc3RhbmRhcmRzJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWFwLmdldChsYW5nKSB8fCB0aGlzLmRlZmF1bHRMYW5ndWFnZV87XG4gIH1cbn1cbiIsImltcG9ydCB7VXNlclNldHRpbmdzIGFzIElVc2VyU2V0dGluZ3N9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5cbmV4cG9ydCBjbGFzcyBVc2VyU2V0dGluZ3MgaW1wbGVtZW50cyBJVXNlclNldHRpbmdzIHtcbiAgLyoqIFNpemUgb2Ygc29uZyBjb3ZlciAqL1xuICBjb3ZlclNpemUgPSAzMDA7XG4gIC8qKlxuICAgKiBGaWxlbmFtZSBmb3JtYXQuIEluIGN1cmx5IGJyYWNrZXRzIHZhcmlhYmxlcy5cbiAgICoge3RpdGxlfSAtIHNvbmcgdGl0bGVcbiAgICoge2FydGlzdH0gLSBhcnRpc3QgbmFtZVxuICAgKiB7YWxidW19IC0gYWxidW0gdGl0bGVcbiAgICovXG4gIGZpbGVuYW1lRm9ybWF0ID0gJ3thcnRpc3R9IHt0aXRsZX0nO1xuICAvKiogRG93bmxvYWQgcGF0aCByZWxhdGl2ZSB0byBjaHJvbWUncyBkZWZhdWx0IGRvd25sb2FkIHBhdGgqL1xuICBkb3dubG9hZFBhdGggPSAnJztcbiAgLyoqXG4gICAqIElmIHRydWUsIHdoZW4gZG93bmxvYWRpbmcgYWxidW0sXG4gICAqIGFsbCBzb25ncyB3aWxsIGJlIHNhdmVkIHRvIHNlcGFyYXRlIGZvbGRlclxuICAgKi9cbiAgZG93bmxvYWRBbGJ1bXNJblNlcGFyYXRlRm9sZGVyID0gdHJ1ZTtcbiAgLyoqXG4gICAqIElmIHRydWUsIHdoZW4gZG93bmxvYWRpbmcgcGxheWxpc3QsXG4gICAqIGFsbCBzb25ncyB3aWxsIGJlIHNhdmVkIHRvIHNlcGFyYXRlIGZvbGRlclxuICAgKi9cbiAgZG93bmxvYWRQbGF5bGlzdHNJblNlcGFyYXRlRm9sZGVyID0gdHJ1ZTtcbiAgLyoqXG4gICAqIElmIHRydWUsIHdoZW4gZG93bmxvYWRpbmcgYXJ0aXN0J3Mgc29uZyxcbiAgICogYWxsIHNvbmdzIHdpbGwgYmUgc2F2ZWQgdG8gc2VwYXJhdGUgZm9sZGVyXG4gICAqL1xuICBkb3dubG9hZEFydGlzdHNJblNlcGFyYXRlRm9sZGVyID0gdHJ1ZTtcbiAgLyoqIE1heCBhbW91bnQgb2YgZG93bmxvYWQgaXRlbXMgd2FpdGluZyBmb3IgZG93bmxvYWQuIC0xIGZvciBubyBsaW1pdCAqL1xuICBtYXhRdWV1ZVNpemUgPSAtMTtcbiAgLyoqIE51bWJlciBvZiBkb3dubG9hZCBpdGVtcyBhdCB0aGUgc2FtZSB0aW1lICovXG4gIGNvbmN1cnJlbmN5ID0gMjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBpZiAoIWNocm9tZSkgcmV0dXJuOyAvLyBmb3IgdGVzdFxuICAgIC8qKlxuICAgICAqIExpc3RlbiBmb3IgYW55IGNoYW5nZXMgdG8gdGhlIHN0YXRlIG9mIHN0b3JhZ2UuXG4gICAgICogVXBkYXRlIGxvY2FsIHNldHRpbmdzXG4gICAgICovXG4gICAgY2hyb21lLnN0b3JhZ2Uub25DaGFuZ2VkLmFkZExpc3RlbmVyKGNoYW5nZXMgPT4ge1xuICAgICAgdGhpcy5jb3ZlclNpemUgPSBjaGFuZ2VzLmNvdmVyU2l6ZT8ubmV3VmFsdWUgPz8gdGhpcy5jb3ZlclNpemU7XG4gICAgICB0aGlzLmZpbGVuYW1lRm9ybWF0ID1cbiAgICAgICAgY2hhbmdlcy5maWxlbmFtZUZvcm1hdD8ubmV3VmFsdWUgPz8gdGhpcy5maWxlbmFtZUZvcm1hdDtcbiAgICAgIC8vIHRoaXMuZG93bmxvYWRQYXRoID1cbiAgICAgIC8vICBjaGFuZ2VzLmRvd25sb2FkUGF0aD8ubmV3VmFsdWUgPz8gdGhpcy5kb3dubG9hZFBhdGg7XG4gICAgICB0aGlzLmRvd25sb2FkQWxidW1zSW5TZXBhcmF0ZUZvbGRlciA9XG4gICAgICAgIGNoYW5nZXMuZG93bmxvYWRBbGJ1bXNJblNlcGFyYXRlRm9sZGVyPy5uZXdWYWx1ZSA/P1xuICAgICAgICB0aGlzLmRvd25sb2FkQWxidW1zSW5TZXBhcmF0ZUZvbGRlcjtcbiAgICAgIHRoaXMuZG93bmxvYWRBcnRpc3RzSW5TZXBhcmF0ZUZvbGRlciA9XG4gICAgICAgIGNoYW5nZXMuZG93bmxvYWRBcnRpc3RzSW5TZXBhcmF0ZUZvbGRlcj8ubmV3VmFsdWUgPz9cbiAgICAgICAgdGhpcy5kb3dubG9hZEFydGlzdHNJblNlcGFyYXRlRm9sZGVyO1xuICAgICAgdGhpcy5kb3dubG9hZFBsYXlsaXN0c0luU2VwYXJhdGVGb2xkZXIgPVxuICAgICAgICBjaGFuZ2VzLmRvd25sb2FkUGxheWxpc3RzSW5TZXBhcmF0ZUZvbGRlcj8ubmV3VmFsdWUgPz9cbiAgICAgICAgdGhpcy5kb3dubG9hZFBsYXlsaXN0c0luU2VwYXJhdGVGb2xkZXI7XG4gICAgICB0aGlzLm1heFF1ZXVlU2l6ZSA9IGNoYW5nZXMubWF4UXVldWVTaXplPy5uZXdWYWx1ZSA/PyB0aGlzLm1heFF1ZXVlU2l6ZTtcbiAgICAgIHRoaXMuY29uY3VycmVuY3kgPSBjaGFuZ2VzLmNvbmN1cnJlbmN5Py5uZXdWYWx1ZSA/PyB0aGlzLmNvbmN1cnJlbmN5O1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBMb2FkcyB1c2VyIHNldHRpbmdzIGZyb20gY2hyb21lIHN0b3JhZ2VcbiAgICovXG4gIGFzeW5jIGxvYWQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKCFjaHJvbWUpIHJldHVybjsgLy8gZm9yIHRlc3RzXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KHJlc29sdmUgPT4ge1xuICAgICAgY2hyb21lLnN0b3JhZ2Uuc3luYy5nZXQoT2JqZWN0LmtleXModGhpcyksIGl0ZW1zID0+IHtcbiAgICAgICAgdGhpcy5jb3ZlclNpemUgPSBpdGVtcy5jb3ZlclNpemUgPz8gdGhpcy5jb3ZlclNpemU7XG4gICAgICAgIHRoaXMuZmlsZW5hbWVGb3JtYXQgPSBpdGVtcy5maWxlbmFtZUZvcm1hdCA/PyB0aGlzLmZpbGVuYW1lRm9ybWF0O1xuICAgICAgICAvLyB0aGlzLmRvd25sb2FkUGF0aCA9IGl0ZW1zLmRvd25sb2FkUGF0aCA/PyB0aGlzLmRvd25sb2FkUGF0aDtcbiAgICAgICAgdGhpcy5kb3dubG9hZEFsYnVtc0luU2VwYXJhdGVGb2xkZXIgPVxuICAgICAgICAgIGl0ZW1zLmRvd25sb2FkQWxidW1zSW5TZXBhcmF0ZUZvbGRlciA/P1xuICAgICAgICAgIHRoaXMuZG93bmxvYWRBbGJ1bXNJblNlcGFyYXRlRm9sZGVyO1xuICAgICAgICB0aGlzLmRvd25sb2FkQXJ0aXN0c0luU2VwYXJhdGVGb2xkZXIgPVxuICAgICAgICAgIGl0ZW1zLmRvd25sb2FkQXJ0aXN0c0luU2VwYXJhdGVGb2xkZXIgPz9cbiAgICAgICAgICB0aGlzLmRvd25sb2FkQXJ0aXN0c0luU2VwYXJhdGVGb2xkZXI7XG4gICAgICAgIHRoaXMuZG93bmxvYWRQbGF5bGlzdHNJblNlcGFyYXRlRm9sZGVyID1cbiAgICAgICAgICBpdGVtcy5kb3dubG9hZFBsYXlsaXN0c0luU2VwYXJhdGVGb2xkZXIgPz9cbiAgICAgICAgICB0aGlzLmRvd25sb2FkUGxheWxpc3RzSW5TZXBhcmF0ZUZvbGRlcjtcbiAgICAgICAgdGhpcy5tYXhRdWV1ZVNpemUgPSBpdGVtcy5tYXhRdWV1ZVNpemUgPz8gdGhpcy5tYXhRdWV1ZVNpemU7XG4gICAgICAgIHRoaXMuY29uY3VycmVuY3kgPSBpdGVtcy5jb25jdXJyZW5jeSA/PyB0aGlzLmNvbmN1cnJlbmN5O1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogU2F2ZSBjdXJyZW50IHN0YXRlIG9mIHVzZXIgc2V0dGluZ3MuXG4gICAqIFNob3VsZCBiZSBjYWxsZWQgZXZlcnkgdGltZSBzb21ldGhpbmcgY2hhbmdlc1xuICAgKi9cbiAgYXN5bmMgc2F2ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAoIWNocm9tZSkgcmV0dXJuOyAvLyBmb3IgdGVzdHNcbiAgICByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4ocmVzb2x2ZSA9PiB7XG4gICAgICBjaHJvbWUuc3RvcmFnZS5zeW5jLnNldCh0aGlzLCByZXNvbHZlKTtcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IGh0dHBzIGZyb20gJ2h0dHBzJztcbmltcG9ydCB7SW5jb21pbmdNZXNzYWdlfSBmcm9tICdodHRwJztcbmltcG9ydCBtZDUgZnJvbSAnbWQ1JztcblxuaW1wb3J0IHtcbiAgVHJhY2ssXG4gIEFsYnVtLFxuICBQbGF5bGlzdCxcbiAgQXJ0aXN0LFxuICBMeXJpYyxcbiAgWWFuZGV4TXVzaWNBUEkgYXMgSVlhbmRleE11c2ljQVBJLFxufSBmcm9tICcuL2ludGVyZmFjZXMnO1xuXG4vKipcbiAqIEluZm8gYWJvdXQgdHJhY2sncyBmaWxlXG4gKi9cbnR5cGUgVHJhY2tEb3dubG9hZEluZm8gPSB7XG4gIHJlYWRvbmx5IGNvZGVjOiBzdHJpbmcgLyogc2hvdWxkIGJlIG1wMyAqLztcbiAgcmVhZG9ubHkgYml0cmF0ZTogbnVtYmVyO1xuICByZWFkb25seSBzcmM6IHN0cmluZztcbiAgcmVhZG9ubHkgZ2FpbjogYm9vbGVhbjtcbiAgLyogdHJ1ZSBpZiBvbmx5IHByZXZpZXcgdmVyc2lvbiBpcyBhdmFpbGFibGUgZm9yIHlvdSAqL1xuICByZWFkb25seSBwcmV2aWV3OiBib29sZWFuO1xufTtcbi8qKlxuICogRGF0YSBuZWVkZWQgdG8gZG93bmxvYWQgZmlsZSBmcm9tIHN0b3JhZ2VcbiAqL1xudHlwZSBGaWxlRG93bmxvYWRJbmZvID0ge1xuICByZWFkb25seSBzOiBzdHJpbmc7XG4gIHJlYWRvbmx5IHRzOiBzdHJpbmc7XG4gIHJlYWRvbmx5IHBhdGg6IHN0cmluZztcbiAgcmVhZG9ubHkgaG9zdDogc3RyaW5nO1xufTtcblxuLyoqXG4gKiBJbXBsZW1lbnRhdGlvbiBvZiB5YW5kZXggYXBpIGZ1bmN0aW9uYWxcbiAqL1xuZXhwb3J0IGNsYXNzIFlhbmRleE11c2ljQVBJIGltcGxlbWVudHMgSVlhbmRleE11c2ljQVBJIHtcbiAgcHJvdGVjdGVkIHN0YXRpYyBhdmFpbGFibGVMb2NhbGVzXzogc3RyaW5nW10gPSBbXG4gICAgJ2J5JyxcbiAgICAncnUnLFxuICAgICdreicsXG4gICAgJ2NvbScsXG4gICAgJ25ldCcsXG4gICAgJ3VhJyxcbiAgXTtcblxuICBwcm90ZWN0ZWQgbG9jYWxlXzogc3RyaW5nO1xuICBwcm90ZWN0ZWQgaGVhZGVyc186IHtbaGVhZGVyOiBzdHJpbmddOiBzdHJpbmd9O1xuICAvKipcbiAgICogQHJldHVybiBob3N0bmFtZSBvZiBjdXJyZW50IGluc3RhbmNlXG4gICAqIG9mIFlhbmRleE11c2ljQVBJXG4gICAqL1xuICBwcml2YXRlIGdldEhvc3RuYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGBtdXNpYy55YW5kZXguJHt0aGlzLmxvY2FsZV99YDtcbiAgfVxuICAvKipcbiAgICogRG9lcyBhIEdFVCByZXF1ZXN0IHRvIHNwZWNpZmllZCBwYXRoXG4gICAqIEByZXR1cm4gcGFyc2VkIGpzb24gY2FzdGVkIHRvIHByb3ZpZGVkIHR5cGVcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgZ2V0T2JqZWN0PFQ+KHBhdGg6IHN0cmluZyk6IFByb21pc2U8VD4ge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICBwYXRoOiAnaHR0cHM6Ly8nICsgcGF0aCxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgLi4udGhpcy5oZWFkZXJzXyxcbiAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICB9LFxuICAgIH07XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2U8VD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgaHR0cHNcbiAgICAgICAgLmdldChvcHRpb25zLCAocmVzOiBJbmNvbWluZ01lc3NhZ2UpID0+IHtcbiAgICAgICAgICBsZXQgcmF3RGF0YSA9ICcnO1xuICAgICAgICAgIHJlcy5zZXRFbmNvZGluZygndXRmOCcpO1xuICAgICAgICAgIHJlcy5vbignZGF0YScsIChjaHVuazogc3RyaW5nKSA9PiAocmF3RGF0YSArPSBjaHVuayB8fCAnJykpO1xuICAgICAgICAgIHJlcy5vbignZXJyb3InLCByZWplY3QpO1xuICAgICAgICAgIHJlcy5vbignZW5kJywgKCkgPT4gcmVzb2x2ZShKU09OLnBhcnNlKHJhd0RhdGEpKSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5vbignZXJyb3InLCByZWplY3QpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIG5ldyBpbnN0YW5jZSBvZiBZYW5kZXhNdXNpY0FQSSB3aXRoIHNwZWNpZmllZCBsb2NhbGVcbiAgICogQGV4YW1wbGUgbmV3IFlhbmRleE11c2ljQVBJKCdieScpXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihsb2NhbGUgPSAncnUnKSB7XG4gICAgaWYgKCFZYW5kZXhNdXNpY0FQSS5hdmFpbGFibGVMb2NhbGVzXy5pbmNsdWRlcyhsb2NhbGUpKSB7XG4gICAgICBsb2NhbGUgPSAnY29tJztcbiAgICB9XG4gICAgdGhpcy5sb2NhbGVfID0gbG9jYWxlO1xuICAgIHRoaXMuaGVhZGVyc18gPSB7XG4gICAgICAnWC1SZXRwYXRoLVknOiBlbmNvZGVVUkkoYGh0dHBzOi8vJHt0aGlzLmdldEhvc3RuYW1lKCl9L2ApLFxuICAgICAgQ29ubmVjdGlvbjogJ2tlZXAtYWxpdmUnLFxuICAgICAgQWNjZXB0OiAnKi8qJyxcbiAgICAgICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nOiAnKicsXG4gICAgICAnQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVycyc6ICdvcmlnaW4sIGNvbnRlbnQtdHlwZSwgYWNjZXB0JyxcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBAcmV0dXJuIHRyYWNrIGluZm8gZnJvbSAnL2hhbmRsZXJzL3RyYWNrLmpzeCdcbiAgICovXG4gIGFzeW5jIGdldFRyYWNrKHRyYWNrSWQ6IG51bWJlcik6IFByb21pc2U8e1xuICAgIHJlYWRvbmx5IGFydGlzdHM6IEFydGlzdFtdO1xuICAgIHJlYWRvbmx5IG90aGVyVmVyc2lvbnM6IHtbdmVyc2lvbjogc3RyaW5nXTogVHJhY2tbXX07XG4gICAgcmVhZG9ubHkgYWxzb0luQWxidW1zOiBBbGJ1bVtdO1xuICAgIHJlYWRvbmx5IHNpbWlsYXJUcmFja3M6IFRyYWNrW107XG4gICAgcmVhZG9ubHkgdHJhY2s6IFRyYWNrO1xuICAgIHJlYWRvbmx5IGx5cmljOiBMeXJpY1tdO1xuICB9PiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0T2JqZWN0KFxuICAgICAgYCR7dGhpcy5nZXRIb3N0bmFtZSgpfS9oYW5kbGVycy90cmFjay5qc3g/dHJhY2s9JHt0cmFja0lkfWBcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBAcmV0dXJuIGFsYnVtIGluZm8gZnJvbSAnL2hhbmRsZXJzL2FsYnVtLmpzeCdcbiAgICovXG4gIGFzeW5jIGdldEFsYnVtKGFsYnVtSWQ6IG51bWJlcik6IFByb21pc2U8QWxidW0+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXRPYmplY3QoXG4gICAgICBgJHt0aGlzLmdldEhvc3RuYW1lKCl9L2hhbmRsZXJzL2FsYnVtLmpzeD9hbGJ1bT0ke2FsYnVtSWR9YFxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIEByZXR1cm4gYXJ0aXN0IGluZm8gZnJvbSAnL2hhbmRsZXJzL2FydGlzdC5qc3gnXG4gICAqL1xuICBhc3luYyBnZXRBcnRpc3QoYXJ0aXN0SWQ6IG51bWJlcik6IFByb21pc2U8e1xuICAgIHJlYWRvbmx5IGFydGlzdDogQXJ0aXN0O1xuICAgIHJlYWRvbmx5IHNpbWlsYXI6IEFydGlzdFtdO1xuICAgIHJlYWRvbmx5IGFsbFNpbWlsYXI6IEFydGlzdFtdO1xuICAgIHJlYWRvbmx5IGFsYnVtczogQWxidW1bXTtcbiAgICByZWFkb25seSBhbHNvQWxidW1zOiBBbGJ1bVtdO1xuICAgIHJlYWRvbmx5IHRyYWNrczogVHJhY2tbXTtcbiAgICByZWFkb25seSBwbGF5bGlzdElkczoge1xuICAgICAgcmVhZG9ubHkgdWlkOiBudW1iZXI7XG4gICAgICByZWFkb25seSBraW5kOiBudW1iZXI7XG4gICAgfVtdO1xuICAgIHJlYWRvbmx5IHBsYXlsaXN0czogUGxheWxpc3RbXTtcbiAgICByZWFkb25seSB0cmFja0lkczogbnVtYmVyW107XG4gIH0+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXRPYmplY3QoXG4gICAgICBgJHt0aGlzLmdldEhvc3RuYW1lKCl9L2hhbmRsZXJzL2FydGlzdC5qc3g/YXJ0aXN0PSR7YXJ0aXN0SWR9YFxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIEByZXR1cm4gcGxheWxpc3QgaW5mbyBmcm9tICcvaGFuZGxlcnMvcGxheWxpc3QuanN4J1xuICAgKi9cbiAgYXN5bmMgZ2V0UGxheWxpc3QoXG4gICAgdWlkOiBudW1iZXIgfCBzdHJpbmcsXG4gICAga2luZDogbnVtYmVyXG4gICk6IFByb21pc2U8e3BsYXlsaXN0OiBQbGF5bGlzdH0+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXRPYmplY3QoXG4gICAgICBgJHt0aGlzLmdldEhvc3RuYW1lKCl9L2hhbmRsZXJzL3BsYXlsaXN0LmpzeD9vd25lcj0ke3VpZH0ma2luZHM9JHtraW5kfWBcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBAcmV0dXJuIGxpbmsgdG8gdHJhY2sncyBtcDMgZmlsZVxuICAgKi9cbiAgYXN5bmMgZ2V0VHJhY2tEb3dubG9hZExpbmsodHJhY2tJZDogbnVtYmVyKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCB0cmFja0Rvd25sb2FkQXBpUGF0aCA9XG4gICAgICBgL2FwaS92Mi4xL2hhbmRsZXJzL3RyYWNrLyR7dHJhY2tJZH0vYCArXG4gICAgICAnd2ViLWFsYnVtLXRyYWNrLXRyYWNrLW1haW4vZG93bmxvYWQvbT8nICtcbiAgICAgIGBocT0xJmV4dGVybmFsLWRvbWFpbj0ke3RoaXMuZ2V0SG9zdG5hbWUoKX0mYCArXG4gICAgICBgb3ZlcmVtYmVkPW5vJl9fdD0ke0RhdGUubm93KCl9YDtcblxuICAgIGNvbnN0IHRyYWNrRG93bmxvYWRJbmZvID0gYXdhaXQgdGhpcy5nZXRPYmplY3Q8VHJhY2tEb3dubG9hZEluZm8+KFxuICAgICAgdGhpcy5nZXRIb3N0bmFtZSgpICsgdHJhY2tEb3dubG9hZEFwaVBhdGhcbiAgICApO1xuXG4gICAgY29uc3QgZmlsZURvd25sb2FkSW5mbyA9IGF3YWl0IHRoaXMuZ2V0T2JqZWN0PEZpbGVEb3dubG9hZEluZm8+KFxuICAgICAgdHJhY2tEb3dubG9hZEluZm8uc3JjLnNsaWNlKDIpICsgJyZmb3JtYXQ9anNvbidcbiAgICApO1xuXG4gICAgY29uc3QgaGFzaHQgPSBtZDUoXG4gICAgICAnWEdSbEJXOUZYbGVrZ2JQclJIdVNpQScgK1xuICAgICAgICBmaWxlRG93bmxvYWRJbmZvLnBhdGguc3Vic3RyaW5nKDEpICtcbiAgICAgICAgZmlsZURvd25sb2FkSW5mby5zXG4gICAgKTtcbiAgICBjb25zdCBwYXRoID1cbiAgICAgIGAvZ2V0LW1wMy8ke2hhc2h0fS8ke2ZpbGVEb3dubG9hZEluZm8udHN9YCArXG4gICAgICBgJHtmaWxlRG93bmxvYWRJbmZvLnBhdGh9P3RyYWNrLWlkPSR7dHJhY2tJZH1gO1xuXG4gICAgcmV0dXJuICdodHRwczovLycgKyBmaWxlRG93bmxvYWRJbmZvLmhvc3QgKyBwYXRoO1xuICB9XG4gIC8qKlxuICAgKiBAcmV0dXJuIGxpbmsgdG8gY292ZXJzXG4gICAqL1xuICBhc3luYyBnZXRDb3ZlckRvd25sb2FkTGluayhjb3ZlclVyaTogc3RyaW5nLCBzaXplOiBudW1iZXIpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybiAnaHR0cHM6Ly8nICsgY292ZXJVcmkuc2xpY2UoMCwgLTIpICsgYCR7c2l6ZX14JHtzaXplfWA7XG4gIH1cbiAgLyoqXG4gICAqIEByZXR1cm4gaW5zdGFuY2UgbG9jYWxlXG4gICAqL1xuICBnZXRMb2NhbGUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5sb2NhbGVfO1xuICB9XG59XG4iLCIvKiEgaHR0cHM6Ly9tdGhzLmJlL3B1bnljb2RlIHYxLjMuMiBieSBAbWF0aGlhcyAqL1xuOyhmdW5jdGlvbihyb290KSB7XG5cblx0LyoqIERldGVjdCBmcmVlIHZhcmlhYmxlcyAqL1xuXHR2YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmXG5cdFx0IWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblx0dmFyIGZyZWVNb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJlxuXHRcdCFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXHR2YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsO1xuXHRpZiAoXG5cdFx0ZnJlZUdsb2JhbC5nbG9iYWwgPT09IGZyZWVHbG9iYWwgfHxcblx0XHRmcmVlR2xvYmFsLndpbmRvdyA9PT0gZnJlZUdsb2JhbCB8fFxuXHRcdGZyZWVHbG9iYWwuc2VsZiA9PT0gZnJlZUdsb2JhbFxuXHQpIHtcblx0XHRyb290ID0gZnJlZUdsb2JhbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgYHB1bnljb2RlYCBvYmplY3QuXG5cdCAqIEBuYW1lIHB1bnljb2RlXG5cdCAqIEB0eXBlIE9iamVjdFxuXHQgKi9cblx0dmFyIHB1bnljb2RlLFxuXG5cdC8qKiBIaWdoZXN0IHBvc2l0aXZlIHNpZ25lZCAzMi1iaXQgZmxvYXQgdmFsdWUgKi9cblx0bWF4SW50ID0gMjE0NzQ4MzY0NywgLy8gYWthLiAweDdGRkZGRkZGIG9yIDJeMzEtMVxuXG5cdC8qKiBCb290c3RyaW5nIHBhcmFtZXRlcnMgKi9cblx0YmFzZSA9IDM2LFxuXHR0TWluID0gMSxcblx0dE1heCA9IDI2LFxuXHRza2V3ID0gMzgsXG5cdGRhbXAgPSA3MDAsXG5cdGluaXRpYWxCaWFzID0gNzIsXG5cdGluaXRpYWxOID0gMTI4LCAvLyAweDgwXG5cdGRlbGltaXRlciA9ICctJywgLy8gJ1xceDJEJ1xuXG5cdC8qKiBSZWd1bGFyIGV4cHJlc3Npb25zICovXG5cdHJlZ2V4UHVueWNvZGUgPSAvXnhuLS0vLFxuXHRyZWdleE5vbkFTQ0lJID0gL1teXFx4MjAtXFx4N0VdLywgLy8gdW5wcmludGFibGUgQVNDSUkgY2hhcnMgKyBub24tQVNDSUkgY2hhcnNcblx0cmVnZXhTZXBhcmF0b3JzID0gL1tcXHgyRVxcdTMwMDJcXHVGRjBFXFx1RkY2MV0vZywgLy8gUkZDIDM0OTAgc2VwYXJhdG9yc1xuXG5cdC8qKiBFcnJvciBtZXNzYWdlcyAqL1xuXHRlcnJvcnMgPSB7XG5cdFx0J292ZXJmbG93JzogJ092ZXJmbG93OiBpbnB1dCBuZWVkcyB3aWRlciBpbnRlZ2VycyB0byBwcm9jZXNzJyxcblx0XHQnbm90LWJhc2ljJzogJ0lsbGVnYWwgaW5wdXQgPj0gMHg4MCAobm90IGEgYmFzaWMgY29kZSBwb2ludCknLFxuXHRcdCdpbnZhbGlkLWlucHV0JzogJ0ludmFsaWQgaW5wdXQnXG5cdH0sXG5cblx0LyoqIENvbnZlbmllbmNlIHNob3J0Y3V0cyAqL1xuXHRiYXNlTWludXNUTWluID0gYmFzZSAtIHRNaW4sXG5cdGZsb29yID0gTWF0aC5mbG9vcixcblx0c3RyaW5nRnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZSxcblxuXHQvKiogVGVtcG9yYXJ5IHZhcmlhYmxlICovXG5cdGtleTtcblxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHQvKipcblx0ICogQSBnZW5lcmljIGVycm9yIHV0aWxpdHkgZnVuY3Rpb24uXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFRoZSBlcnJvciB0eXBlLlxuXHQgKiBAcmV0dXJucyB7RXJyb3J9IFRocm93cyBhIGBSYW5nZUVycm9yYCB3aXRoIHRoZSBhcHBsaWNhYmxlIGVycm9yIG1lc3NhZ2UuXG5cdCAqL1xuXHRmdW5jdGlvbiBlcnJvcih0eXBlKSB7XG5cdFx0dGhyb3cgUmFuZ2VFcnJvcihlcnJvcnNbdHlwZV0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIEEgZ2VuZXJpYyBgQXJyYXkjbWFwYCB1dGlsaXR5IGZ1bmN0aW9uLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdGhhdCBnZXRzIGNhbGxlZCBmb3IgZXZlcnkgYXJyYXlcblx0ICogaXRlbS5cblx0ICogQHJldHVybnMge0FycmF5fSBBIG5ldyBhcnJheSBvZiB2YWx1ZXMgcmV0dXJuZWQgYnkgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuXHQgKi9cblx0ZnVuY3Rpb24gbWFwKGFycmF5LCBmbikge1xuXHRcdHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cdFx0dmFyIHJlc3VsdCA9IFtdO1xuXHRcdHdoaWxlIChsZW5ndGgtLSkge1xuXHRcdFx0cmVzdWx0W2xlbmd0aF0gPSBmbihhcnJheVtsZW5ndGhdKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdC8qKlxuXHQgKiBBIHNpbXBsZSBgQXJyYXkjbWFwYC1saWtlIHdyYXBwZXIgdG8gd29yayB3aXRoIGRvbWFpbiBuYW1lIHN0cmluZ3Mgb3IgZW1haWxcblx0ICogYWRkcmVzc2VzLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gZG9tYWluIFRoZSBkb21haW4gbmFtZSBvciBlbWFpbCBhZGRyZXNzLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdGhhdCBnZXRzIGNhbGxlZCBmb3IgZXZlcnlcblx0ICogY2hhcmFjdGVyLlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IEEgbmV3IHN0cmluZyBvZiBjaGFyYWN0ZXJzIHJldHVybmVkIGJ5IHRoZSBjYWxsYmFja1xuXHQgKiBmdW5jdGlvbi5cblx0ICovXG5cdGZ1bmN0aW9uIG1hcERvbWFpbihzdHJpbmcsIGZuKSB7XG5cdFx0dmFyIHBhcnRzID0gc3RyaW5nLnNwbGl0KCdAJyk7XG5cdFx0dmFyIHJlc3VsdCA9ICcnO1xuXHRcdGlmIChwYXJ0cy5sZW5ndGggPiAxKSB7XG5cdFx0XHQvLyBJbiBlbWFpbCBhZGRyZXNzZXMsIG9ubHkgdGhlIGRvbWFpbiBuYW1lIHNob3VsZCBiZSBwdW55Y29kZWQuIExlYXZlXG5cdFx0XHQvLyB0aGUgbG9jYWwgcGFydCAoaS5lLiBldmVyeXRoaW5nIHVwIHRvIGBAYCkgaW50YWN0LlxuXHRcdFx0cmVzdWx0ID0gcGFydHNbMF0gKyAnQCc7XG5cdFx0XHRzdHJpbmcgPSBwYXJ0c1sxXTtcblx0XHR9XG5cdFx0Ly8gQXZvaWQgYHNwbGl0KHJlZ2V4KWAgZm9yIElFOCBjb21wYXRpYmlsaXR5LiBTZWUgIzE3LlxuXHRcdHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJlZ2V4U2VwYXJhdG9ycywgJ1xceDJFJyk7XG5cdFx0dmFyIGxhYmVscyA9IHN0cmluZy5zcGxpdCgnLicpO1xuXHRcdHZhciBlbmNvZGVkID0gbWFwKGxhYmVscywgZm4pLmpvaW4oJy4nKTtcblx0XHRyZXR1cm4gcmVzdWx0ICsgZW5jb2RlZDtcblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIG51bWVyaWMgY29kZSBwb2ludHMgb2YgZWFjaCBVbmljb2RlXG5cdCAqIGNoYXJhY3RlciBpbiB0aGUgc3RyaW5nLiBXaGlsZSBKYXZhU2NyaXB0IHVzZXMgVUNTLTIgaW50ZXJuYWxseSxcblx0ICogdGhpcyBmdW5jdGlvbiB3aWxsIGNvbnZlcnQgYSBwYWlyIG9mIHN1cnJvZ2F0ZSBoYWx2ZXMgKGVhY2ggb2Ygd2hpY2hcblx0ICogVUNTLTIgZXhwb3NlcyBhcyBzZXBhcmF0ZSBjaGFyYWN0ZXJzKSBpbnRvIGEgc2luZ2xlIGNvZGUgcG9pbnQsXG5cdCAqIG1hdGNoaW5nIFVURi0xNi5cblx0ICogQHNlZSBgcHVueWNvZGUudWNzMi5lbmNvZGVgXG5cdCAqIEBzZWUgPGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nPlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGUudWNzMlxuXHQgKiBAbmFtZSBkZWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IHN0cmluZyBUaGUgVW5pY29kZSBpbnB1dCBzdHJpbmcgKFVDUy0yKS5cblx0ICogQHJldHVybnMge0FycmF5fSBUaGUgbmV3IGFycmF5IG9mIGNvZGUgcG9pbnRzLlxuXHQgKi9cblx0ZnVuY3Rpb24gdWNzMmRlY29kZShzdHJpbmcpIHtcblx0XHR2YXIgb3V0cHV0ID0gW10sXG5cdFx0ICAgIGNvdW50ZXIgPSAwLFxuXHRcdCAgICBsZW5ndGggPSBzdHJpbmcubGVuZ3RoLFxuXHRcdCAgICB2YWx1ZSxcblx0XHQgICAgZXh0cmE7XG5cdFx0d2hpbGUgKGNvdW50ZXIgPCBsZW5ndGgpIHtcblx0XHRcdHZhbHVlID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblx0XHRcdGlmICh2YWx1ZSA+PSAweEQ4MDAgJiYgdmFsdWUgPD0gMHhEQkZGICYmIGNvdW50ZXIgPCBsZW5ndGgpIHtcblx0XHRcdFx0Ly8gaGlnaCBzdXJyb2dhdGUsIGFuZCB0aGVyZSBpcyBhIG5leHQgY2hhcmFjdGVyXG5cdFx0XHRcdGV4dHJhID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblx0XHRcdFx0aWYgKChleHRyYSAmIDB4RkMwMCkgPT0gMHhEQzAwKSB7IC8vIGxvdyBzdXJyb2dhdGVcblx0XHRcdFx0XHRvdXRwdXQucHVzaCgoKHZhbHVlICYgMHgzRkYpIDw8IDEwKSArIChleHRyYSAmIDB4M0ZGKSArIDB4MTAwMDApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIHVubWF0Y2hlZCBzdXJyb2dhdGU7IG9ubHkgYXBwZW5kIHRoaXMgY29kZSB1bml0LCBpbiBjYXNlIHRoZSBuZXh0XG5cdFx0XHRcdFx0Ly8gY29kZSB1bml0IGlzIHRoZSBoaWdoIHN1cnJvZ2F0ZSBvZiBhIHN1cnJvZ2F0ZSBwYWlyXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2godmFsdWUpO1xuXHRcdFx0XHRcdGNvdW50ZXItLTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3V0cHV0LnB1c2godmFsdWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBzdHJpbmcgYmFzZWQgb24gYW4gYXJyYXkgb2YgbnVtZXJpYyBjb2RlIHBvaW50cy5cblx0ICogQHNlZSBgcHVueWNvZGUudWNzMi5kZWNvZGVgXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZS51Y3MyXG5cdCAqIEBuYW1lIGVuY29kZVxuXHQgKiBAcGFyYW0ge0FycmF5fSBjb2RlUG9pbnRzIFRoZSBhcnJheSBvZiBudW1lcmljIGNvZGUgcG9pbnRzLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgbmV3IFVuaWNvZGUgc3RyaW5nIChVQ1MtMikuXG5cdCAqL1xuXHRmdW5jdGlvbiB1Y3MyZW5jb2RlKGFycmF5KSB7XG5cdFx0cmV0dXJuIG1hcChhcnJheSwgZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdHZhciBvdXRwdXQgPSAnJztcblx0XHRcdGlmICh2YWx1ZSA+IDB4RkZGRikge1xuXHRcdFx0XHR2YWx1ZSAtPSAweDEwMDAwO1xuXHRcdFx0XHRvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKTtcblx0XHRcdFx0dmFsdWUgPSAweERDMDAgfCB2YWx1ZSAmIDB4M0ZGO1xuXHRcdFx0fVxuXHRcdFx0b3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSk7XG5cdFx0XHRyZXR1cm4gb3V0cHV0O1xuXHRcdH0pLmpvaW4oJycpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgYmFzaWMgY29kZSBwb2ludCBpbnRvIGEgZGlnaXQvaW50ZWdlci5cblx0ICogQHNlZSBgZGlnaXRUb0Jhc2ljKClgXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBjb2RlUG9pbnQgVGhlIGJhc2ljIG51bWVyaWMgY29kZSBwb2ludCB2YWx1ZS5cblx0ICogQHJldHVybnMge051bWJlcn0gVGhlIG51bWVyaWMgdmFsdWUgb2YgYSBiYXNpYyBjb2RlIHBvaW50IChmb3IgdXNlIGluXG5cdCAqIHJlcHJlc2VudGluZyBpbnRlZ2VycykgaW4gdGhlIHJhbmdlIGAwYCB0byBgYmFzZSAtIDFgLCBvciBgYmFzZWAgaWZcblx0ICogdGhlIGNvZGUgcG9pbnQgZG9lcyBub3QgcmVwcmVzZW50IGEgdmFsdWUuXG5cdCAqL1xuXHRmdW5jdGlvbiBiYXNpY1RvRGlnaXQoY29kZVBvaW50KSB7XG5cdFx0aWYgKGNvZGVQb2ludCAtIDQ4IDwgMTApIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQgLSAyMjtcblx0XHR9XG5cdFx0aWYgKGNvZGVQb2ludCAtIDY1IDwgMjYpIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQgLSA2NTtcblx0XHR9XG5cdFx0aWYgKGNvZGVQb2ludCAtIDk3IDwgMjYpIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQgLSA5Nztcblx0XHR9XG5cdFx0cmV0dXJuIGJhc2U7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBkaWdpdC9pbnRlZ2VyIGludG8gYSBiYXNpYyBjb2RlIHBvaW50LlxuXHQgKiBAc2VlIGBiYXNpY1RvRGlnaXQoKWBcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtOdW1iZXJ9IGRpZ2l0IFRoZSBudW1lcmljIHZhbHVlIG9mIGEgYmFzaWMgY29kZSBwb2ludC5cblx0ICogQHJldHVybnMge051bWJlcn0gVGhlIGJhc2ljIGNvZGUgcG9pbnQgd2hvc2UgdmFsdWUgKHdoZW4gdXNlZCBmb3Jcblx0ICogcmVwcmVzZW50aW5nIGludGVnZXJzKSBpcyBgZGlnaXRgLCB3aGljaCBuZWVkcyB0byBiZSBpbiB0aGUgcmFuZ2Vcblx0ICogYDBgIHRvIGBiYXNlIC0gMWAuIElmIGBmbGFnYCBpcyBub24temVybywgdGhlIHVwcGVyY2FzZSBmb3JtIGlzXG5cdCAqIHVzZWQ7IGVsc2UsIHRoZSBsb3dlcmNhc2UgZm9ybSBpcyB1c2VkLiBUaGUgYmVoYXZpb3IgaXMgdW5kZWZpbmVkXG5cdCAqIGlmIGBmbGFnYCBpcyBub24temVybyBhbmQgYGRpZ2l0YCBoYXMgbm8gdXBwZXJjYXNlIGZvcm0uXG5cdCAqL1xuXHRmdW5jdGlvbiBkaWdpdFRvQmFzaWMoZGlnaXQsIGZsYWcpIHtcblx0XHQvLyAgMC4uMjUgbWFwIHRvIEFTQ0lJIGEuLnogb3IgQS4uWlxuXHRcdC8vIDI2Li4zNSBtYXAgdG8gQVNDSUkgMC4uOVxuXHRcdHJldHVybiBkaWdpdCArIDIyICsgNzUgKiAoZGlnaXQgPCAyNikgLSAoKGZsYWcgIT0gMCkgPDwgNSk7XG5cdH1cblxuXHQvKipcblx0ICogQmlhcyBhZGFwdGF0aW9uIGZ1bmN0aW9uIGFzIHBlciBzZWN0aW9uIDMuNCBvZiBSRkMgMzQ5Mi5cblx0ICogaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzQ5MiNzZWN0aW9uLTMuNFxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0ZnVuY3Rpb24gYWRhcHQoZGVsdGEsIG51bVBvaW50cywgZmlyc3RUaW1lKSB7XG5cdFx0dmFyIGsgPSAwO1xuXHRcdGRlbHRhID0gZmlyc3RUaW1lID8gZmxvb3IoZGVsdGEgLyBkYW1wKSA6IGRlbHRhID4+IDE7XG5cdFx0ZGVsdGEgKz0gZmxvb3IoZGVsdGEgLyBudW1Qb2ludHMpO1xuXHRcdGZvciAoLyogbm8gaW5pdGlhbGl6YXRpb24gKi87IGRlbHRhID4gYmFzZU1pbnVzVE1pbiAqIHRNYXggPj4gMTsgayArPSBiYXNlKSB7XG5cdFx0XHRkZWx0YSA9IGZsb29yKGRlbHRhIC8gYmFzZU1pbnVzVE1pbik7XG5cdFx0fVxuXHRcdHJldHVybiBmbG9vcihrICsgKGJhc2VNaW51c1RNaW4gKyAxKSAqIGRlbHRhIC8gKGRlbHRhICsgc2tldykpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scyB0byBhIHN0cmluZyBvZiBVbmljb2RlXG5cdCAqIHN5bWJvbHMuXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSByZXN1bHRpbmcgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scy5cblx0ICovXG5cdGZ1bmN0aW9uIGRlY29kZShpbnB1dCkge1xuXHRcdC8vIERvbid0IHVzZSBVQ1MtMlxuXHRcdHZhciBvdXRwdXQgPSBbXSxcblx0XHQgICAgaW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGgsXG5cdFx0ICAgIG91dCxcblx0XHQgICAgaSA9IDAsXG5cdFx0ICAgIG4gPSBpbml0aWFsTixcblx0XHQgICAgYmlhcyA9IGluaXRpYWxCaWFzLFxuXHRcdCAgICBiYXNpYyxcblx0XHQgICAgaixcblx0XHQgICAgaW5kZXgsXG5cdFx0ICAgIG9sZGksXG5cdFx0ICAgIHcsXG5cdFx0ICAgIGssXG5cdFx0ICAgIGRpZ2l0LFxuXHRcdCAgICB0LFxuXHRcdCAgICAvKiogQ2FjaGVkIGNhbGN1bGF0aW9uIHJlc3VsdHMgKi9cblx0XHQgICAgYmFzZU1pbnVzVDtcblxuXHRcdC8vIEhhbmRsZSB0aGUgYmFzaWMgY29kZSBwb2ludHM6IGxldCBgYmFzaWNgIGJlIHRoZSBudW1iZXIgb2YgaW5wdXQgY29kZVxuXHRcdC8vIHBvaW50cyBiZWZvcmUgdGhlIGxhc3QgZGVsaW1pdGVyLCBvciBgMGAgaWYgdGhlcmUgaXMgbm9uZSwgdGhlbiBjb3B5XG5cdFx0Ly8gdGhlIGZpcnN0IGJhc2ljIGNvZGUgcG9pbnRzIHRvIHRoZSBvdXRwdXQuXG5cblx0XHRiYXNpYyA9IGlucHV0Lmxhc3RJbmRleE9mKGRlbGltaXRlcik7XG5cdFx0aWYgKGJhc2ljIDwgMCkge1xuXHRcdFx0YmFzaWMgPSAwO1xuXHRcdH1cblxuXHRcdGZvciAoaiA9IDA7IGogPCBiYXNpYzsgKytqKSB7XG5cdFx0XHQvLyBpZiBpdCdzIG5vdCBhIGJhc2ljIGNvZGUgcG9pbnRcblx0XHRcdGlmIChpbnB1dC5jaGFyQ29kZUF0KGopID49IDB4ODApIHtcblx0XHRcdFx0ZXJyb3IoJ25vdC1iYXNpYycpO1xuXHRcdFx0fVxuXHRcdFx0b3V0cHV0LnB1c2goaW5wdXQuY2hhckNvZGVBdChqKSk7XG5cdFx0fVxuXG5cdFx0Ly8gTWFpbiBkZWNvZGluZyBsb29wOiBzdGFydCBqdXN0IGFmdGVyIHRoZSBsYXN0IGRlbGltaXRlciBpZiBhbnkgYmFzaWMgY29kZVxuXHRcdC8vIHBvaW50cyB3ZXJlIGNvcGllZDsgc3RhcnQgYXQgdGhlIGJlZ2lubmluZyBvdGhlcndpc2UuXG5cblx0XHRmb3IgKGluZGV4ID0gYmFzaWMgPiAwID8gYmFzaWMgKyAxIDogMDsgaW5kZXggPCBpbnB1dExlbmd0aDsgLyogbm8gZmluYWwgZXhwcmVzc2lvbiAqLykge1xuXG5cdFx0XHQvLyBgaW5kZXhgIGlzIHRoZSBpbmRleCBvZiB0aGUgbmV4dCBjaGFyYWN0ZXIgdG8gYmUgY29uc3VtZWQuXG5cdFx0XHQvLyBEZWNvZGUgYSBnZW5lcmFsaXplZCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlciBpbnRvIGBkZWx0YWAsXG5cdFx0XHQvLyB3aGljaCBnZXRzIGFkZGVkIHRvIGBpYC4gVGhlIG92ZXJmbG93IGNoZWNraW5nIGlzIGVhc2llclxuXHRcdFx0Ly8gaWYgd2UgaW5jcmVhc2UgYGlgIGFzIHdlIGdvLCB0aGVuIHN1YnRyYWN0IG9mZiBpdHMgc3RhcnRpbmdcblx0XHRcdC8vIHZhbHVlIGF0IHRoZSBlbmQgdG8gb2J0YWluIGBkZWx0YWAuXG5cdFx0XHRmb3IgKG9sZGkgPSBpLCB3ID0gMSwgayA9IGJhc2U7IC8qIG5vIGNvbmRpdGlvbiAqLzsgayArPSBiYXNlKSB7XG5cblx0XHRcdFx0aWYgKGluZGV4ID49IGlucHV0TGVuZ3RoKSB7XG5cdFx0XHRcdFx0ZXJyb3IoJ2ludmFsaWQtaW5wdXQnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRpZ2l0ID0gYmFzaWNUb0RpZ2l0KGlucHV0LmNoYXJDb2RlQXQoaW5kZXgrKykpO1xuXG5cdFx0XHRcdGlmIChkaWdpdCA+PSBiYXNlIHx8IGRpZ2l0ID4gZmxvb3IoKG1heEludCAtIGkpIC8gdykpIHtcblx0XHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGkgKz0gZGlnaXQgKiB3O1xuXHRcdFx0XHR0ID0gayA8PSBiaWFzID8gdE1pbiA6IChrID49IGJpYXMgKyB0TWF4ID8gdE1heCA6IGsgLSBiaWFzKTtcblxuXHRcdFx0XHRpZiAoZGlnaXQgPCB0KSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRiYXNlTWludXNUID0gYmFzZSAtIHQ7XG5cdFx0XHRcdGlmICh3ID4gZmxvb3IobWF4SW50IC8gYmFzZU1pbnVzVCkpIHtcblx0XHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHcgKj0gYmFzZU1pbnVzVDtcblxuXHRcdFx0fVxuXG5cdFx0XHRvdXQgPSBvdXRwdXQubGVuZ3RoICsgMTtcblx0XHRcdGJpYXMgPSBhZGFwdChpIC0gb2xkaSwgb3V0LCBvbGRpID09IDApO1xuXG5cdFx0XHQvLyBgaWAgd2FzIHN1cHBvc2VkIHRvIHdyYXAgYXJvdW5kIGZyb20gYG91dGAgdG8gYDBgLFxuXHRcdFx0Ly8gaW5jcmVtZW50aW5nIGBuYCBlYWNoIHRpbWUsIHNvIHdlJ2xsIGZpeCB0aGF0IG5vdzpcblx0XHRcdGlmIChmbG9vcihpIC8gb3V0KSA+IG1heEludCAtIG4pIHtcblx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHR9XG5cblx0XHRcdG4gKz0gZmxvb3IoaSAvIG91dCk7XG5cdFx0XHRpICU9IG91dDtcblxuXHRcdFx0Ly8gSW5zZXJ0IGBuYCBhdCBwb3NpdGlvbiBgaWAgb2YgdGhlIG91dHB1dFxuXHRcdFx0b3V0cHV0LnNwbGljZShpKyssIDAsIG4pO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVjczJlbmNvZGUob3V0cHV0KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMgKGUuZy4gYSBkb21haW4gbmFtZSBsYWJlbCkgdG8gYVxuXHQgKiBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgcmVzdWx0aW5nIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMuXG5cdCAqL1xuXHRmdW5jdGlvbiBlbmNvZGUoaW5wdXQpIHtcblx0XHR2YXIgbixcblx0XHQgICAgZGVsdGEsXG5cdFx0ICAgIGhhbmRsZWRDUENvdW50LFxuXHRcdCAgICBiYXNpY0xlbmd0aCxcblx0XHQgICAgYmlhcyxcblx0XHQgICAgaixcblx0XHQgICAgbSxcblx0XHQgICAgcSxcblx0XHQgICAgayxcblx0XHQgICAgdCxcblx0XHQgICAgY3VycmVudFZhbHVlLFxuXHRcdCAgICBvdXRwdXQgPSBbXSxcblx0XHQgICAgLyoqIGBpbnB1dExlbmd0aGAgd2lsbCBob2xkIHRoZSBudW1iZXIgb2YgY29kZSBwb2ludHMgaW4gYGlucHV0YC4gKi9cblx0XHQgICAgaW5wdXRMZW5ndGgsXG5cdFx0ICAgIC8qKiBDYWNoZWQgY2FsY3VsYXRpb24gcmVzdWx0cyAqL1xuXHRcdCAgICBoYW5kbGVkQ1BDb3VudFBsdXNPbmUsXG5cdFx0ICAgIGJhc2VNaW51c1QsXG5cdFx0ICAgIHFNaW51c1Q7XG5cblx0XHQvLyBDb252ZXJ0IHRoZSBpbnB1dCBpbiBVQ1MtMiB0byBVbmljb2RlXG5cdFx0aW5wdXQgPSB1Y3MyZGVjb2RlKGlucHV0KTtcblxuXHRcdC8vIENhY2hlIHRoZSBsZW5ndGhcblx0XHRpbnB1dExlbmd0aCA9IGlucHV0Lmxlbmd0aDtcblxuXHRcdC8vIEluaXRpYWxpemUgdGhlIHN0YXRlXG5cdFx0biA9IGluaXRpYWxOO1xuXHRcdGRlbHRhID0gMDtcblx0XHRiaWFzID0gaW5pdGlhbEJpYXM7XG5cblx0XHQvLyBIYW5kbGUgdGhlIGJhc2ljIGNvZGUgcG9pbnRzXG5cdFx0Zm9yIChqID0gMDsgaiA8IGlucHV0TGVuZ3RoOyArK2opIHtcblx0XHRcdGN1cnJlbnRWYWx1ZSA9IGlucHV0W2pdO1xuXHRcdFx0aWYgKGN1cnJlbnRWYWx1ZSA8IDB4ODApIHtcblx0XHRcdFx0b3V0cHV0LnB1c2goc3RyaW5nRnJvbUNoYXJDb2RlKGN1cnJlbnRWYWx1ZSkpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGhhbmRsZWRDUENvdW50ID0gYmFzaWNMZW5ndGggPSBvdXRwdXQubGVuZ3RoO1xuXG5cdFx0Ly8gYGhhbmRsZWRDUENvdW50YCBpcyB0aGUgbnVtYmVyIG9mIGNvZGUgcG9pbnRzIHRoYXQgaGF2ZSBiZWVuIGhhbmRsZWQ7XG5cdFx0Ly8gYGJhc2ljTGVuZ3RoYCBpcyB0aGUgbnVtYmVyIG9mIGJhc2ljIGNvZGUgcG9pbnRzLlxuXG5cdFx0Ly8gRmluaXNoIHRoZSBiYXNpYyBzdHJpbmcgLSBpZiBpdCBpcyBub3QgZW1wdHkgLSB3aXRoIGEgZGVsaW1pdGVyXG5cdFx0aWYgKGJhc2ljTGVuZ3RoKSB7XG5cdFx0XHRvdXRwdXQucHVzaChkZWxpbWl0ZXIpO1xuXHRcdH1cblxuXHRcdC8vIE1haW4gZW5jb2RpbmcgbG9vcDpcblx0XHR3aGlsZSAoaGFuZGxlZENQQ291bnQgPCBpbnB1dExlbmd0aCkge1xuXG5cdFx0XHQvLyBBbGwgbm9uLWJhc2ljIGNvZGUgcG9pbnRzIDwgbiBoYXZlIGJlZW4gaGFuZGxlZCBhbHJlYWR5LiBGaW5kIHRoZSBuZXh0XG5cdFx0XHQvLyBsYXJnZXIgb25lOlxuXHRcdFx0Zm9yIChtID0gbWF4SW50LCBqID0gMDsgaiA8IGlucHV0TGVuZ3RoOyArK2opIHtcblx0XHRcdFx0Y3VycmVudFZhbHVlID0gaW5wdXRbal07XG5cdFx0XHRcdGlmIChjdXJyZW50VmFsdWUgPj0gbiAmJiBjdXJyZW50VmFsdWUgPCBtKSB7XG5cdFx0XHRcdFx0bSA9IGN1cnJlbnRWYWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBJbmNyZWFzZSBgZGVsdGFgIGVub3VnaCB0byBhZHZhbmNlIHRoZSBkZWNvZGVyJ3MgPG4saT4gc3RhdGUgdG8gPG0sMD4sXG5cdFx0XHQvLyBidXQgZ3VhcmQgYWdhaW5zdCBvdmVyZmxvd1xuXHRcdFx0aGFuZGxlZENQQ291bnRQbHVzT25lID0gaGFuZGxlZENQQ291bnQgKyAxO1xuXHRcdFx0aWYgKG0gLSBuID4gZmxvb3IoKG1heEludCAtIGRlbHRhKSAvIGhhbmRsZWRDUENvdW50UGx1c09uZSkpIHtcblx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHR9XG5cblx0XHRcdGRlbHRhICs9IChtIC0gbikgKiBoYW5kbGVkQ1BDb3VudFBsdXNPbmU7XG5cdFx0XHRuID0gbTtcblxuXHRcdFx0Zm9yIChqID0gMDsgaiA8IGlucHV0TGVuZ3RoOyArK2opIHtcblx0XHRcdFx0Y3VycmVudFZhbHVlID0gaW5wdXRbal07XG5cblx0XHRcdFx0aWYgKGN1cnJlbnRWYWx1ZSA8IG4gJiYgKytkZWx0YSA+IG1heEludCkge1xuXHRcdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGN1cnJlbnRWYWx1ZSA9PSBuKSB7XG5cdFx0XHRcdFx0Ly8gUmVwcmVzZW50IGRlbHRhIGFzIGEgZ2VuZXJhbGl6ZWQgdmFyaWFibGUtbGVuZ3RoIGludGVnZXJcblx0XHRcdFx0XHRmb3IgKHEgPSBkZWx0YSwgayA9IGJhc2U7IC8qIG5vIGNvbmRpdGlvbiAqLzsgayArPSBiYXNlKSB7XG5cdFx0XHRcdFx0XHR0ID0gayA8PSBiaWFzID8gdE1pbiA6IChrID49IGJpYXMgKyB0TWF4ID8gdE1heCA6IGsgLSBiaWFzKTtcblx0XHRcdFx0XHRcdGlmIChxIDwgdCkge1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHFNaW51c1QgPSBxIC0gdDtcblx0XHRcdFx0XHRcdGJhc2VNaW51c1QgPSBiYXNlIC0gdDtcblx0XHRcdFx0XHRcdG91dHB1dC5wdXNoKFxuXHRcdFx0XHRcdFx0XHRzdHJpbmdGcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHQgKyBxTWludXNUICUgYmFzZU1pbnVzVCwgMCkpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0cSA9IGZsb29yKHFNaW51c1QgLyBiYXNlTWludXNUKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHEsIDApKSk7XG5cdFx0XHRcdFx0YmlhcyA9IGFkYXB0KGRlbHRhLCBoYW5kbGVkQ1BDb3VudFBsdXNPbmUsIGhhbmRsZWRDUENvdW50ID09IGJhc2ljTGVuZ3RoKTtcblx0XHRcdFx0XHRkZWx0YSA9IDA7XG5cdFx0XHRcdFx0KytoYW5kbGVkQ1BDb3VudDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQrK2RlbHRhO1xuXHRcdFx0KytuO1xuXG5cdFx0fVxuXHRcdHJldHVybiBvdXRwdXQuam9pbignJyk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBQdW55Y29kZSBzdHJpbmcgcmVwcmVzZW50aW5nIGEgZG9tYWluIG5hbWUgb3IgYW4gZW1haWwgYWRkcmVzc1xuXHQgKiB0byBVbmljb2RlLiBPbmx5IHRoZSBQdW55Y29kZWQgcGFydHMgb2YgdGhlIGlucHV0IHdpbGwgYmUgY29udmVydGVkLCBpLmUuXG5cdCAqIGl0IGRvZXNuJ3QgbWF0dGVyIGlmIHlvdSBjYWxsIGl0IG9uIGEgc3RyaW5nIHRoYXQgaGFzIGFscmVhZHkgYmVlblxuXHQgKiBjb252ZXJ0ZWQgdG8gVW5pY29kZS5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgUHVueWNvZGVkIGRvbWFpbiBuYW1lIG9yIGVtYWlsIGFkZHJlc3MgdG9cblx0ICogY29udmVydCB0byBVbmljb2RlLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgVW5pY29kZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgZ2l2ZW4gUHVueWNvZGVcblx0ICogc3RyaW5nLlxuXHQgKi9cblx0ZnVuY3Rpb24gdG9Vbmljb2RlKGlucHV0KSB7XG5cdFx0cmV0dXJuIG1hcERvbWFpbihpbnB1dCwgZnVuY3Rpb24oc3RyaW5nKSB7XG5cdFx0XHRyZXR1cm4gcmVnZXhQdW55Y29kZS50ZXN0KHN0cmluZylcblx0XHRcdFx0PyBkZWNvZGUoc3RyaW5nLnNsaWNlKDQpLnRvTG93ZXJDYXNlKCkpXG5cdFx0XHRcdDogc3RyaW5nO1xuXHRcdH0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgVW5pY29kZSBzdHJpbmcgcmVwcmVzZW50aW5nIGEgZG9tYWluIG5hbWUgb3IgYW4gZW1haWwgYWRkcmVzcyB0b1xuXHQgKiBQdW55Y29kZS4gT25seSB0aGUgbm9uLUFTQ0lJIHBhcnRzIG9mIHRoZSBkb21haW4gbmFtZSB3aWxsIGJlIGNvbnZlcnRlZCxcblx0ICogaS5lLiBpdCBkb2Vzbid0IG1hdHRlciBpZiB5b3UgY2FsbCBpdCB3aXRoIGEgZG9tYWluIHRoYXQncyBhbHJlYWR5IGluXG5cdCAqIEFTQ0lJLlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBkb21haW4gbmFtZSBvciBlbWFpbCBhZGRyZXNzIHRvIGNvbnZlcnQsIGFzIGFcblx0ICogVW5pY29kZSBzdHJpbmcuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBQdW55Y29kZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgZ2l2ZW4gZG9tYWluIG5hbWUgb3Jcblx0ICogZW1haWwgYWRkcmVzcy5cblx0ICovXG5cdGZ1bmN0aW9uIHRvQVNDSUkoaW5wdXQpIHtcblx0XHRyZXR1cm4gbWFwRG9tYWluKGlucHV0LCBmdW5jdGlvbihzdHJpbmcpIHtcblx0XHRcdHJldHVybiByZWdleE5vbkFTQ0lJLnRlc3Qoc3RyaW5nKVxuXHRcdFx0XHQ/ICd4bi0tJyArIGVuY29kZShzdHJpbmcpXG5cdFx0XHRcdDogc3RyaW5nO1xuXHRcdH0pO1xuXHR9XG5cblx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblx0LyoqIERlZmluZSB0aGUgcHVibGljIEFQSSAqL1xuXHRwdW55Y29kZSA9IHtcblx0XHQvKipcblx0XHQgKiBBIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGN1cnJlbnQgUHVueWNvZGUuanMgdmVyc2lvbiBudW1iZXIuXG5cdFx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdFx0ICogQHR5cGUgU3RyaW5nXG5cdFx0ICovXG5cdFx0J3ZlcnNpb24nOiAnMS4zLjInLFxuXHRcdC8qKlxuXHRcdCAqIEFuIG9iamVjdCBvZiBtZXRob2RzIHRvIGNvbnZlcnQgZnJvbSBKYXZhU2NyaXB0J3MgaW50ZXJuYWwgY2hhcmFjdGVyXG5cdFx0ICogcmVwcmVzZW50YXRpb24gKFVDUy0yKSB0byBVbmljb2RlIGNvZGUgcG9pbnRzLCBhbmQgYmFjay5cblx0XHQgKiBAc2VlIDxodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZz5cblx0XHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0XHQgKiBAdHlwZSBPYmplY3Rcblx0XHQgKi9cblx0XHQndWNzMic6IHtcblx0XHRcdCdkZWNvZGUnOiB1Y3MyZGVjb2RlLFxuXHRcdFx0J2VuY29kZSc6IHVjczJlbmNvZGVcblx0XHR9LFxuXHRcdCdkZWNvZGUnOiBkZWNvZGUsXG5cdFx0J2VuY29kZSc6IGVuY29kZSxcblx0XHQndG9BU0NJSSc6IHRvQVNDSUksXG5cdFx0J3RvVW5pY29kZSc6IHRvVW5pY29kZVxuXHR9O1xuXG5cdC8qKiBFeHBvc2UgYHB1bnljb2RlYCAqL1xuXHQvLyBTb21lIEFNRCBidWlsZCBvcHRpbWl6ZXJzLCBsaWtlIHIuanMsIGNoZWNrIGZvciBzcGVjaWZpYyBjb25kaXRpb24gcGF0dGVybnNcblx0Ly8gbGlrZSB0aGUgZm9sbG93aW5nOlxuXHRpZiAoXG5cdFx0dHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmXG5cdFx0dHlwZW9mIGRlZmluZS5hbWQgPT0gJ29iamVjdCcgJiZcblx0XHRkZWZpbmUuYW1kXG5cdCkge1xuXHRcdGRlZmluZSgncHVueWNvZGUnLCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBwdW55Y29kZTtcblx0XHR9KTtcblx0fSBlbHNlIGlmIChmcmVlRXhwb3J0cyAmJiBmcmVlTW9kdWxlKSB7XG5cdFx0aWYgKG1vZHVsZS5leHBvcnRzID09IGZyZWVFeHBvcnRzKSB7IC8vIGluIE5vZGUuanMgb3IgUmluZ29KUyB2MC44LjArXG5cdFx0XHRmcmVlTW9kdWxlLmV4cG9ydHMgPSBwdW55Y29kZTtcblx0XHR9IGVsc2UgeyAvLyBpbiBOYXJ3aGFsIG9yIFJpbmdvSlMgdjAuNy4wLVxuXHRcdFx0Zm9yIChrZXkgaW4gcHVueWNvZGUpIHtcblx0XHRcdFx0cHVueWNvZGUuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAoZnJlZUV4cG9ydHNba2V5XSA9IHB1bnljb2RlW2tleV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIHsgLy8gaW4gUmhpbm8gb3IgYSB3ZWIgYnJvd3NlclxuXHRcdHJvb3QucHVueWNvZGUgPSBwdW55Y29kZTtcblx0fVxuXG59KHRoaXMpKTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBwdW55Y29kZSA9IHJlcXVpcmUoJ3B1bnljb2RlJyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xuXG5leHBvcnRzLnBhcnNlID0gdXJsUGFyc2U7XG5leHBvcnRzLnJlc29sdmUgPSB1cmxSZXNvbHZlO1xuZXhwb3J0cy5yZXNvbHZlT2JqZWN0ID0gdXJsUmVzb2x2ZU9iamVjdDtcbmV4cG9ydHMuZm9ybWF0ID0gdXJsRm9ybWF0O1xuXG5leHBvcnRzLlVybCA9IFVybDtcblxuZnVuY3Rpb24gVXJsKCkge1xuICB0aGlzLnByb3RvY29sID0gbnVsbDtcbiAgdGhpcy5zbGFzaGVzID0gbnVsbDtcbiAgdGhpcy5hdXRoID0gbnVsbDtcbiAgdGhpcy5ob3N0ID0gbnVsbDtcbiAgdGhpcy5wb3J0ID0gbnVsbDtcbiAgdGhpcy5ob3N0bmFtZSA9IG51bGw7XG4gIHRoaXMuaGFzaCA9IG51bGw7XG4gIHRoaXMuc2VhcmNoID0gbnVsbDtcbiAgdGhpcy5xdWVyeSA9IG51bGw7XG4gIHRoaXMucGF0aG5hbWUgPSBudWxsO1xuICB0aGlzLnBhdGggPSBudWxsO1xuICB0aGlzLmhyZWYgPSBudWxsO1xufVxuXG4vLyBSZWZlcmVuY2U6IFJGQyAzOTg2LCBSRkMgMTgwOCwgUkZDIDIzOTZcblxuLy8gZGVmaW5lIHRoZXNlIGhlcmUgc28gYXQgbGVhc3QgdGhleSBvbmx5IGhhdmUgdG8gYmVcbi8vIGNvbXBpbGVkIG9uY2Ugb24gdGhlIGZpcnN0IG1vZHVsZSBsb2FkLlxudmFyIHByb3RvY29sUGF0dGVybiA9IC9eKFthLXowLTkuKy1dKzopL2ksXG4gICAgcG9ydFBhdHRlcm4gPSAvOlswLTldKiQvLFxuXG4gICAgLy8gU3BlY2lhbCBjYXNlIGZvciBhIHNpbXBsZSBwYXRoIFVSTFxuICAgIHNpbXBsZVBhdGhQYXR0ZXJuID0gL14oXFwvXFwvPyg/IVxcLylbXlxcP1xcc10qKShcXD9bXlxcc10qKT8kLyxcblxuICAgIC8vIFJGQyAyMzk2OiBjaGFyYWN0ZXJzIHJlc2VydmVkIGZvciBkZWxpbWl0aW5nIFVSTHMuXG4gICAgLy8gV2UgYWN0dWFsbHkganVzdCBhdXRvLWVzY2FwZSB0aGVzZS5cbiAgICBkZWxpbXMgPSBbJzwnLCAnPicsICdcIicsICdgJywgJyAnLCAnXFxyJywgJ1xcbicsICdcXHQnXSxcblxuICAgIC8vIFJGQyAyMzk2OiBjaGFyYWN0ZXJzIG5vdCBhbGxvd2VkIGZvciB2YXJpb3VzIHJlYXNvbnMuXG4gICAgdW53aXNlID0gWyd7JywgJ30nLCAnfCcsICdcXFxcJywgJ14nLCAnYCddLmNvbmNhdChkZWxpbXMpLFxuXG4gICAgLy8gQWxsb3dlZCBieSBSRkNzLCBidXQgY2F1c2Ugb2YgWFNTIGF0dGFja3MuICBBbHdheXMgZXNjYXBlIHRoZXNlLlxuICAgIGF1dG9Fc2NhcGUgPSBbJ1xcJyddLmNvbmNhdCh1bndpc2UpLFxuICAgIC8vIENoYXJhY3RlcnMgdGhhdCBhcmUgbmV2ZXIgZXZlciBhbGxvd2VkIGluIGEgaG9zdG5hbWUuXG4gICAgLy8gTm90ZSB0aGF0IGFueSBpbnZhbGlkIGNoYXJzIGFyZSBhbHNvIGhhbmRsZWQsIGJ1dCB0aGVzZVxuICAgIC8vIGFyZSB0aGUgb25lcyB0aGF0IGFyZSAqZXhwZWN0ZWQqIHRvIGJlIHNlZW4sIHNvIHdlIGZhc3QtcGF0aFxuICAgIC8vIHRoZW0uXG4gICAgbm9uSG9zdENoYXJzID0gWyclJywgJy8nLCAnPycsICc7JywgJyMnXS5jb25jYXQoYXV0b0VzY2FwZSksXG4gICAgaG9zdEVuZGluZ0NoYXJzID0gWycvJywgJz8nLCAnIyddLFxuICAgIGhvc3RuYW1lTWF4TGVuID0gMjU1LFxuICAgIGhvc3RuYW1lUGFydFBhdHRlcm4gPSAvXlsrYS16MC05QS1aXy1dezAsNjN9JC8sXG4gICAgaG9zdG5hbWVQYXJ0U3RhcnQgPSAvXihbK2EtejAtOUEtWl8tXXswLDYzfSkoLiopJC8sXG4gICAgLy8gcHJvdG9jb2xzIHRoYXQgY2FuIGFsbG93IFwidW5zYWZlXCIgYW5kIFwidW53aXNlXCIgY2hhcnMuXG4gICAgdW5zYWZlUHJvdG9jb2wgPSB7XG4gICAgICAnamF2YXNjcmlwdCc6IHRydWUsXG4gICAgICAnamF2YXNjcmlwdDonOiB0cnVlXG4gICAgfSxcbiAgICAvLyBwcm90b2NvbHMgdGhhdCBuZXZlciBoYXZlIGEgaG9zdG5hbWUuXG4gICAgaG9zdGxlc3NQcm90b2NvbCA9IHtcbiAgICAgICdqYXZhc2NyaXB0JzogdHJ1ZSxcbiAgICAgICdqYXZhc2NyaXB0Oic6IHRydWVcbiAgICB9LFxuICAgIC8vIHByb3RvY29scyB0aGF0IGFsd2F5cyBjb250YWluIGEgLy8gYml0LlxuICAgIHNsYXNoZWRQcm90b2NvbCA9IHtcbiAgICAgICdodHRwJzogdHJ1ZSxcbiAgICAgICdodHRwcyc6IHRydWUsXG4gICAgICAnZnRwJzogdHJ1ZSxcbiAgICAgICdnb3BoZXInOiB0cnVlLFxuICAgICAgJ2ZpbGUnOiB0cnVlLFxuICAgICAgJ2h0dHA6JzogdHJ1ZSxcbiAgICAgICdodHRwczonOiB0cnVlLFxuICAgICAgJ2Z0cDonOiB0cnVlLFxuICAgICAgJ2dvcGhlcjonOiB0cnVlLFxuICAgICAgJ2ZpbGU6JzogdHJ1ZVxuICAgIH0sXG4gICAgcXVlcnlzdHJpbmcgPSByZXF1aXJlKCdxdWVyeXN0cmluZycpO1xuXG5mdW5jdGlvbiB1cmxQYXJzZSh1cmwsIHBhcnNlUXVlcnlTdHJpbmcsIHNsYXNoZXNEZW5vdGVIb3N0KSB7XG4gIGlmICh1cmwgJiYgdXRpbC5pc09iamVjdCh1cmwpICYmIHVybCBpbnN0YW5jZW9mIFVybCkgcmV0dXJuIHVybDtcblxuICB2YXIgdSA9IG5ldyBVcmw7XG4gIHUucGFyc2UodXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCk7XG4gIHJldHVybiB1O1xufVxuXG5VcmwucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24odXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCkge1xuICBpZiAoIXV0aWwuaXNTdHJpbmcodXJsKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQYXJhbWV0ZXIgJ3VybCcgbXVzdCBiZSBhIHN0cmluZywgbm90IFwiICsgdHlwZW9mIHVybCk7XG4gIH1cblxuICAvLyBDb3B5IGNocm9tZSwgSUUsIG9wZXJhIGJhY2tzbGFzaC1oYW5kbGluZyBiZWhhdmlvci5cbiAgLy8gQmFjayBzbGFzaGVzIGJlZm9yZSB0aGUgcXVlcnkgc3RyaW5nIGdldCBjb252ZXJ0ZWQgdG8gZm9yd2FyZCBzbGFzaGVzXG4gIC8vIFNlZTogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTI1OTE2XG4gIHZhciBxdWVyeUluZGV4ID0gdXJsLmluZGV4T2YoJz8nKSxcbiAgICAgIHNwbGl0dGVyID1cbiAgICAgICAgICAocXVlcnlJbmRleCAhPT0gLTEgJiYgcXVlcnlJbmRleCA8IHVybC5pbmRleE9mKCcjJykpID8gJz8nIDogJyMnLFxuICAgICAgdVNwbGl0ID0gdXJsLnNwbGl0KHNwbGl0dGVyKSxcbiAgICAgIHNsYXNoUmVnZXggPSAvXFxcXC9nO1xuICB1U3BsaXRbMF0gPSB1U3BsaXRbMF0ucmVwbGFjZShzbGFzaFJlZ2V4LCAnLycpO1xuICB1cmwgPSB1U3BsaXQuam9pbihzcGxpdHRlcik7XG5cbiAgdmFyIHJlc3QgPSB1cmw7XG5cbiAgLy8gdHJpbSBiZWZvcmUgcHJvY2VlZGluZy5cbiAgLy8gVGhpcyBpcyB0byBzdXBwb3J0IHBhcnNlIHN0dWZmIGxpa2UgXCIgIGh0dHA6Ly9mb28uY29tICBcXG5cIlxuICByZXN0ID0gcmVzdC50cmltKCk7XG5cbiAgaWYgKCFzbGFzaGVzRGVub3RlSG9zdCAmJiB1cmwuc3BsaXQoJyMnKS5sZW5ndGggPT09IDEpIHtcbiAgICAvLyBUcnkgZmFzdCBwYXRoIHJlZ2V4cFxuICAgIHZhciBzaW1wbGVQYXRoID0gc2ltcGxlUGF0aFBhdHRlcm4uZXhlYyhyZXN0KTtcbiAgICBpZiAoc2ltcGxlUGF0aCkge1xuICAgICAgdGhpcy5wYXRoID0gcmVzdDtcbiAgICAgIHRoaXMuaHJlZiA9IHJlc3Q7XG4gICAgICB0aGlzLnBhdGhuYW1lID0gc2ltcGxlUGF0aFsxXTtcbiAgICAgIGlmIChzaW1wbGVQYXRoWzJdKSB7XG4gICAgICAgIHRoaXMuc2VhcmNoID0gc2ltcGxlUGF0aFsyXTtcbiAgICAgICAgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAgICAgICB0aGlzLnF1ZXJ5ID0gcXVlcnlzdHJpbmcucGFyc2UodGhpcy5zZWFyY2guc3Vic3RyKDEpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnF1ZXJ5ID0gdGhpcy5zZWFyY2guc3Vic3RyKDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAgICAgdGhpcy5zZWFyY2ggPSAnJztcbiAgICAgICAgdGhpcy5xdWVyeSA9IHt9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9XG5cbiAgdmFyIHByb3RvID0gcHJvdG9jb2xQYXR0ZXJuLmV4ZWMocmVzdCk7XG4gIGlmIChwcm90bykge1xuICAgIHByb3RvID0gcHJvdG9bMF07XG4gICAgdmFyIGxvd2VyUHJvdG8gPSBwcm90by50b0xvd2VyQ2FzZSgpO1xuICAgIHRoaXMucHJvdG9jb2wgPSBsb3dlclByb3RvO1xuICAgIHJlc3QgPSByZXN0LnN1YnN0cihwcm90by5sZW5ndGgpO1xuICB9XG5cbiAgLy8gZmlndXJlIG91dCBpZiBpdCdzIGdvdCBhIGhvc3RcbiAgLy8gdXNlckBzZXJ2ZXIgaXMgKmFsd2F5cyogaW50ZXJwcmV0ZWQgYXMgYSBob3N0bmFtZSwgYW5kIHVybFxuICAvLyByZXNvbHV0aW9uIHdpbGwgdHJlYXQgLy9mb28vYmFyIGFzIGhvc3Q9Zm9vLHBhdGg9YmFyIGJlY2F1c2UgdGhhdCdzXG4gIC8vIGhvdyB0aGUgYnJvd3NlciByZXNvbHZlcyByZWxhdGl2ZSBVUkxzLlxuICBpZiAoc2xhc2hlc0Rlbm90ZUhvc3QgfHwgcHJvdG8gfHwgcmVzdC5tYXRjaCgvXlxcL1xcL1teQFxcL10rQFteQFxcL10rLykpIHtcbiAgICB2YXIgc2xhc2hlcyA9IHJlc3Quc3Vic3RyKDAsIDIpID09PSAnLy8nO1xuICAgIGlmIChzbGFzaGVzICYmICEocHJvdG8gJiYgaG9zdGxlc3NQcm90b2NvbFtwcm90b10pKSB7XG4gICAgICByZXN0ID0gcmVzdC5zdWJzdHIoMik7XG4gICAgICB0aGlzLnNsYXNoZXMgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmICghaG9zdGxlc3NQcm90b2NvbFtwcm90b10gJiZcbiAgICAgIChzbGFzaGVzIHx8IChwcm90byAmJiAhc2xhc2hlZFByb3RvY29sW3Byb3RvXSkpKSB7XG5cbiAgICAvLyB0aGVyZSdzIGEgaG9zdG5hbWUuXG4gICAgLy8gdGhlIGZpcnN0IGluc3RhbmNlIG9mIC8sID8sIDssIG9yICMgZW5kcyB0aGUgaG9zdC5cbiAgICAvL1xuICAgIC8vIElmIHRoZXJlIGlzIGFuIEAgaW4gdGhlIGhvc3RuYW1lLCB0aGVuIG5vbi1ob3N0IGNoYXJzICphcmUqIGFsbG93ZWRcbiAgICAvLyB0byB0aGUgbGVmdCBvZiB0aGUgbGFzdCBAIHNpZ24sIHVubGVzcyBzb21lIGhvc3QtZW5kaW5nIGNoYXJhY3RlclxuICAgIC8vIGNvbWVzICpiZWZvcmUqIHRoZSBALXNpZ24uXG4gICAgLy8gVVJMcyBhcmUgb2Jub3hpb3VzLlxuICAgIC8vXG4gICAgLy8gZXg6XG4gICAgLy8gaHR0cDovL2FAYkBjLyA9PiB1c2VyOmFAYiBob3N0OmNcbiAgICAvLyBodHRwOi8vYUBiP0BjID0+IHVzZXI6YSBob3N0OmMgcGF0aDovP0BjXG5cbiAgICAvLyB2MC4xMiBUT0RPKGlzYWFjcyk6IFRoaXMgaXMgbm90IHF1aXRlIGhvdyBDaHJvbWUgZG9lcyB0aGluZ3MuXG4gICAgLy8gUmV2aWV3IG91ciB0ZXN0IGNhc2UgYWdhaW5zdCBicm93c2VycyBtb3JlIGNvbXByZWhlbnNpdmVseS5cblxuICAgIC8vIGZpbmQgdGhlIGZpcnN0IGluc3RhbmNlIG9mIGFueSBob3N0RW5kaW5nQ2hhcnNcbiAgICB2YXIgaG9zdEVuZCA9IC0xO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaG9zdEVuZGluZ0NoYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaGVjID0gcmVzdC5pbmRleE9mKGhvc3RFbmRpbmdDaGFyc1tpXSk7XG4gICAgICBpZiAoaGVjICE9PSAtMSAmJiAoaG9zdEVuZCA9PT0gLTEgfHwgaGVjIDwgaG9zdEVuZCkpXG4gICAgICAgIGhvc3RFbmQgPSBoZWM7XG4gICAgfVxuXG4gICAgLy8gYXQgdGhpcyBwb2ludCwgZWl0aGVyIHdlIGhhdmUgYW4gZXhwbGljaXQgcG9pbnQgd2hlcmUgdGhlXG4gICAgLy8gYXV0aCBwb3J0aW9uIGNhbm5vdCBnbyBwYXN0LCBvciB0aGUgbGFzdCBAIGNoYXIgaXMgdGhlIGRlY2lkZXIuXG4gICAgdmFyIGF1dGgsIGF0U2lnbjtcbiAgICBpZiAoaG9zdEVuZCA9PT0gLTEpIHtcbiAgICAgIC8vIGF0U2lnbiBjYW4gYmUgYW55d2hlcmUuXG4gICAgICBhdFNpZ24gPSByZXN0Lmxhc3RJbmRleE9mKCdAJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGF0U2lnbiBtdXN0IGJlIGluIGF1dGggcG9ydGlvbi5cbiAgICAgIC8vIGh0dHA6Ly9hQGIvY0BkID0+IGhvc3Q6YiBhdXRoOmEgcGF0aDovY0BkXG4gICAgICBhdFNpZ24gPSByZXN0Lmxhc3RJbmRleE9mKCdAJywgaG9zdEVuZCk7XG4gICAgfVxuXG4gICAgLy8gTm93IHdlIGhhdmUgYSBwb3J0aW9uIHdoaWNoIGlzIGRlZmluaXRlbHkgdGhlIGF1dGguXG4gICAgLy8gUHVsbCB0aGF0IG9mZi5cbiAgICBpZiAoYXRTaWduICE9PSAtMSkge1xuICAgICAgYXV0aCA9IHJlc3Quc2xpY2UoMCwgYXRTaWduKTtcbiAgICAgIHJlc3QgPSByZXN0LnNsaWNlKGF0U2lnbiArIDEpO1xuICAgICAgdGhpcy5hdXRoID0gZGVjb2RlVVJJQ29tcG9uZW50KGF1dGgpO1xuICAgIH1cblxuICAgIC8vIHRoZSBob3N0IGlzIHRoZSByZW1haW5pbmcgdG8gdGhlIGxlZnQgb2YgdGhlIGZpcnN0IG5vbi1ob3N0IGNoYXJcbiAgICBob3N0RW5kID0gLTE7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub25Ib3N0Q2hhcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBoZWMgPSByZXN0LmluZGV4T2Yobm9uSG9zdENoYXJzW2ldKTtcbiAgICAgIGlmIChoZWMgIT09IC0xICYmIChob3N0RW5kID09PSAtMSB8fCBoZWMgPCBob3N0RW5kKSlcbiAgICAgICAgaG9zdEVuZCA9IGhlYztcbiAgICB9XG4gICAgLy8gaWYgd2Ugc3RpbGwgaGF2ZSBub3QgaGl0IGl0LCB0aGVuIHRoZSBlbnRpcmUgdGhpbmcgaXMgYSBob3N0LlxuICAgIGlmIChob3N0RW5kID09PSAtMSlcbiAgICAgIGhvc3RFbmQgPSByZXN0Lmxlbmd0aDtcblxuICAgIHRoaXMuaG9zdCA9IHJlc3Quc2xpY2UoMCwgaG9zdEVuZCk7XG4gICAgcmVzdCA9IHJlc3Quc2xpY2UoaG9zdEVuZCk7XG5cbiAgICAvLyBwdWxsIG91dCBwb3J0LlxuICAgIHRoaXMucGFyc2VIb3N0KCk7XG5cbiAgICAvLyB3ZSd2ZSBpbmRpY2F0ZWQgdGhhdCB0aGVyZSBpcyBhIGhvc3RuYW1lLFxuICAgIC8vIHNvIGV2ZW4gaWYgaXQncyBlbXB0eSwgaXQgaGFzIHRvIGJlIHByZXNlbnQuXG4gICAgdGhpcy5ob3N0bmFtZSA9IHRoaXMuaG9zdG5hbWUgfHwgJyc7XG5cbiAgICAvLyBpZiBob3N0bmFtZSBiZWdpbnMgd2l0aCBbIGFuZCBlbmRzIHdpdGggXVxuICAgIC8vIGFzc3VtZSB0aGF0IGl0J3MgYW4gSVB2NiBhZGRyZXNzLlxuICAgIHZhciBpcHY2SG9zdG5hbWUgPSB0aGlzLmhvc3RuYW1lWzBdID09PSAnWycgJiZcbiAgICAgICAgdGhpcy5ob3N0bmFtZVt0aGlzLmhvc3RuYW1lLmxlbmd0aCAtIDFdID09PSAnXSc7XG5cbiAgICAvLyB2YWxpZGF0ZSBhIGxpdHRsZS5cbiAgICBpZiAoIWlwdjZIb3N0bmFtZSkge1xuICAgICAgdmFyIGhvc3RwYXJ0cyA9IHRoaXMuaG9zdG5hbWUuc3BsaXQoL1xcLi8pO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBob3N0cGFydHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZhciBwYXJ0ID0gaG9zdHBhcnRzW2ldO1xuICAgICAgICBpZiAoIXBhcnQpIGNvbnRpbnVlO1xuICAgICAgICBpZiAoIXBhcnQubWF0Y2goaG9zdG5hbWVQYXJ0UGF0dGVybikpIHtcbiAgICAgICAgICB2YXIgbmV3cGFydCA9ICcnO1xuICAgICAgICAgIGZvciAodmFyIGogPSAwLCBrID0gcGFydC5sZW5ndGg7IGogPCBrOyBqKyspIHtcbiAgICAgICAgICAgIGlmIChwYXJ0LmNoYXJDb2RlQXQoaikgPiAxMjcpIHtcbiAgICAgICAgICAgICAgLy8gd2UgcmVwbGFjZSBub24tQVNDSUkgY2hhciB3aXRoIGEgdGVtcG9yYXJ5IHBsYWNlaG9sZGVyXG4gICAgICAgICAgICAgIC8vIHdlIG5lZWQgdGhpcyB0byBtYWtlIHN1cmUgc2l6ZSBvZiBob3N0bmFtZSBpcyBub3RcbiAgICAgICAgICAgICAgLy8gYnJva2VuIGJ5IHJlcGxhY2luZyBub24tQVNDSUkgYnkgbm90aGluZ1xuICAgICAgICAgICAgICBuZXdwYXJ0ICs9ICd4JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG5ld3BhcnQgKz0gcGFydFtqXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gd2UgdGVzdCBhZ2FpbiB3aXRoIEFTQ0lJIGNoYXIgb25seVxuICAgICAgICAgIGlmICghbmV3cGFydC5tYXRjaChob3N0bmFtZVBhcnRQYXR0ZXJuKSkge1xuICAgICAgICAgICAgdmFyIHZhbGlkUGFydHMgPSBob3N0cGFydHMuc2xpY2UoMCwgaSk7XG4gICAgICAgICAgICB2YXIgbm90SG9zdCA9IGhvc3RwYXJ0cy5zbGljZShpICsgMSk7XG4gICAgICAgICAgICB2YXIgYml0ID0gcGFydC5tYXRjaChob3N0bmFtZVBhcnRTdGFydCk7XG4gICAgICAgICAgICBpZiAoYml0KSB7XG4gICAgICAgICAgICAgIHZhbGlkUGFydHMucHVzaChiaXRbMV0pO1xuICAgICAgICAgICAgICBub3RIb3N0LnVuc2hpZnQoYml0WzJdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChub3RIb3N0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICByZXN0ID0gJy8nICsgbm90SG9zdC5qb2luKCcuJykgKyByZXN0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5ob3N0bmFtZSA9IHZhbGlkUGFydHMuam9pbignLicpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaG9zdG5hbWUubGVuZ3RoID4gaG9zdG5hbWVNYXhMZW4pIHtcbiAgICAgIHRoaXMuaG9zdG5hbWUgPSAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaG9zdG5hbWVzIGFyZSBhbHdheXMgbG93ZXIgY2FzZS5cbiAgICAgIHRoaXMuaG9zdG5hbWUgPSB0aGlzLmhvc3RuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgaWYgKCFpcHY2SG9zdG5hbWUpIHtcbiAgICAgIC8vIElETkEgU3VwcG9ydDogUmV0dXJucyBhIHB1bnljb2RlZCByZXByZXNlbnRhdGlvbiBvZiBcImRvbWFpblwiLlxuICAgICAgLy8gSXQgb25seSBjb252ZXJ0cyBwYXJ0cyBvZiB0aGUgZG9tYWluIG5hbWUgdGhhdFxuICAgICAgLy8gaGF2ZSBub24tQVNDSUkgY2hhcmFjdGVycywgaS5lLiBpdCBkb2Vzbid0IG1hdHRlciBpZlxuICAgICAgLy8geW91IGNhbGwgaXQgd2l0aCBhIGRvbWFpbiB0aGF0IGFscmVhZHkgaXMgQVNDSUktb25seS5cbiAgICAgIHRoaXMuaG9zdG5hbWUgPSBwdW55Y29kZS50b0FTQ0lJKHRoaXMuaG9zdG5hbWUpO1xuICAgIH1cblxuICAgIHZhciBwID0gdGhpcy5wb3J0ID8gJzonICsgdGhpcy5wb3J0IDogJyc7XG4gICAgdmFyIGggPSB0aGlzLmhvc3RuYW1lIHx8ICcnO1xuICAgIHRoaXMuaG9zdCA9IGggKyBwO1xuICAgIHRoaXMuaHJlZiArPSB0aGlzLmhvc3Q7XG5cbiAgICAvLyBzdHJpcCBbIGFuZCBdIGZyb20gdGhlIGhvc3RuYW1lXG4gICAgLy8gdGhlIGhvc3QgZmllbGQgc3RpbGwgcmV0YWlucyB0aGVtLCB0aG91Z2hcbiAgICBpZiAoaXB2Nkhvc3RuYW1lKSB7XG4gICAgICB0aGlzLmhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZS5zdWJzdHIoMSwgdGhpcy5ob3N0bmFtZS5sZW5ndGggLSAyKTtcbiAgICAgIGlmIChyZXN0WzBdICE9PSAnLycpIHtcbiAgICAgICAgcmVzdCA9ICcvJyArIHJlc3Q7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gbm93IHJlc3QgaXMgc2V0IHRvIHRoZSBwb3N0LWhvc3Qgc3R1ZmYuXG4gIC8vIGNob3Agb2ZmIGFueSBkZWxpbSBjaGFycy5cbiAgaWYgKCF1bnNhZmVQcm90b2NvbFtsb3dlclByb3RvXSkge1xuXG4gICAgLy8gRmlyc3QsIG1ha2UgMTAwJSBzdXJlIHRoYXQgYW55IFwiYXV0b0VzY2FwZVwiIGNoYXJzIGdldFxuICAgIC8vIGVzY2FwZWQsIGV2ZW4gaWYgZW5jb2RlVVJJQ29tcG9uZW50IGRvZXNuJ3QgdGhpbmsgdGhleVxuICAgIC8vIG5lZWQgdG8gYmUuXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhdXRvRXNjYXBlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIGFlID0gYXV0b0VzY2FwZVtpXTtcbiAgICAgIGlmIChyZXN0LmluZGV4T2YoYWUpID09PSAtMSlcbiAgICAgICAgY29udGludWU7XG4gICAgICB2YXIgZXNjID0gZW5jb2RlVVJJQ29tcG9uZW50KGFlKTtcbiAgICAgIGlmIChlc2MgPT09IGFlKSB7XG4gICAgICAgIGVzYyA9IGVzY2FwZShhZSk7XG4gICAgICB9XG4gICAgICByZXN0ID0gcmVzdC5zcGxpdChhZSkuam9pbihlc2MpO1xuICAgIH1cbiAgfVxuXG5cbiAgLy8gY2hvcCBvZmYgZnJvbSB0aGUgdGFpbCBmaXJzdC5cbiAgdmFyIGhhc2ggPSByZXN0LmluZGV4T2YoJyMnKTtcbiAgaWYgKGhhc2ggIT09IC0xKSB7XG4gICAgLy8gZ290IGEgZnJhZ21lbnQgc3RyaW5nLlxuICAgIHRoaXMuaGFzaCA9IHJlc3Quc3Vic3RyKGhhc2gpO1xuICAgIHJlc3QgPSByZXN0LnNsaWNlKDAsIGhhc2gpO1xuICB9XG4gIHZhciBxbSA9IHJlc3QuaW5kZXhPZignPycpO1xuICBpZiAocW0gIT09IC0xKSB7XG4gICAgdGhpcy5zZWFyY2ggPSByZXN0LnN1YnN0cihxbSk7XG4gICAgdGhpcy5xdWVyeSA9IHJlc3Quc3Vic3RyKHFtICsgMSk7XG4gICAgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAgIHRoaXMucXVlcnkgPSBxdWVyeXN0cmluZy5wYXJzZSh0aGlzLnF1ZXJ5KTtcbiAgICB9XG4gICAgcmVzdCA9IHJlc3Quc2xpY2UoMCwgcW0pO1xuICB9IGVsc2UgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAvLyBubyBxdWVyeSBzdHJpbmcsIGJ1dCBwYXJzZVF1ZXJ5U3RyaW5nIHN0aWxsIHJlcXVlc3RlZFxuICAgIHRoaXMuc2VhcmNoID0gJyc7XG4gICAgdGhpcy5xdWVyeSA9IHt9O1xuICB9XG4gIGlmIChyZXN0KSB0aGlzLnBhdGhuYW1lID0gcmVzdDtcbiAgaWYgKHNsYXNoZWRQcm90b2NvbFtsb3dlclByb3RvXSAmJlxuICAgICAgdGhpcy5ob3N0bmFtZSAmJiAhdGhpcy5wYXRobmFtZSkge1xuICAgIHRoaXMucGF0aG5hbWUgPSAnLyc7XG4gIH1cblxuICAvL3RvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gIGlmICh0aGlzLnBhdGhuYW1lIHx8IHRoaXMuc2VhcmNoKSB7XG4gICAgdmFyIHAgPSB0aGlzLnBhdGhuYW1lIHx8ICcnO1xuICAgIHZhciBzID0gdGhpcy5zZWFyY2ggfHwgJyc7XG4gICAgdGhpcy5wYXRoID0gcCArIHM7XG4gIH1cblxuICAvLyBmaW5hbGx5LCByZWNvbnN0cnVjdCB0aGUgaHJlZiBiYXNlZCBvbiB3aGF0IGhhcyBiZWVuIHZhbGlkYXRlZC5cbiAgdGhpcy5ocmVmID0gdGhpcy5mb3JtYXQoKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBmb3JtYXQgYSBwYXJzZWQgb2JqZWN0IGludG8gYSB1cmwgc3RyaW5nXG5mdW5jdGlvbiB1cmxGb3JtYXQob2JqKSB7XG4gIC8vIGVuc3VyZSBpdCdzIGFuIG9iamVjdCwgYW5kIG5vdCBhIHN0cmluZyB1cmwuXG4gIC8vIElmIGl0J3MgYW4gb2JqLCB0aGlzIGlzIGEgbm8tb3AuXG4gIC8vIHRoaXMgd2F5LCB5b3UgY2FuIGNhbGwgdXJsX2Zvcm1hdCgpIG9uIHN0cmluZ3NcbiAgLy8gdG8gY2xlYW4gdXAgcG90ZW50aWFsbHkgd29ua3kgdXJscy5cbiAgaWYgKHV0aWwuaXNTdHJpbmcob2JqKSkgb2JqID0gdXJsUGFyc2Uob2JqKTtcbiAgaWYgKCEob2JqIGluc3RhbmNlb2YgVXJsKSkgcmV0dXJuIFVybC5wcm90b3R5cGUuZm9ybWF0LmNhbGwob2JqKTtcbiAgcmV0dXJuIG9iai5mb3JtYXQoKTtcbn1cblxuVXJsLnByb3RvdHlwZS5mb3JtYXQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGF1dGggPSB0aGlzLmF1dGggfHwgJyc7XG4gIGlmIChhdXRoKSB7XG4gICAgYXV0aCA9IGVuY29kZVVSSUNvbXBvbmVudChhdXRoKTtcbiAgICBhdXRoID0gYXV0aC5yZXBsYWNlKC8lM0EvaSwgJzonKTtcbiAgICBhdXRoICs9ICdAJztcbiAgfVxuXG4gIHZhciBwcm90b2NvbCA9IHRoaXMucHJvdG9jb2wgfHwgJycsXG4gICAgICBwYXRobmFtZSA9IHRoaXMucGF0aG5hbWUgfHwgJycsXG4gICAgICBoYXNoID0gdGhpcy5oYXNoIHx8ICcnLFxuICAgICAgaG9zdCA9IGZhbHNlLFxuICAgICAgcXVlcnkgPSAnJztcblxuICBpZiAodGhpcy5ob3N0KSB7XG4gICAgaG9zdCA9IGF1dGggKyB0aGlzLmhvc3Q7XG4gIH0gZWxzZSBpZiAodGhpcy5ob3N0bmFtZSkge1xuICAgIGhvc3QgPSBhdXRoICsgKHRoaXMuaG9zdG5hbWUuaW5kZXhPZignOicpID09PSAtMSA/XG4gICAgICAgIHRoaXMuaG9zdG5hbWUgOlxuICAgICAgICAnWycgKyB0aGlzLmhvc3RuYW1lICsgJ10nKTtcbiAgICBpZiAodGhpcy5wb3J0KSB7XG4gICAgICBob3N0ICs9ICc6JyArIHRoaXMucG9ydDtcbiAgICB9XG4gIH1cblxuICBpZiAodGhpcy5xdWVyeSAmJlxuICAgICAgdXRpbC5pc09iamVjdCh0aGlzLnF1ZXJ5KSAmJlxuICAgICAgT2JqZWN0LmtleXModGhpcy5xdWVyeSkubGVuZ3RoKSB7XG4gICAgcXVlcnkgPSBxdWVyeXN0cmluZy5zdHJpbmdpZnkodGhpcy5xdWVyeSk7XG4gIH1cblxuICB2YXIgc2VhcmNoID0gdGhpcy5zZWFyY2ggfHwgKHF1ZXJ5ICYmICgnPycgKyBxdWVyeSkpIHx8ICcnO1xuXG4gIGlmIChwcm90b2NvbCAmJiBwcm90b2NvbC5zdWJzdHIoLTEpICE9PSAnOicpIHByb3RvY29sICs9ICc6JztcblxuICAvLyBvbmx5IHRoZSBzbGFzaGVkUHJvdG9jb2xzIGdldCB0aGUgLy8uICBOb3QgbWFpbHRvOiwgeG1wcDosIGV0Yy5cbiAgLy8gdW5sZXNzIHRoZXkgaGFkIHRoZW0gdG8gYmVnaW4gd2l0aC5cbiAgaWYgKHRoaXMuc2xhc2hlcyB8fFxuICAgICAgKCFwcm90b2NvbCB8fCBzbGFzaGVkUHJvdG9jb2xbcHJvdG9jb2xdKSAmJiBob3N0ICE9PSBmYWxzZSkge1xuICAgIGhvc3QgPSAnLy8nICsgKGhvc3QgfHwgJycpO1xuICAgIGlmIChwYXRobmFtZSAmJiBwYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJykgcGF0aG5hbWUgPSAnLycgKyBwYXRobmFtZTtcbiAgfSBlbHNlIGlmICghaG9zdCkge1xuICAgIGhvc3QgPSAnJztcbiAgfVxuXG4gIGlmIChoYXNoICYmIGhhc2guY2hhckF0KDApICE9PSAnIycpIGhhc2ggPSAnIycgKyBoYXNoO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaC5jaGFyQXQoMCkgIT09ICc/Jykgc2VhcmNoID0gJz8nICsgc2VhcmNoO1xuXG4gIHBhdGhuYW1lID0gcGF0aG5hbWUucmVwbGFjZSgvWz8jXS9nLCBmdW5jdGlvbihtYXRjaCkge1xuICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQobWF0Y2gpO1xuICB9KTtcbiAgc2VhcmNoID0gc2VhcmNoLnJlcGxhY2UoJyMnLCAnJTIzJyk7XG5cbiAgcmV0dXJuIHByb3RvY29sICsgaG9zdCArIHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcbn07XG5cbmZ1bmN0aW9uIHVybFJlc29sdmUoc291cmNlLCByZWxhdGl2ZSkge1xuICByZXR1cm4gdXJsUGFyc2Uoc291cmNlLCBmYWxzZSwgdHJ1ZSkucmVzb2x2ZShyZWxhdGl2ZSk7XG59XG5cblVybC5wcm90b3R5cGUucmVzb2x2ZSA9IGZ1bmN0aW9uKHJlbGF0aXZlKSB7XG4gIHJldHVybiB0aGlzLnJlc29sdmVPYmplY3QodXJsUGFyc2UocmVsYXRpdmUsIGZhbHNlLCB0cnVlKSkuZm9ybWF0KCk7XG59O1xuXG5mdW5jdGlvbiB1cmxSZXNvbHZlT2JqZWN0KHNvdXJjZSwgcmVsYXRpdmUpIHtcbiAgaWYgKCFzb3VyY2UpIHJldHVybiByZWxhdGl2ZTtcbiAgcmV0dXJuIHVybFBhcnNlKHNvdXJjZSwgZmFsc2UsIHRydWUpLnJlc29sdmVPYmplY3QocmVsYXRpdmUpO1xufVxuXG5VcmwucHJvdG90eXBlLnJlc29sdmVPYmplY3QgPSBmdW5jdGlvbihyZWxhdGl2ZSkge1xuICBpZiAodXRpbC5pc1N0cmluZyhyZWxhdGl2ZSkpIHtcbiAgICB2YXIgcmVsID0gbmV3IFVybCgpO1xuICAgIHJlbC5wYXJzZShyZWxhdGl2ZSwgZmFsc2UsIHRydWUpO1xuICAgIHJlbGF0aXZlID0gcmVsO1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9IG5ldyBVcmwoKTtcbiAgdmFyIHRrZXlzID0gT2JqZWN0LmtleXModGhpcyk7XG4gIGZvciAodmFyIHRrID0gMDsgdGsgPCB0a2V5cy5sZW5ndGg7IHRrKyspIHtcbiAgICB2YXIgdGtleSA9IHRrZXlzW3RrXTtcbiAgICByZXN1bHRbdGtleV0gPSB0aGlzW3RrZXldO1xuICB9XG5cbiAgLy8gaGFzaCBpcyBhbHdheXMgb3ZlcnJpZGRlbiwgbm8gbWF0dGVyIHdoYXQuXG4gIC8vIGV2ZW4gaHJlZj1cIlwiIHdpbGwgcmVtb3ZlIGl0LlxuICByZXN1bHQuaGFzaCA9IHJlbGF0aXZlLmhhc2g7XG5cbiAgLy8gaWYgdGhlIHJlbGF0aXZlIHVybCBpcyBlbXB0eSwgdGhlbiB0aGVyZSdzIG5vdGhpbmcgbGVmdCB0byBkbyBoZXJlLlxuICBpZiAocmVsYXRpdmUuaHJlZiA9PT0gJycpIHtcbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLy8gaHJlZnMgbGlrZSAvL2Zvby9iYXIgYWx3YXlzIGN1dCB0byB0aGUgcHJvdG9jb2wuXG4gIGlmIChyZWxhdGl2ZS5zbGFzaGVzICYmICFyZWxhdGl2ZS5wcm90b2NvbCkge1xuICAgIC8vIHRha2UgZXZlcnl0aGluZyBleGNlcHQgdGhlIHByb3RvY29sIGZyb20gcmVsYXRpdmVcbiAgICB2YXIgcmtleXMgPSBPYmplY3Qua2V5cyhyZWxhdGl2ZSk7XG4gICAgZm9yICh2YXIgcmsgPSAwOyByayA8IHJrZXlzLmxlbmd0aDsgcmsrKykge1xuICAgICAgdmFyIHJrZXkgPSBya2V5c1tya107XG4gICAgICBpZiAocmtleSAhPT0gJ3Byb3RvY29sJylcbiAgICAgICAgcmVzdWx0W3JrZXldID0gcmVsYXRpdmVbcmtleV07XG4gICAgfVxuXG4gICAgLy91cmxQYXJzZSBhcHBlbmRzIHRyYWlsaW5nIC8gdG8gdXJscyBsaWtlIGh0dHA6Ly93d3cuZXhhbXBsZS5jb21cbiAgICBpZiAoc2xhc2hlZFByb3RvY29sW3Jlc3VsdC5wcm90b2NvbF0gJiZcbiAgICAgICAgcmVzdWx0Lmhvc3RuYW1lICYmICFyZXN1bHQucGF0aG5hbWUpIHtcbiAgICAgIHJlc3VsdC5wYXRoID0gcmVzdWx0LnBhdGhuYW1lID0gJy8nO1xuICAgIH1cblxuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBpZiAocmVsYXRpdmUucHJvdG9jb2wgJiYgcmVsYXRpdmUucHJvdG9jb2wgIT09IHJlc3VsdC5wcm90b2NvbCkge1xuICAgIC8vIGlmIGl0J3MgYSBrbm93biB1cmwgcHJvdG9jb2wsIHRoZW4gY2hhbmdpbmdcbiAgICAvLyB0aGUgcHJvdG9jb2wgZG9lcyB3ZWlyZCB0aGluZ3NcbiAgICAvLyBmaXJzdCwgaWYgaXQncyBub3QgZmlsZTosIHRoZW4gd2UgTVVTVCBoYXZlIGEgaG9zdCxcbiAgICAvLyBhbmQgaWYgdGhlcmUgd2FzIGEgcGF0aFxuICAgIC8vIHRvIGJlZ2luIHdpdGgsIHRoZW4gd2UgTVVTVCBoYXZlIGEgcGF0aC5cbiAgICAvLyBpZiBpdCBpcyBmaWxlOiwgdGhlbiB0aGUgaG9zdCBpcyBkcm9wcGVkLFxuICAgIC8vIGJlY2F1c2UgdGhhdCdzIGtub3duIHRvIGJlIGhvc3RsZXNzLlxuICAgIC8vIGFueXRoaW5nIGVsc2UgaXMgYXNzdW1lZCB0byBiZSBhYnNvbHV0ZS5cbiAgICBpZiAoIXNsYXNoZWRQcm90b2NvbFtyZWxhdGl2ZS5wcm90b2NvbF0pIHtcbiAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMocmVsYXRpdmUpO1xuICAgICAgZm9yICh2YXIgdiA9IDA7IHYgPCBrZXlzLmxlbmd0aDsgdisrKSB7XG4gICAgICAgIHZhciBrID0ga2V5c1t2XTtcbiAgICAgICAgcmVzdWx0W2tdID0gcmVsYXRpdmVba107XG4gICAgICB9XG4gICAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcmVzdWx0LnByb3RvY29sID0gcmVsYXRpdmUucHJvdG9jb2w7XG4gICAgaWYgKCFyZWxhdGl2ZS5ob3N0ICYmICFob3N0bGVzc1Byb3RvY29sW3JlbGF0aXZlLnByb3RvY29sXSkge1xuICAgICAgdmFyIHJlbFBhdGggPSAocmVsYXRpdmUucGF0aG5hbWUgfHwgJycpLnNwbGl0KCcvJyk7XG4gICAgICB3aGlsZSAocmVsUGF0aC5sZW5ndGggJiYgIShyZWxhdGl2ZS5ob3N0ID0gcmVsUGF0aC5zaGlmdCgpKSk7XG4gICAgICBpZiAoIXJlbGF0aXZlLmhvc3QpIHJlbGF0aXZlLmhvc3QgPSAnJztcbiAgICAgIGlmICghcmVsYXRpdmUuaG9zdG5hbWUpIHJlbGF0aXZlLmhvc3RuYW1lID0gJyc7XG4gICAgICBpZiAocmVsUGF0aFswXSAhPT0gJycpIHJlbFBhdGgudW5zaGlmdCgnJyk7XG4gICAgICBpZiAocmVsUGF0aC5sZW5ndGggPCAyKSByZWxQYXRoLnVuc2hpZnQoJycpO1xuICAgICAgcmVzdWx0LnBhdGhuYW1lID0gcmVsUGF0aC5qb2luKCcvJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5wYXRobmFtZSA9IHJlbGF0aXZlLnBhdGhuYW1lO1xuICAgIH1cbiAgICByZXN1bHQuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoO1xuICAgIHJlc3VsdC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5O1xuICAgIHJlc3VsdC5ob3N0ID0gcmVsYXRpdmUuaG9zdCB8fCAnJztcbiAgICByZXN1bHQuYXV0aCA9IHJlbGF0aXZlLmF1dGg7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gcmVsYXRpdmUuaG9zdG5hbWUgfHwgcmVsYXRpdmUuaG9zdDtcbiAgICByZXN1bHQucG9ydCA9IHJlbGF0aXZlLnBvcnQ7XG4gICAgLy8gdG8gc3VwcG9ydCBodHRwLnJlcXVlc3RcbiAgICBpZiAocmVzdWx0LnBhdGhuYW1lIHx8IHJlc3VsdC5zZWFyY2gpIHtcbiAgICAgIHZhciBwID0gcmVzdWx0LnBhdGhuYW1lIHx8ICcnO1xuICAgICAgdmFyIHMgPSByZXN1bHQuc2VhcmNoIHx8ICcnO1xuICAgICAgcmVzdWx0LnBhdGggPSBwICsgcztcbiAgICB9XG4gICAgcmVzdWx0LnNsYXNoZXMgPSByZXN1bHQuc2xhc2hlcyB8fCByZWxhdGl2ZS5zbGFzaGVzO1xuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICB2YXIgaXNTb3VyY2VBYnMgPSAocmVzdWx0LnBhdGhuYW1lICYmIHJlc3VsdC5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJyksXG4gICAgICBpc1JlbEFicyA9IChcbiAgICAgICAgICByZWxhdGl2ZS5ob3N0IHx8XG4gICAgICAgICAgcmVsYXRpdmUucGF0aG5hbWUgJiYgcmVsYXRpdmUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLydcbiAgICAgICksXG4gICAgICBtdXN0RW5kQWJzID0gKGlzUmVsQWJzIHx8IGlzU291cmNlQWJzIHx8XG4gICAgICAgICAgICAgICAgICAgIChyZXN1bHQuaG9zdCAmJiByZWxhdGl2ZS5wYXRobmFtZSkpLFxuICAgICAgcmVtb3ZlQWxsRG90cyA9IG11c3RFbmRBYnMsXG4gICAgICBzcmNQYXRoID0gcmVzdWx0LnBhdGhuYW1lICYmIHJlc3VsdC5wYXRobmFtZS5zcGxpdCgnLycpIHx8IFtdLFxuICAgICAgcmVsUGF0aCA9IHJlbGF0aXZlLnBhdGhuYW1lICYmIHJlbGF0aXZlLnBhdGhuYW1lLnNwbGl0KCcvJykgfHwgW10sXG4gICAgICBwc3ljaG90aWMgPSByZXN1bHQucHJvdG9jb2wgJiYgIXNsYXNoZWRQcm90b2NvbFtyZXN1bHQucHJvdG9jb2xdO1xuXG4gIC8vIGlmIHRoZSB1cmwgaXMgYSBub24tc2xhc2hlZCB1cmwsIHRoZW4gcmVsYXRpdmVcbiAgLy8gbGlua3MgbGlrZSAuLi8uLiBzaG91bGQgYmUgYWJsZVxuICAvLyB0byBjcmF3bCB1cCB0byB0aGUgaG9zdG5hbWUsIGFzIHdlbGwuICBUaGlzIGlzIHN0cmFuZ2UuXG4gIC8vIHJlc3VsdC5wcm90b2NvbCBoYXMgYWxyZWFkeSBiZWVuIHNldCBieSBub3cuXG4gIC8vIExhdGVyIG9uLCBwdXQgdGhlIGZpcnN0IHBhdGggcGFydCBpbnRvIHRoZSBob3N0IGZpZWxkLlxuICBpZiAocHN5Y2hvdGljKSB7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gJyc7XG4gICAgcmVzdWx0LnBvcnQgPSBudWxsO1xuICAgIGlmIChyZXN1bHQuaG9zdCkge1xuICAgICAgaWYgKHNyY1BhdGhbMF0gPT09ICcnKSBzcmNQYXRoWzBdID0gcmVzdWx0Lmhvc3Q7XG4gICAgICBlbHNlIHNyY1BhdGgudW5zaGlmdChyZXN1bHQuaG9zdCk7XG4gICAgfVxuICAgIHJlc3VsdC5ob3N0ID0gJyc7XG4gICAgaWYgKHJlbGF0aXZlLnByb3RvY29sKSB7XG4gICAgICByZWxhdGl2ZS5ob3N0bmFtZSA9IG51bGw7XG4gICAgICByZWxhdGl2ZS5wb3J0ID0gbnVsbDtcbiAgICAgIGlmIChyZWxhdGl2ZS5ob3N0KSB7XG4gICAgICAgIGlmIChyZWxQYXRoWzBdID09PSAnJykgcmVsUGF0aFswXSA9IHJlbGF0aXZlLmhvc3Q7XG4gICAgICAgIGVsc2UgcmVsUGF0aC51bnNoaWZ0KHJlbGF0aXZlLmhvc3QpO1xuICAgICAgfVxuICAgICAgcmVsYXRpdmUuaG9zdCA9IG51bGw7XG4gICAgfVxuICAgIG11c3RFbmRBYnMgPSBtdXN0RW5kQWJzICYmIChyZWxQYXRoWzBdID09PSAnJyB8fCBzcmNQYXRoWzBdID09PSAnJyk7XG4gIH1cblxuICBpZiAoaXNSZWxBYnMpIHtcbiAgICAvLyBpdCdzIGFic29sdXRlLlxuICAgIHJlc3VsdC5ob3N0ID0gKHJlbGF0aXZlLmhvc3QgfHwgcmVsYXRpdmUuaG9zdCA9PT0gJycpID9cbiAgICAgICAgICAgICAgICAgIHJlbGF0aXZlLmhvc3QgOiByZXN1bHQuaG9zdDtcbiAgICByZXN1bHQuaG9zdG5hbWUgPSAocmVsYXRpdmUuaG9zdG5hbWUgfHwgcmVsYXRpdmUuaG9zdG5hbWUgPT09ICcnKSA/XG4gICAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmUuaG9zdG5hbWUgOiByZXN1bHQuaG9zdG5hbWU7XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgICBzcmNQYXRoID0gcmVsUGF0aDtcbiAgICAvLyBmYWxsIHRocm91Z2ggdG8gdGhlIGRvdC1oYW5kbGluZyBiZWxvdy5cbiAgfSBlbHNlIGlmIChyZWxQYXRoLmxlbmd0aCkge1xuICAgIC8vIGl0J3MgcmVsYXRpdmVcbiAgICAvLyB0aHJvdyBhd2F5IHRoZSBleGlzdGluZyBmaWxlLCBhbmQgdGFrZSB0aGUgbmV3IHBhdGggaW5zdGVhZC5cbiAgICBpZiAoIXNyY1BhdGgpIHNyY1BhdGggPSBbXTtcbiAgICBzcmNQYXRoLnBvcCgpO1xuICAgIHNyY1BhdGggPSBzcmNQYXRoLmNvbmNhdChyZWxQYXRoKTtcbiAgICByZXN1bHQuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoO1xuICAgIHJlc3VsdC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5O1xuICB9IGVsc2UgaWYgKCF1dGlsLmlzTnVsbE9yVW5kZWZpbmVkKHJlbGF0aXZlLnNlYXJjaCkpIHtcbiAgICAvLyBqdXN0IHB1bGwgb3V0IHRoZSBzZWFyY2guXG4gICAgLy8gbGlrZSBocmVmPSc/Zm9vJy5cbiAgICAvLyBQdXQgdGhpcyBhZnRlciB0aGUgb3RoZXIgdHdvIGNhc2VzIGJlY2F1c2UgaXQgc2ltcGxpZmllcyB0aGUgYm9vbGVhbnNcbiAgICBpZiAocHN5Y2hvdGljKSB7XG4gICAgICByZXN1bHQuaG9zdG5hbWUgPSByZXN1bHQuaG9zdCA9IHNyY1BhdGguc2hpZnQoKTtcbiAgICAgIC8vb2NjYXRpb25hbHkgdGhlIGF1dGggY2FuIGdldCBzdHVjayBvbmx5IGluIGhvc3RcbiAgICAgIC8vdGhpcyBlc3BlY2lhbGx5IGhhcHBlbnMgaW4gY2FzZXMgbGlrZVxuICAgICAgLy91cmwucmVzb2x2ZU9iamVjdCgnbWFpbHRvOmxvY2FsMUBkb21haW4xJywgJ2xvY2FsMkBkb21haW4yJylcbiAgICAgIHZhciBhdXRoSW5Ib3N0ID0gcmVzdWx0Lmhvc3QgJiYgcmVzdWx0Lmhvc3QuaW5kZXhPZignQCcpID4gMCA/XG4gICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5ob3N0LnNwbGl0KCdAJykgOiBmYWxzZTtcbiAgICAgIGlmIChhdXRoSW5Ib3N0KSB7XG4gICAgICAgIHJlc3VsdC5hdXRoID0gYXV0aEluSG9zdC5zaGlmdCgpO1xuICAgICAgICByZXN1bHQuaG9zdCA9IHJlc3VsdC5ob3N0bmFtZSA9IGF1dGhJbkhvc3Quc2hpZnQoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgICAvL3RvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gICAgaWYgKCF1dGlsLmlzTnVsbChyZXN1bHQucGF0aG5hbWUpIHx8ICF1dGlsLmlzTnVsbChyZXN1bHQuc2VhcmNoKSkge1xuICAgICAgcmVzdWx0LnBhdGggPSAocmVzdWx0LnBhdGhuYW1lID8gcmVzdWx0LnBhdGhuYW1lIDogJycpICtcbiAgICAgICAgICAgICAgICAgICAgKHJlc3VsdC5zZWFyY2ggPyByZXN1bHQuc2VhcmNoIDogJycpO1xuICAgIH1cbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgaWYgKCFzcmNQYXRoLmxlbmd0aCkge1xuICAgIC8vIG5vIHBhdGggYXQgYWxsLiAgZWFzeS5cbiAgICAvLyB3ZSd2ZSBhbHJlYWR5IGhhbmRsZWQgdGhlIG90aGVyIHN0dWZmIGFib3ZlLlxuICAgIHJlc3VsdC5wYXRobmFtZSA9IG51bGw7XG4gICAgLy90byBzdXBwb3J0IGh0dHAucmVxdWVzdFxuICAgIGlmIChyZXN1bHQuc2VhcmNoKSB7XG4gICAgICByZXN1bHQucGF0aCA9ICcvJyArIHJlc3VsdC5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5wYXRoID0gbnVsbDtcbiAgICB9XG4gICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8vIGlmIGEgdXJsIEVORHMgaW4gLiBvciAuLiwgdGhlbiBpdCBtdXN0IGdldCBhIHRyYWlsaW5nIHNsYXNoLlxuICAvLyBob3dldmVyLCBpZiBpdCBlbmRzIGluIGFueXRoaW5nIGVsc2Ugbm9uLXNsYXNoeSxcbiAgLy8gdGhlbiBpdCBtdXN0IE5PVCBnZXQgYSB0cmFpbGluZyBzbGFzaC5cbiAgdmFyIGxhc3QgPSBzcmNQYXRoLnNsaWNlKC0xKVswXTtcbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2ggPSAoXG4gICAgICAocmVzdWx0Lmhvc3QgfHwgcmVsYXRpdmUuaG9zdCB8fCBzcmNQYXRoLmxlbmd0aCA+IDEpICYmXG4gICAgICAobGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicpIHx8IGxhc3QgPT09ICcnKTtcblxuICAvLyBzdHJpcCBzaW5nbGUgZG90cywgcmVzb2x2ZSBkb3VibGUgZG90cyB0byBwYXJlbnQgZGlyXG4gIC8vIGlmIHRoZSBwYXRoIHRyaWVzIHRvIGdvIGFib3ZlIHRoZSByb290LCBgdXBgIGVuZHMgdXAgPiAwXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBzcmNQYXRoLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICBsYXN0ID0gc3JjUGF0aFtpXTtcbiAgICBpZiAobGFzdCA9PT0gJy4nKSB7XG4gICAgICBzcmNQYXRoLnNwbGljZShpLCAxKTtcbiAgICB9IGVsc2UgaWYgKGxhc3QgPT09ICcuLicpIHtcbiAgICAgIHNyY1BhdGguc3BsaWNlKGksIDEpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcmNQYXRoLnNwbGljZShpLCAxKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdGhlIHBhdGggaXMgYWxsb3dlZCB0byBnbyBhYm92ZSB0aGUgcm9vdCwgcmVzdG9yZSBsZWFkaW5nIC4uc1xuICBpZiAoIW11c3RFbmRBYnMgJiYgIXJlbW92ZUFsbERvdHMpIHtcbiAgICBmb3IgKDsgdXAtLTsgdXApIHtcbiAgICAgIHNyY1BhdGgudW5zaGlmdCgnLi4nKTtcbiAgICB9XG4gIH1cblxuICBpZiAobXVzdEVuZEFicyAmJiBzcmNQYXRoWzBdICE9PSAnJyAmJlxuICAgICAgKCFzcmNQYXRoWzBdIHx8IHNyY1BhdGhbMF0uY2hhckF0KDApICE9PSAnLycpKSB7XG4gICAgc3JjUGF0aC51bnNoaWZ0KCcnKTtcbiAgfVxuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIChzcmNQYXRoLmpvaW4oJy8nKS5zdWJzdHIoLTEpICE9PSAnLycpKSB7XG4gICAgc3JjUGF0aC5wdXNoKCcnKTtcbiAgfVxuXG4gIHZhciBpc0Fic29sdXRlID0gc3JjUGF0aFswXSA9PT0gJycgfHxcbiAgICAgIChzcmNQYXRoWzBdICYmIHNyY1BhdGhbMF0uY2hhckF0KDApID09PSAnLycpO1xuXG4gIC8vIHB1dCB0aGUgaG9zdCBiYWNrXG4gIGlmIChwc3ljaG90aWMpIHtcbiAgICByZXN1bHQuaG9zdG5hbWUgPSByZXN1bHQuaG9zdCA9IGlzQWJzb2x1dGUgPyAnJyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmNQYXRoLmxlbmd0aCA/IHNyY1BhdGguc2hpZnQoKSA6ICcnO1xuICAgIC8vb2NjYXRpb25hbHkgdGhlIGF1dGggY2FuIGdldCBzdHVjayBvbmx5IGluIGhvc3RcbiAgICAvL3RoaXMgZXNwZWNpYWxseSBoYXBwZW5zIGluIGNhc2VzIGxpa2VcbiAgICAvL3VybC5yZXNvbHZlT2JqZWN0KCdtYWlsdG86bG9jYWwxQGRvbWFpbjEnLCAnbG9jYWwyQGRvbWFpbjInKVxuICAgIHZhciBhdXRoSW5Ib3N0ID0gcmVzdWx0Lmhvc3QgJiYgcmVzdWx0Lmhvc3QuaW5kZXhPZignQCcpID4gMCA/XG4gICAgICAgICAgICAgICAgICAgICByZXN1bHQuaG9zdC5zcGxpdCgnQCcpIDogZmFsc2U7XG4gICAgaWYgKGF1dGhJbkhvc3QpIHtcbiAgICAgIHJlc3VsdC5hdXRoID0gYXV0aEluSG9zdC5zaGlmdCgpO1xuICAgICAgcmVzdWx0Lmhvc3QgPSByZXN1bHQuaG9zdG5hbWUgPSBhdXRoSW5Ib3N0LnNoaWZ0KCk7XG4gICAgfVxuICB9XG5cbiAgbXVzdEVuZEFicyA9IG11c3RFbmRBYnMgfHwgKHJlc3VsdC5ob3N0ICYmIHNyY1BhdGgubGVuZ3RoKTtcblxuICBpZiAobXVzdEVuZEFicyAmJiAhaXNBYnNvbHV0ZSkge1xuICAgIHNyY1BhdGgudW5zaGlmdCgnJyk7XG4gIH1cblxuICBpZiAoIXNyY1BhdGgubGVuZ3RoKSB7XG4gICAgcmVzdWx0LnBhdGhuYW1lID0gbnVsbDtcbiAgICByZXN1bHQucGF0aCA9IG51bGw7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0LnBhdGhuYW1lID0gc3JjUGF0aC5qb2luKCcvJyk7XG4gIH1cblxuICAvL3RvIHN1cHBvcnQgcmVxdWVzdC5odHRwXG4gIGlmICghdXRpbC5pc051bGwocmVzdWx0LnBhdGhuYW1lKSB8fCAhdXRpbC5pc051bGwocmVzdWx0LnNlYXJjaCkpIHtcbiAgICByZXN1bHQucGF0aCA9IChyZXN1bHQucGF0aG5hbWUgPyByZXN1bHQucGF0aG5hbWUgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHJlc3VsdC5zZWFyY2ggPyByZXN1bHQuc2VhcmNoIDogJycpO1xuICB9XG4gIHJlc3VsdC5hdXRoID0gcmVsYXRpdmUuYXV0aCB8fCByZXN1bHQuYXV0aDtcbiAgcmVzdWx0LnNsYXNoZXMgPSByZXN1bHQuc2xhc2hlcyB8fCByZWxhdGl2ZS5zbGFzaGVzO1xuICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblVybC5wcm90b3R5cGUucGFyc2VIb3N0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBob3N0ID0gdGhpcy5ob3N0O1xuICB2YXIgcG9ydCA9IHBvcnRQYXR0ZXJuLmV4ZWMoaG9zdCk7XG4gIGlmIChwb3J0KSB7XG4gICAgcG9ydCA9IHBvcnRbMF07XG4gICAgaWYgKHBvcnQgIT09ICc6Jykge1xuICAgICAgdGhpcy5wb3J0ID0gcG9ydC5zdWJzdHIoMSk7XG4gICAgfVxuICAgIGhvc3QgPSBob3N0LnN1YnN0cigwLCBob3N0Lmxlbmd0aCAtIHBvcnQubGVuZ3RoKTtcbiAgfVxuICBpZiAoaG9zdCkgdGhpcy5ob3N0bmFtZSA9IGhvc3Q7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNTdHJpbmc6IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB0eXBlb2YoYXJnKSA9PT0gJ3N0cmluZyc7XG4gIH0sXG4gIGlzT2JqZWN0OiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gdHlwZW9mKGFyZykgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbiAgfSxcbiAgaXNOdWxsOiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gYXJnID09PSBudWxsO1xuICB9LFxuICBpc051bGxPclVuZGVmaW5lZDogZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGFyZyA9PSBudWxsO1xuICB9XG59O1xuIiwiXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZGVwcmVjYXRlO1xuXG4vKipcbiAqIE1hcmsgdGhhdCBhIG1ldGhvZCBzaG91bGQgbm90IGJlIHVzZWQuXG4gKiBSZXR1cm5zIGEgbW9kaWZpZWQgZnVuY3Rpb24gd2hpY2ggd2FybnMgb25jZSBieSBkZWZhdWx0LlxuICpcbiAqIElmIGBsb2NhbFN0b3JhZ2Uubm9EZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLlxuICpcbiAqIElmIGBsb2NhbFN0b3JhZ2UudGhyb3dEZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBkZXByZWNhdGVkIGZ1bmN0aW9uc1xuICogd2lsbCB0aHJvdyBhbiBFcnJvciB3aGVuIGludm9rZWQuXG4gKlxuICogSWYgYGxvY2FsU3RvcmFnZS50cmFjZURlcHJlY2F0aW9uID0gdHJ1ZWAgaXMgc2V0LCB0aGVuIGRlcHJlY2F0ZWQgZnVuY3Rpb25zXG4gKiB3aWxsIGludm9rZSBgY29uc29sZS50cmFjZSgpYCBpbnN0ZWFkIG9mIGBjb25zb2xlLmVycm9yKClgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIC0gdGhlIGZ1bmN0aW9uIHRvIGRlcHJlY2F0ZVxuICogQHBhcmFtIHtTdHJpbmd9IG1zZyAtIHRoZSBzdHJpbmcgdG8gcHJpbnQgdG8gdGhlIGNvbnNvbGUgd2hlbiBgZm5gIGlzIGludm9rZWRcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gYSBuZXcgXCJkZXByZWNhdGVkXCIgdmVyc2lvbiBvZiBgZm5gXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGRlcHJlY2F0ZSAoZm4sIG1zZykge1xuICBpZiAoY29uZmlnKCdub0RlcHJlY2F0aW9uJykpIHtcbiAgICByZXR1cm4gZm47XG4gIH1cblxuICB2YXIgd2FybmVkID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGRlcHJlY2F0ZWQoKSB7XG4gICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgIGlmIChjb25maWcoJ3Rocm93RGVwcmVjYXRpb24nKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICAgIH0gZWxzZSBpZiAoY29uZmlnKCd0cmFjZURlcHJlY2F0aW9uJykpIHtcbiAgICAgICAgY29uc29sZS50cmFjZShtc2cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS53YXJuKG1zZyk7XG4gICAgICB9XG4gICAgICB3YXJuZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIHJldHVybiBkZXByZWNhdGVkO1xufVxuXG4vKipcbiAqIENoZWNrcyBgbG9jYWxTdG9yYWdlYCBmb3IgYm9vbGVhbiB2YWx1ZXMgZm9yIHRoZSBnaXZlbiBgbmFtZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY29uZmlnIChuYW1lKSB7XG4gIC8vIGFjY2Vzc2luZyBnbG9iYWwubG9jYWxTdG9yYWdlIGNhbiB0cmlnZ2VyIGEgRE9NRXhjZXB0aW9uIGluIHNhbmRib3hlZCBpZnJhbWVzXG4gIHRyeSB7XG4gICAgaWYgKCFnbG9iYWwubG9jYWxTdG9yYWdlKSByZXR1cm4gZmFsc2U7XG4gIH0gY2F0Y2ggKF8pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHZhbCA9IGdsb2JhbC5sb2NhbFN0b3JhZ2VbbmFtZV07XG4gIGlmIChudWxsID09IHZhbCkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gU3RyaW5nKHZhbCkudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBleHRlbmRcblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuZnVuY3Rpb24gZXh0ZW5kKCkge1xuICAgIHZhciB0YXJnZXQgPSB7fVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXVxuXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXRcbn1cbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdGxvYWRlZDogZmFsc2UsXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuXHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5ubWQgPSAobW9kdWxlKSA9PiB7XG5cdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdHJldHVybiBtb2R1bGU7XG59OyIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgaXMgcmVmZXJlbmNlZCBieSBvdGhlciBtb2R1bGVzIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OTg1KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=