(()=>{"use strict";var e={5038:(e,t)=>{var s;Object.defineProperty(t,"__esModule",{value:!0}),t.ChromeMessageType=void 0,(s=t.ChromeMessageType||(t.ChromeMessageType={}))[s.DOWNLOAD_TRACK=0]="DOWNLOAD_TRACK",s[s.DOWNLOAD_ALBUM=1]="DOWNLOAD_ALBUM",s[s.DOWNLOAD_PLAYLIST=2]="DOWNLOAD_PLAYLIST",s[s.DOWNLOAD_ARTIST=3]="DOWNLOAD_ARTIST",s[s.ADD_DOWNLOAD_LISTENER=4]="ADD_DOWNLOAD_LISTENER",s[s.ADD_ERROR_LISTENER=5]="ADD_ERROR_LISTENER",s[s.DOWNLOAD_EVENT=6]="DOWNLOAD_EVENT",s[s.DOWNLOAD_ERROR_EVENT=7]="DOWNLOAD_ERROR_EVENT",s[s.ERROR_EVENT=8]="ERROR_EVENT",s[s.LIST_DOWNLOAD_ITEMS=9]="LIST_DOWNLOAD_ITEMS",s[s.INTERRUPT_DOWNLOAD=10]="INTERRUPT_DOWNLOAD"},6318:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.HTMLDownloadElement=void 0;class s extends HTMLElement{constructor(e){s.isInited||(customElements.define("download-element",s),s.isInited=!0),super(),this.downloadItem_=e,this.error_=null,this.classList.add("row"),this.init_(e),this.stateIconElement_=this.querySelector(".state i"),this.nameElement_=this.querySelector(".name"),this.estimatedTimeLeftElement_=this.querySelector(".estimated-time-left"),this.downloadSpeedElement_=this.querySelector(".download-speed")}stateIconStyle_(e){return new Map([["in_progress","fas fa-spinner"],["pending","fas fa-circle-notch"],["complete","fas fa-check-circle"],["error","fas fa-exclamation-circle"],["interrupted","fas fa-ban"]]).get(e)}trimNameToLength_(e,t){return e.length<=t?e:e.slice(0,t-3)+"..."}getEstimatedTime_(){if(0===this.downloadItem_.downloadedSize)return null;const e=(Date.now()-this.downloadItem_.startMs)/this.downloadItem_.downloadedSize*this.downloadItem_.size-(Date.now()-this.downloadItem_.startMs);return e/1e3/60/60>=1?{time:e/1e3/60/60,units:"s"}:e/1e3/60>=1?{time:e/1e3/60,units:"m"}:{time:e/1e3,units:"s"}}getSpeed_(){if(0===this.downloadItem_.downloadedSize)return null;const e=this.downloadItem_.downloadedSize/((Date.now()-this.downloadItem_.startMs)/1e3);return e/1e3/1e3>=1?{speed:e/1e3/1e3,units:"Mb/s"}:{speed:e/1e3,units:"Kb/s"}}init_(e){if(this.downloadItem_=e,this.setAttribute("state",this.downloadItem_.state),this.innerHTML=`\n    <div class="cell state">\n      <i class="${this.stateIconStyle_(e.state)}"></i>\n    </div>\n    <div class="cell name">\n      ${this.trimNameToLength_(e.name,15)}\n    </div>`,this.getSpeed_()&&this.getEstimatedTime_()){const e=this.getSpeed_(),t=this.getEstimatedTime_();this.innerHTML+=`\n      <div class="cell estimated-time-left">\n        ${t.time.toFixed()}<span class="units">${t.units}</span>\n      </div>\n      <div class="cell download-speed">\n        ${e.speed.toFixed()}<span class="units">${e.units}</span>\n      </div>`}else this.innerHTML+='\n      <div class="cell estimated-time-left">\n        -<span class="units"></span>\n      </div>\n      <div class="cell download-speed">\n        -<span class="units"></span>\n      </div>'}get downloadItem(){return this.downloadItem_}update(e){if(this.downloadItem_=e,this.setAttribute("state",this.downloadItem_.state),this.stateIconElement_.classList.value=this.stateIconStyle_(e.state),this.nameElement_.innerHTML=this.trimNameToLength_(e.name,15),this.getSpeed_()&&this.getEstimatedTime_()){const e=this.getSpeed_(),t=this.getEstimatedTime_();this.estimatedTimeLeftElement_.innerHTML=`\n        ${t.time.toFixed()}<span class="units">${t.units}</span>\n      `,this.downloadSpeedElement_.innerHTML=`\n        ${e.speed.toFixed()}<span class="units">${e.units}</span>\n      `}else this.estimatedTimeLeftElement_.innerHTML='-<span class="units"></span>',this.downloadSpeedElement_.innerHTML='-<span class="units"></span>'}setError(e){this.error_=e}getError(){return this.error_}}t.HTMLDownloadElement=s,s.isInited=!1}},t={};function s(n){var i=t[n];if(void 0!==i)return i.exports;var a=t[n]={exports:{}};return e[n](a,a.exports,s),a.exports}(()=>{const e=s(5038),t=s(6318),n=chrome.runtime.connect({name:"com"}),i={type:e.ChromeMessageType.ADD_DOWNLOAD_LISTENER};n.postMessage(i);const a={type:e.ChromeMessageType.LIST_DOWNLOAD_ITEMS,items:[]};n.postMessage(a);const d=document.querySelector("download-queue"),o=[],l=(s,i,a,d)=>{const o=new t.HTMLDownloadElement(d);return i.push(o),s.append(o),o.querySelector(".state i").addEventListener("click",(()=>{const t={type:e.ChromeMessageType.INTERRUPT_DOWNLOAD,downloadItemId:d.id};n.postMessage(t)})),o};n.onMessage.addListener((t=>{switch(t.type){case e.ChromeMessageType.DOWNLOAD_EVENT:{const e=o.find((e=>e.downloadItem.id===t.downloadItem.id));e?e.update(t.downloadItem):"add"===t.eventType&&l(d,o,0,t.downloadItem);break}case e.ChromeMessageType.LIST_DOWNLOAD_ITEMS:for(const e of t.items)o.find((t=>t.downloadItem.id===e.id))||l(d,o,0,e);break;default:console.debug("wrong message type: "+t.type)}}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,